schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# columns and relationships of "Cliente"
type Cliente {
  # An array relationship
  ContratoAlquilers(
    # distinct select on columns
    distinct_on: [ContratoAlquiler_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ContratoAlquiler_order_by!]

    # filter the rows returned
    where: ContratoAlquiler_bool_exp
  ): [ContratoAlquiler!]!

  # An aggregated array relationship
  ContratoAlquilers_aggregate(
    # distinct select on columns
    distinct_on: [ContratoAlquiler_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ContratoAlquiler_order_by!]

    # filter the rows returned
    where: ContratoAlquiler_bool_exp
  ): ContratoAlquiler_aggregate!
  cedula: String!
  direccion: String!
  direccion2: String
  email: String
  id: Int!
  nombre: String!
  nombre2: String
  observacion: String
  telf1: String
  telf2: String
  telf3: String
}

# aggregated selection of "Cliente"
type Cliente_aggregate {
  aggregate: Cliente_aggregate_fields
  nodes: [Cliente!]!
}

# aggregate fields of "Cliente"
type Cliente_aggregate_fields {
  avg: Cliente_avg_fields
  count(columns: [Cliente_select_column!], distinct: Boolean): Int
  max: Cliente_max_fields
  min: Cliente_min_fields
  stddev: Cliente_stddev_fields
  stddev_pop: Cliente_stddev_pop_fields
  stddev_samp: Cliente_stddev_samp_fields
  sum: Cliente_sum_fields
  var_pop: Cliente_var_pop_fields
  var_samp: Cliente_var_samp_fields
  variance: Cliente_variance_fields
}

# order by aggregate values of table "Cliente"
input Cliente_aggregate_order_by {
  avg: Cliente_avg_order_by
  count: order_by
  max: Cliente_max_order_by
  min: Cliente_min_order_by
  stddev: Cliente_stddev_order_by
  stddev_pop: Cliente_stddev_pop_order_by
  stddev_samp: Cliente_stddev_samp_order_by
  sum: Cliente_sum_order_by
  var_pop: Cliente_var_pop_order_by
  var_samp: Cliente_var_samp_order_by
  variance: Cliente_variance_order_by
}

# input type for inserting array relation for remote table "Cliente"
input Cliente_arr_rel_insert_input {
  data: [Cliente_insert_input!]!
  on_conflict: Cliente_on_conflict
}

# aggregate avg on columns
type Cliente_avg_fields {
  id: Float
}

# order by avg() on columns of table "Cliente"
input Cliente_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "Cliente". All fields are combined with a logical 'AND'.
input Cliente_bool_exp {
  ContratoAlquilers: ContratoAlquiler_bool_exp
  _and: [Cliente_bool_exp]
  _not: Cliente_bool_exp
  _or: [Cliente_bool_exp]
  cedula: String_comparison_exp
  direccion: String_comparison_exp
  direccion2: String_comparison_exp
  email: String_comparison_exp
  id: Int_comparison_exp
  nombre: String_comparison_exp
  nombre2: String_comparison_exp
  observacion: String_comparison_exp
  telf1: String_comparison_exp
  telf2: String_comparison_exp
  telf3: String_comparison_exp
}

# unique or primary key constraints on table "Cliente"
enum Cliente_constraint {
  # unique or primary key constraint
  Cliente_pkey
}

# input type for incrementing integer column in table "Cliente"
input Cliente_inc_input {
  id: Int
}

# input type for inserting data into table "Cliente"
input Cliente_insert_input {
  ContratoAlquilers: ContratoAlquiler_arr_rel_insert_input
  cedula: String
  direccion: String
  direccion2: String
  email: String
  id: Int
  nombre: String
  nombre2: String
  observacion: String
  telf1: String
  telf2: String
  telf3: String
}

# aggregate max on columns
type Cliente_max_fields {
  cedula: String
  direccion: String
  direccion2: String
  email: String
  id: Int
  nombre: String
  nombre2: String
  observacion: String
  telf1: String
  telf2: String
  telf3: String
}

# order by max() on columns of table "Cliente"
input Cliente_max_order_by {
  cedula: order_by
  direccion: order_by
  direccion2: order_by
  email: order_by
  id: order_by
  nombre: order_by
  nombre2: order_by
  observacion: order_by
  telf1: order_by
  telf2: order_by
  telf3: order_by
}

# aggregate min on columns
type Cliente_min_fields {
  cedula: String
  direccion: String
  direccion2: String
  email: String
  id: Int
  nombre: String
  nombre2: String
  observacion: String
  telf1: String
  telf2: String
  telf3: String
}

# order by min() on columns of table "Cliente"
input Cliente_min_order_by {
  cedula: order_by
  direccion: order_by
  direccion2: order_by
  email: order_by
  id: order_by
  nombre: order_by
  nombre2: order_by
  observacion: order_by
  telf1: order_by
  telf2: order_by
  telf3: order_by
}

# response of any mutation on the table "Cliente"
type Cliente_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [Cliente!]!
}

# input type for inserting object relation for remote table "Cliente"
input Cliente_obj_rel_insert_input {
  data: Cliente_insert_input!
  on_conflict: Cliente_on_conflict
}

# on conflict condition type for table "Cliente"
input Cliente_on_conflict {
  constraint: Cliente_constraint!
  update_columns: [Cliente_update_column!]!
  where: Cliente_bool_exp
}

# ordering options when selecting data from "Cliente"
input Cliente_order_by {
  ContratoAlquilers_aggregate: ContratoAlquiler_aggregate_order_by
  cedula: order_by
  direccion: order_by
  direccion2: order_by
  email: order_by
  id: order_by
  nombre: order_by
  nombre2: order_by
  observacion: order_by
  telf1: order_by
  telf2: order_by
  telf3: order_by
}

# primary key columns input for table: "Cliente"
input Cliente_pk_columns_input {
  id: Int!
}

# select columns of table "Cliente"
enum Cliente_select_column {
  # column name
  cedula

  # column name
  direccion

  # column name
  direccion2

  # column name
  email

  # column name
  id

  # column name
  nombre

  # column name
  nombre2

  # column name
  observacion

  # column name
  telf1

  # column name
  telf2

  # column name
  telf3
}

# input type for updating data in table "Cliente"
input Cliente_set_input {
  cedula: String
  direccion: String
  direccion2: String
  email: String
  id: Int
  nombre: String
  nombre2: String
  observacion: String
  telf1: String
  telf2: String
  telf3: String
}

# aggregate stddev on columns
type Cliente_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "Cliente"
input Cliente_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type Cliente_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "Cliente"
input Cliente_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type Cliente_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "Cliente"
input Cliente_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type Cliente_sum_fields {
  id: Int
}

# order by sum() on columns of table "Cliente"
input Cliente_sum_order_by {
  id: order_by
}

# update columns of table "Cliente"
enum Cliente_update_column {
  # column name
  cedula

  # column name
  direccion

  # column name
  direccion2

  # column name
  email

  # column name
  id

  # column name
  nombre

  # column name
  nombre2

  # column name
  observacion

  # column name
  telf1

  # column name
  telf2

  # column name
  telf3
}

# aggregate var_pop on columns
type Cliente_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "Cliente"
input Cliente_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type Cliente_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "Cliente"
input Cliente_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type Cliente_variance_fields {
  id: Float
}

# order by variance() on columns of table "Cliente"
input Cliente_variance_order_by {
  id: order_by
}

# columns and relationships of "ContratoAlquiler"
type ContratoAlquiler {
  # An object relationship
  Cliente: Cliente!
  area: String
  cliente_id: Int!
  estado_id: Int!
  fecha: date!
  id: Int!
  lugar_obra: String!
  metraje: String
  numero: Int!
  observacion: String
}

# aggregated selection of "ContratoAlquiler"
type ContratoAlquiler_aggregate {
  aggregate: ContratoAlquiler_aggregate_fields
  nodes: [ContratoAlquiler!]!
}

# aggregate fields of "ContratoAlquiler"
type ContratoAlquiler_aggregate_fields {
  avg: ContratoAlquiler_avg_fields
  count(columns: [ContratoAlquiler_select_column!], distinct: Boolean): Int
  max: ContratoAlquiler_max_fields
  min: ContratoAlquiler_min_fields
  stddev: ContratoAlquiler_stddev_fields
  stddev_pop: ContratoAlquiler_stddev_pop_fields
  stddev_samp: ContratoAlquiler_stddev_samp_fields
  sum: ContratoAlquiler_sum_fields
  var_pop: ContratoAlquiler_var_pop_fields
  var_samp: ContratoAlquiler_var_samp_fields
  variance: ContratoAlquiler_variance_fields
}

# order by aggregate values of table "ContratoAlquiler"
input ContratoAlquiler_aggregate_order_by {
  avg: ContratoAlquiler_avg_order_by
  count: order_by
  max: ContratoAlquiler_max_order_by
  min: ContratoAlquiler_min_order_by
  stddev: ContratoAlquiler_stddev_order_by
  stddev_pop: ContratoAlquiler_stddev_pop_order_by
  stddev_samp: ContratoAlquiler_stddev_samp_order_by
  sum: ContratoAlquiler_sum_order_by
  var_pop: ContratoAlquiler_var_pop_order_by
  var_samp: ContratoAlquiler_var_samp_order_by
  variance: ContratoAlquiler_variance_order_by
}

# input type for inserting array relation for remote table "ContratoAlquiler"
input ContratoAlquiler_arr_rel_insert_input {
  data: [ContratoAlquiler_insert_input!]!
  on_conflict: ContratoAlquiler_on_conflict
}

# aggregate avg on columns
type ContratoAlquiler_avg_fields {
  cliente_id: Float
  estado_id: Float
  id: Float
  numero: Float
}

# order by avg() on columns of table "ContratoAlquiler"
input ContratoAlquiler_avg_order_by {
  cliente_id: order_by
  estado_id: order_by
  id: order_by
  numero: order_by
}

# Boolean expression to filter rows from the table "ContratoAlquiler". All fields are combined with a logical 'AND'.
input ContratoAlquiler_bool_exp {
  Cliente: Cliente_bool_exp
  _and: [ContratoAlquiler_bool_exp]
  _not: ContratoAlquiler_bool_exp
  _or: [ContratoAlquiler_bool_exp]
  area: String_comparison_exp
  cliente_id: Int_comparison_exp
  estado_id: Int_comparison_exp
  fecha: date_comparison_exp
  id: Int_comparison_exp
  lugar_obra: String_comparison_exp
  metraje: String_comparison_exp
  numero: Int_comparison_exp
  observacion: String_comparison_exp
}

# unique or primary key constraints on table "ContratoAlquiler"
enum ContratoAlquiler_constraint {
  # unique or primary key constraint
  ContratoAlquiler_numero_key

  # unique or primary key constraint
  ContratoAlquiler_pkey
}

# input type for incrementing integer column in table "ContratoAlquiler"
input ContratoAlquiler_inc_input {
  cliente_id: Int
  estado_id: Int
  id: Int
  numero: Int
}

# input type for inserting data into table "ContratoAlquiler"
input ContratoAlquiler_insert_input {
  Cliente: Cliente_obj_rel_insert_input
  area: String
  cliente_id: Int
  estado_id: Int
  fecha: date
  id: Int
  lugar_obra: String
  metraje: String
  numero: Int
  observacion: String
}

# aggregate max on columns
type ContratoAlquiler_max_fields {
  area: String
  cliente_id: Int
  estado_id: Int
  fecha: date
  id: Int
  lugar_obra: String
  metraje: String
  numero: Int
  observacion: String
}

# order by max() on columns of table "ContratoAlquiler"
input ContratoAlquiler_max_order_by {
  area: order_by
  cliente_id: order_by
  estado_id: order_by
  fecha: order_by
  id: order_by
  lugar_obra: order_by
  metraje: order_by
  numero: order_by
  observacion: order_by
}

# aggregate min on columns
type ContratoAlquiler_min_fields {
  area: String
  cliente_id: Int
  estado_id: Int
  fecha: date
  id: Int
  lugar_obra: String
  metraje: String
  numero: Int
  observacion: String
}

# order by min() on columns of table "ContratoAlquiler"
input ContratoAlquiler_min_order_by {
  area: order_by
  cliente_id: order_by
  estado_id: order_by
  fecha: order_by
  id: order_by
  lugar_obra: order_by
  metraje: order_by
  numero: order_by
  observacion: order_by
}

# response of any mutation on the table "ContratoAlquiler"
type ContratoAlquiler_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ContratoAlquiler!]!
}

# input type for inserting object relation for remote table "ContratoAlquiler"
input ContratoAlquiler_obj_rel_insert_input {
  data: ContratoAlquiler_insert_input!
  on_conflict: ContratoAlquiler_on_conflict
}

# on conflict condition type for table "ContratoAlquiler"
input ContratoAlquiler_on_conflict {
  constraint: ContratoAlquiler_constraint!
  update_columns: [ContratoAlquiler_update_column!]!
  where: ContratoAlquiler_bool_exp
}

# ordering options when selecting data from "ContratoAlquiler"
input ContratoAlquiler_order_by {
  Cliente: Cliente_order_by
  area: order_by
  cliente_id: order_by
  estado_id: order_by
  fecha: order_by
  id: order_by
  lugar_obra: order_by
  metraje: order_by
  numero: order_by
  observacion: order_by
}

# primary key columns input for table: "ContratoAlquiler"
input ContratoAlquiler_pk_columns_input {
  id: Int!
}

# select columns of table "ContratoAlquiler"
enum ContratoAlquiler_select_column {
  # column name
  area

  # column name
  cliente_id

  # column name
  estado_id

  # column name
  fecha

  # column name
  id

  # column name
  lugar_obra

  # column name
  metraje

  # column name
  numero

  # column name
  observacion
}

# input type for updating data in table "ContratoAlquiler"
input ContratoAlquiler_set_input {
  area: String
  cliente_id: Int
  estado_id: Int
  fecha: date
  id: Int
  lugar_obra: String
  metraje: String
  numero: Int
  observacion: String
}

# aggregate stddev on columns
type ContratoAlquiler_stddev_fields {
  cliente_id: Float
  estado_id: Float
  id: Float
  numero: Float
}

# order by stddev() on columns of table "ContratoAlquiler"
input ContratoAlquiler_stddev_order_by {
  cliente_id: order_by
  estado_id: order_by
  id: order_by
  numero: order_by
}

# aggregate stddev_pop on columns
type ContratoAlquiler_stddev_pop_fields {
  cliente_id: Float
  estado_id: Float
  id: Float
  numero: Float
}

# order by stddev_pop() on columns of table "ContratoAlquiler"
input ContratoAlquiler_stddev_pop_order_by {
  cliente_id: order_by
  estado_id: order_by
  id: order_by
  numero: order_by
}

# aggregate stddev_samp on columns
type ContratoAlquiler_stddev_samp_fields {
  cliente_id: Float
  estado_id: Float
  id: Float
  numero: Float
}

# order by stddev_samp() on columns of table "ContratoAlquiler"
input ContratoAlquiler_stddev_samp_order_by {
  cliente_id: order_by
  estado_id: order_by
  id: order_by
  numero: order_by
}

# aggregate sum on columns
type ContratoAlquiler_sum_fields {
  cliente_id: Int
  estado_id: Int
  id: Int
  numero: Int
}

# order by sum() on columns of table "ContratoAlquiler"
input ContratoAlquiler_sum_order_by {
  cliente_id: order_by
  estado_id: order_by
  id: order_by
  numero: order_by
}

# update columns of table "ContratoAlquiler"
enum ContratoAlquiler_update_column {
  # column name
  area

  # column name
  cliente_id

  # column name
  estado_id

  # column name
  fecha

  # column name
  id

  # column name
  lugar_obra

  # column name
  metraje

  # column name
  numero

  # column name
  observacion
}

# aggregate var_pop on columns
type ContratoAlquiler_var_pop_fields {
  cliente_id: Float
  estado_id: Float
  id: Float
  numero: Float
}

# order by var_pop() on columns of table "ContratoAlquiler"
input ContratoAlquiler_var_pop_order_by {
  cliente_id: order_by
  estado_id: order_by
  id: order_by
  numero: order_by
}

# aggregate var_samp on columns
type ContratoAlquiler_var_samp_fields {
  cliente_id: Float
  estado_id: Float
  id: Float
  numero: Float
}

# order by var_samp() on columns of table "ContratoAlquiler"
input ContratoAlquiler_var_samp_order_by {
  cliente_id: order_by
  estado_id: order_by
  id: order_by
  numero: order_by
}

# aggregate variance on columns
type ContratoAlquiler_variance_fields {
  cliente_id: Float
  estado_id: Float
  id: Float
  numero: Float
}

# order by variance() on columns of table "ContratoAlquiler"
input ContratoAlquiler_variance_order_by {
  cliente_id: order_by
  estado_id: order_by
  id: order_by
  numero: order_by
}

scalar date

# expression to compare columns of type date. All fields are combined with logical 'AND'.
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

# columns and relationships of "EstadoActual"
type EstadoActual {
  descripcion: String!
  id: Int!
}

# aggregated selection of "EstadoActual"
type EstadoActual_aggregate {
  aggregate: EstadoActual_aggregate_fields
  nodes: [EstadoActual!]!
}

# aggregate fields of "EstadoActual"
type EstadoActual_aggregate_fields {
  avg: EstadoActual_avg_fields
  count(columns: [EstadoActual_select_column!], distinct: Boolean): Int
  max: EstadoActual_max_fields
  min: EstadoActual_min_fields
  stddev: EstadoActual_stddev_fields
  stddev_pop: EstadoActual_stddev_pop_fields
  stddev_samp: EstadoActual_stddev_samp_fields
  sum: EstadoActual_sum_fields
  var_pop: EstadoActual_var_pop_fields
  var_samp: EstadoActual_var_samp_fields
  variance: EstadoActual_variance_fields
}

# order by aggregate values of table "EstadoActual"
input EstadoActual_aggregate_order_by {
  avg: EstadoActual_avg_order_by
  count: order_by
  max: EstadoActual_max_order_by
  min: EstadoActual_min_order_by
  stddev: EstadoActual_stddev_order_by
  stddev_pop: EstadoActual_stddev_pop_order_by
  stddev_samp: EstadoActual_stddev_samp_order_by
  sum: EstadoActual_sum_order_by
  var_pop: EstadoActual_var_pop_order_by
  var_samp: EstadoActual_var_samp_order_by
  variance: EstadoActual_variance_order_by
}

# input type for inserting array relation for remote table "EstadoActual"
input EstadoActual_arr_rel_insert_input {
  data: [EstadoActual_insert_input!]!
  on_conflict: EstadoActual_on_conflict
}

# aggregate avg on columns
type EstadoActual_avg_fields {
  id: Float
}

# order by avg() on columns of table "EstadoActual"
input EstadoActual_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "EstadoActual". All fields are combined with a logical 'AND'.
input EstadoActual_bool_exp {
  _and: [EstadoActual_bool_exp]
  _not: EstadoActual_bool_exp
  _or: [EstadoActual_bool_exp]
  descripcion: String_comparison_exp
  id: Int_comparison_exp
}

# unique or primary key constraints on table "EstadoActual"
enum EstadoActual_constraint {
  # unique or primary key constraint
  EstadoActual_pkey
}

# input type for incrementing integer column in table "EstadoActual"
input EstadoActual_inc_input {
  id: Int
}

# input type for inserting data into table "EstadoActual"
input EstadoActual_insert_input {
  descripcion: String
  id: Int
}

# aggregate max on columns
type EstadoActual_max_fields {
  descripcion: String
  id: Int
}

# order by max() on columns of table "EstadoActual"
input EstadoActual_max_order_by {
  descripcion: order_by
  id: order_by
}

# aggregate min on columns
type EstadoActual_min_fields {
  descripcion: String
  id: Int
}

# order by min() on columns of table "EstadoActual"
input EstadoActual_min_order_by {
  descripcion: order_by
  id: order_by
}

# response of any mutation on the table "EstadoActual"
type EstadoActual_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [EstadoActual!]!
}

# input type for inserting object relation for remote table "EstadoActual"
input EstadoActual_obj_rel_insert_input {
  data: EstadoActual_insert_input!
  on_conflict: EstadoActual_on_conflict
}

# on conflict condition type for table "EstadoActual"
input EstadoActual_on_conflict {
  constraint: EstadoActual_constraint!
  update_columns: [EstadoActual_update_column!]!
  where: EstadoActual_bool_exp
}

# ordering options when selecting data from "EstadoActual"
input EstadoActual_order_by {
  descripcion: order_by
  id: order_by
}

# primary key columns input for table: "EstadoActual"
input EstadoActual_pk_columns_input {
  id: Int!
}

# select columns of table "EstadoActual"
enum EstadoActual_select_column {
  # column name
  descripcion

  # column name
  id
}

# input type for updating data in table "EstadoActual"
input EstadoActual_set_input {
  descripcion: String
  id: Int
}

# aggregate stddev on columns
type EstadoActual_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "EstadoActual"
input EstadoActual_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type EstadoActual_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "EstadoActual"
input EstadoActual_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type EstadoActual_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "EstadoActual"
input EstadoActual_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type EstadoActual_sum_fields {
  id: Int
}

# order by sum() on columns of table "EstadoActual"
input EstadoActual_sum_order_by {
  id: order_by
}

# update columns of table "EstadoActual"
enum EstadoActual_update_column {
  # column name
  descripcion

  # column name
  id
}

# aggregate var_pop on columns
type EstadoActual_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "EstadoActual"
input EstadoActual_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type EstadoActual_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "EstadoActual"
input EstadoActual_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type EstadoActual_variance_fields {
  id: Float
}

# order by variance() on columns of table "EstadoActual"
input EstadoActual_variance_order_by {
  id: order_by
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

# mutation root
type mutation_root {
  # delete data from the table: "Cliente"
  delete_Cliente(
    # filter the rows which have to be deleted
    where: Cliente_bool_exp!
  ): Cliente_mutation_response

  # delete single row from the table: "Cliente"
  delete_Cliente_by_pk(id: Int!): Cliente

  # delete data from the table: "ContratoAlquiler"
  delete_ContratoAlquiler(
    # filter the rows which have to be deleted
    where: ContratoAlquiler_bool_exp!
  ): ContratoAlquiler_mutation_response

  # delete single row from the table: "ContratoAlquiler"
  delete_ContratoAlquiler_by_pk(id: Int!): ContratoAlquiler

  # delete data from the table: "EstadoActual"
  delete_EstadoActual(
    # filter the rows which have to be deleted
    where: EstadoActual_bool_exp!
  ): EstadoActual_mutation_response

  # delete single row from the table: "EstadoActual"
  delete_EstadoActual_by_pk(id: Int!): EstadoActual

  # insert data into the table: "Cliente"
  insert_Cliente(
    # the rows to be inserted
    objects: [Cliente_insert_input!]!

    # on conflict condition
    on_conflict: Cliente_on_conflict
  ): Cliente_mutation_response

  # insert a single row into the table: "Cliente"
  insert_Cliente_one(
    # the row to be inserted
    object: Cliente_insert_input!

    # on conflict condition
    on_conflict: Cliente_on_conflict
  ): Cliente

  # insert data into the table: "ContratoAlquiler"
  insert_ContratoAlquiler(
    # the rows to be inserted
    objects: [ContratoAlquiler_insert_input!]!

    # on conflict condition
    on_conflict: ContratoAlquiler_on_conflict
  ): ContratoAlquiler_mutation_response

  # insert a single row into the table: "ContratoAlquiler"
  insert_ContratoAlquiler_one(
    # the row to be inserted
    object: ContratoAlquiler_insert_input!

    # on conflict condition
    on_conflict: ContratoAlquiler_on_conflict
  ): ContratoAlquiler

  # insert data into the table: "EstadoActual"
  insert_EstadoActual(
    # the rows to be inserted
    objects: [EstadoActual_insert_input!]!

    # on conflict condition
    on_conflict: EstadoActual_on_conflict
  ): EstadoActual_mutation_response

  # insert a single row into the table: "EstadoActual"
  insert_EstadoActual_one(
    # the row to be inserted
    object: EstadoActual_insert_input!

    # on conflict condition
    on_conflict: EstadoActual_on_conflict
  ): EstadoActual

  # update data of the table: "Cliente"
  update_Cliente(
    # increments the integer columns with given value of the filtered values
    _inc: Cliente_inc_input

    # sets the columns of the filtered rows to the given values
    _set: Cliente_set_input

    # filter the rows which have to be updated
    where: Cliente_bool_exp!
  ): Cliente_mutation_response

  # update single row of the table: "Cliente"
  update_Cliente_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: Cliente_inc_input

    # sets the columns of the filtered rows to the given values
    _set: Cliente_set_input
    pk_columns: Cliente_pk_columns_input!
  ): Cliente

  # update data of the table: "ContratoAlquiler"
  update_ContratoAlquiler(
    # increments the integer columns with given value of the filtered values
    _inc: ContratoAlquiler_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ContratoAlquiler_set_input

    # filter the rows which have to be updated
    where: ContratoAlquiler_bool_exp!
  ): ContratoAlquiler_mutation_response

  # update single row of the table: "ContratoAlquiler"
  update_ContratoAlquiler_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: ContratoAlquiler_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ContratoAlquiler_set_input
    pk_columns: ContratoAlquiler_pk_columns_input!
  ): ContratoAlquiler

  # update data of the table: "EstadoActual"
  update_EstadoActual(
    # increments the integer columns with given value of the filtered values
    _inc: EstadoActual_inc_input

    # sets the columns of the filtered rows to the given values
    _set: EstadoActual_set_input

    # filter the rows which have to be updated
    where: EstadoActual_bool_exp!
  ): EstadoActual_mutation_response

  # update single row of the table: "EstadoActual"
  update_EstadoActual_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: EstadoActual_inc_input

    # sets the columns of the filtered rows to the given values
    _set: EstadoActual_set_input
    pk_columns: EstadoActual_pk_columns_input!
  ): EstadoActual
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "Cliente"
  Cliente(
    # distinct select on columns
    distinct_on: [Cliente_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [Cliente_order_by!]

    # filter the rows returned
    where: Cliente_bool_exp
  ): [Cliente!]!

  # fetch aggregated fields from the table: "Cliente"
  Cliente_aggregate(
    # distinct select on columns
    distinct_on: [Cliente_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [Cliente_order_by!]

    # filter the rows returned
    where: Cliente_bool_exp
  ): Cliente_aggregate!

  # fetch data from the table: "Cliente" using primary key columns
  Cliente_by_pk(id: Int!): Cliente

  # fetch data from the table: "ContratoAlquiler"
  ContratoAlquiler(
    # distinct select on columns
    distinct_on: [ContratoAlquiler_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ContratoAlquiler_order_by!]

    # filter the rows returned
    where: ContratoAlquiler_bool_exp
  ): [ContratoAlquiler!]!

  # fetch aggregated fields from the table: "ContratoAlquiler"
  ContratoAlquiler_aggregate(
    # distinct select on columns
    distinct_on: [ContratoAlquiler_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ContratoAlquiler_order_by!]

    # filter the rows returned
    where: ContratoAlquiler_bool_exp
  ): ContratoAlquiler_aggregate!

  # fetch data from the table: "ContratoAlquiler" using primary key columns
  ContratoAlquiler_by_pk(id: Int!): ContratoAlquiler

  # fetch data from the table: "EstadoActual"
  EstadoActual(
    # distinct select on columns
    distinct_on: [EstadoActual_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [EstadoActual_order_by!]

    # filter the rows returned
    where: EstadoActual_bool_exp
  ): [EstadoActual!]!

  # fetch aggregated fields from the table: "EstadoActual"
  EstadoActual_aggregate(
    # distinct select on columns
    distinct_on: [EstadoActual_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [EstadoActual_order_by!]

    # filter the rows returned
    where: EstadoActual_bool_exp
  ): EstadoActual_aggregate!

  # fetch data from the table: "EstadoActual" using primary key columns
  EstadoActual_by_pk(id: Int!): EstadoActual
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "Cliente"
  Cliente(
    # distinct select on columns
    distinct_on: [Cliente_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [Cliente_order_by!]

    # filter the rows returned
    where: Cliente_bool_exp
  ): [Cliente!]!

  # fetch aggregated fields from the table: "Cliente"
  Cliente_aggregate(
    # distinct select on columns
    distinct_on: [Cliente_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [Cliente_order_by!]

    # filter the rows returned
    where: Cliente_bool_exp
  ): Cliente_aggregate!

  # fetch data from the table: "Cliente" using primary key columns
  Cliente_by_pk(id: Int!): Cliente

  # fetch data from the table: "ContratoAlquiler"
  ContratoAlquiler(
    # distinct select on columns
    distinct_on: [ContratoAlquiler_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ContratoAlquiler_order_by!]

    # filter the rows returned
    where: ContratoAlquiler_bool_exp
  ): [ContratoAlquiler!]!

  # fetch aggregated fields from the table: "ContratoAlquiler"
  ContratoAlquiler_aggregate(
    # distinct select on columns
    distinct_on: [ContratoAlquiler_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ContratoAlquiler_order_by!]

    # filter the rows returned
    where: ContratoAlquiler_bool_exp
  ): ContratoAlquiler_aggregate!

  # fetch data from the table: "ContratoAlquiler" using primary key columns
  ContratoAlquiler_by_pk(id: Int!): ContratoAlquiler

  # fetch data from the table: "EstadoActual"
  EstadoActual(
    # distinct select on columns
    distinct_on: [EstadoActual_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [EstadoActual_order_by!]

    # filter the rows returned
    where: EstadoActual_bool_exp
  ): [EstadoActual!]!

  # fetch aggregated fields from the table: "EstadoActual"
  EstadoActual_aggregate(
    # distinct select on columns
    distinct_on: [EstadoActual_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [EstadoActual_order_by!]

    # filter the rows returned
    where: EstadoActual_bool_exp
  ): EstadoActual_aggregate!

  # fetch data from the table: "EstadoActual" using primary key columns
  EstadoActual_by_pk(id: Int!): EstadoActual
}

