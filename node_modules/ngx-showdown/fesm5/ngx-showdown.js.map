{"version":3,"file":"ngx-showdown.js","sources":["ng://ngx-showdown/showdown-config.provider.ts","ng://ngx-showdown/showdown-converter.provider.ts","ng://ngx-showdown/showdown.component.ts","ng://ngx-showdown/source.directive.ts","ng://ngx-showdown/showdown.pipe.ts","ng://ngx-showdown/showdown.module.ts","ng://ngx-showdown/ngx-showdown.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\nexport interface ShowdownConfig extends Showdown.ConverterOptions {\n}\n\n/**\n * A config provider\n *\n * ### Example\n *\n * Set custom config provider.\n * ```typescript\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n * ```\n */\n@Injectable()\nexport class ShowdownConfig implements Showdown.ConverterOptions {\n\n  /**\n   * @see https://github.com/showdownjs/showdown/blob/master/README.md#flavors\n   */\n  flavor?: Showdown.Flavor;\n\n  constructor(options?: ShowdownConfig | Showdown.ConverterOptions) {\n    this.merge(options);\n  }\n\n  /**\n   * Merge options\n   *\n   * @param options - A options object to merge.\n   */\n  public merge?(options: ShowdownConfig | Showdown.ConverterOptions) {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let ConverterOptions: typeof ShowdownConfig;\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let BaseConverterOptions: typeof ShowdownConfig;\n","import { Injectable, Optional } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\n@Injectable()\nexport class ShowdownConverter extends Showdown.Converter {\n\n  constructor(@Optional() config?: ShowdownConfig) {\n    super(config && {extensions: config.extensions});\n    this.setFlavor((config && config.flavor) || 'vanilla');\n    this.setOptions(config);\n  }\n\n  /**\n   * Set options to the converter.\n   *\n   * @param options - A options object to set.\n   */\n  public setOptions(options: Showdown.ShowdownOptions): void {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this.setOption(key, options[key]);\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ConverterOptions} instead.\n */\nexport interface IConverterOptions extends Showdown.ConverterOptions {\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ShowdownOptions} instead.\n */\nexport interface IConverterOptionsChangeable extends Showdown.ShowdownOptions {\n}\n","import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n\n/**\n * @internal\n */\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n\n/**\n * The options keys for the dynamic properties set\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS: string[] = Object.keys(Showdown.getDefaultOptions());\n\n// For the options setter properties that dynamic definition (the code after the class)\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\n}\n\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: '<showdown [value]=\"text\" [options]=\"options\"></showdown>'\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * <showdown emoji=\"true\"  noHeaderId># Some text :+1:</showdown>\n * ```\n *\n * Set static markdown value.\n * ```html\n * <showdown value=\"___Some static value___\" underline></showdown>\n * ```\n *\n * Use as directive on anther element.\n * ```html\n * <div showdown=\"# Div Element\" headerLevelStart=\"2\"></div>\n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * <div>\n *    <showdown smartIndentationFix>\n *       # List:\n *       * a\n *            * A\n *       * b\n *    </showdown>\n * </div>\n * ```\n *\n * Set template reference variable.\n * ```html\n * <showdown #sd></showdown>\n * ```\n * Or\n * ```html\n * <div showdown #sd=\"showdown\"></div>\n * ```\n */\n@Component({\n  selector: 'showdown,[showdown]',\n  template: '<ng-content></ng-content>',\n  exportAs: 'showdown',\n  inputs: OPTIONS_PROPERTIES_KEYS\n})\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\n\n  /**\n   * The input markdown value.\n   *\n   * __Example :__\n   *\n   * Set some static markdown value.\n   * ```html\n   * <showdown value=\"**Some bold value**\"></showdown>\n   * ```\n   *\n   * Bind property with markdown value.\n   * ```html\n   * <textarea [(ngModel)]=\"text\"></textarea>\n   * <showdown [value]=\"text\"></showdown>\n   * ```\n   */\n  @Input() value: string;\n\n  /**\n   * Input alias to `value`.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <div [showdown]=\"# Some Header\"></div>\n   * ```\n   *\n   * Equivalent to\n   * ```html\n   * <showdown [value]=\"# Some Header\"></showdown>\n   * ```\n   */\n  @Input() set showdown(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * The showdown options of the converter.\n   *\n   * __Example :__\n   *\n   * Bind options\n   * ```typescript\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `<showdown [options]=\"options\"># Some Header<showdown>`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   * ```\n   * Or\n   * ```html\n   * <showdown [options]=\"{smartIndentationFix: true}\"> # Indentation Fix<showdown>\n   * ```\n   */\n  @Input()\n  get options(): Showdown.ShowdownOptions {\n    return this.getOptions();\n  }\n\n  set options(options: Showdown.ShowdownOptions) {\n    this.setOptions(options);\n  }\n\n  private _sanitize: boolean;\n\n  /**\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n   *\n   * __Example :__\n   *\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n   *     <h3>Input</h3>\n   *     <textarea class=\"box\" [(ngModel)]=\"text\"></textarea>\n   *     <input type=\"checkbox\" [(ngModel)]=\"sanitize\"/> <b>Sanitize</b>\n   *     <h3>Markdown</h3>\n   *     <pre class=\"box\"><code>{{ text }}</code></pre>\n   *     <h3>Preview</h3>\n   *     <div class=\"box\">\n   *       <showdown #sd [value]=\"text\" [sanitize]=\"sanitize\"></showdown>\n   *     </div>\n   *   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\n   * <a href=\"javascript:alert('Hello!')\">click me</a>`;\n   * }\n   * ```\n   */\n  @Input()\n  set sanitize(sanitize: boolean) {\n    this._sanitize = _toOption(sanitize);\n  }\n\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\n    super(config);\n  }\n\n  /**\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n   * @internal\n   */\n  ngOnInit(): void {\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n      this.render(this._elementRef.nativeElement.innerHTML);\n    }\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to render method after changes.\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.render();\n  }\n\n  /**\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <textarea #textarea (change)=\"showdown.render(textarea.value)\"/># Some Header</textarea>\n   * <showdown #showdown></showdown>\n   * ```\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n   */\n  public render(value?: string): void {\n    if (typeof value === 'string') {\n      this.value = value;\n    }\n\n    if (typeof this.value === 'string') {\n      let result = this.makeHtml(this.value);\n\n      if (this._sanitize) {\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n      }\n\n      this._elementRef.nativeElement.innerHTML = result;\n    }\n  }\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#smartIndentationFix} instead.\n   */\n  // tslint:disable-next-line:member-ordering\n  trimEachLine;\n\n  /**\n   * @ignore\n   * @deprecated from v5,  use {@link ShowdownComponent#render} method instead.\n   */\n  setValue?(value: string): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#render} method instead.\n   */\n  compile?(): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use `innerHTML` property of the element instead.\n   */\n  toHTML?(): string;\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `ShowdownDirective` to {@link ShowdownComponent}.\n */\nexport declare let ShowdownDirective: typeof ShowdownComponent;\n\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value: any): void {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Directive, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { ShowdownComponent } from './showdown.component';\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '<showdown [src]=\"url\" smartIndentationFix>**Loading...**</showdown>\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * <showdown src=\"README.md\" [options]=\"{noHeaderId: true}\"></showdown>\n * ```\n *\n * Set template reference variable\n * ```html\n * <showdown #source=\"source\" src=\"README.md\"></showdown>\n * ```\n *\n * Listening to `error` events.\n * ```html\n * <showdown #sd src=\"http://url.error\" (error)=\"sd.render('# '+$event.message)\"></showdown>\n * ```\n */\n@Directive({\n  selector: 'showdown[src],[showdown][src]',\n  exportAs: 'source'\n})\nexport class SourceDirective implements OnChanges {\n\n  /**\n   * The source url of the markdown content.\n   *\n   * __Example :__\n   *\n   * Set static url to `src` directive.\n   * ```html\n   * <showdown src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n   * ```\n   *\n   * Bind url to `src` directive.\n   * ```html\n   * <input type=\"text\" #url placeholder=\"url\" />\n   * <button (click)=\"src = url.value\">Load</button>\n   * <showdown [src]=\"src\">**Loading...**</showdown>\n   * ```\n   */\n  @Input() src: string;\n\n  /**\n   * On error occur.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <input type=\"text\" placeholder=\"url\" [(ngModel)]=\"url\"/>\n   * <showdown [src]=\"url\" (error)=\"sd.render('# Error\\n> '+$event.message)\">**Loading...**</showdown>\n   * ```\n   */\n  @Output() error: EventEmitter<HttpErrorResponse> = new EventEmitter();\n\n  constructor(private _showdownComponent: ShowdownComponent, private _http: HttpClient) {\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to `load` method on src init/changes\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.load();\n  }\n\n  /**\n   * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <input type=\"text\" #url value=\"source.src\" placeholder=\"Url\" />\n   * <button (click)=\"source.load(url.value)\">Load</button>\n   * <showdown #source=\"source\" src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n   * ```\n   * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n   */\n  public load(url?: string): void {\n    if (url) {\n      this.src = url;\n    }\n\n    if (this.src) {\n      this\n        ._http\n        .get(this.src, {responseType: 'text'})\n        .subscribe((response: string) => {\n          this._showdownComponent.render(response);\n        }, (error: HttpErrorResponse) => {\n          this.error.emit(error);\n        });\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `SrcDirective` to {@link SourceDirective}.\n */\nexport declare let SrcDirective: typeof SourceDirective;\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * <input type=\"text\" placeholder=\"Name\" [(ngModel)]=\"name\"/>\n * <div [innerHTML]=\"'**Hello '+(name || 'nobody')+'!**' | showdown\">\n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: `<div innerHTML=\"{{ text | showdown: options }}\"></div>`\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\n@Pipe({\n  name: 'showdown',\n  pure: false\n})\nexport class ShowdownPipe extends ShowdownConverter implements PipeTransform {\n\n  /**\n   * Transform markdown value to html.\n   *\n   * @param value - The markdown value to transform to html.\n   * @param options - A `Showdown` converter options.\n   * @returns Returns the transform result of `value` to html.\n   */\n  transform(value: string, options?: Showdown.ShowdownOptions): string {\n    this.setOptions(options);\n    return this.makeHtml(value);\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n  ShowdownComponent,\n  ShowdownPipe,\n  SourceDirective\n];\n\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  providers: [ShowdownConverter],\n  exports: DECLARATIONS\n})\nexport class ShowdownModule {\n\n  /**\n   * __Example :__\n   *\n   * Add `ShowdownModule` to app `imports` with config.\n   * ```typescript\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   * ```\n   * @param config - A root converter config for all converter instances.\n   */\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders<ShowdownModule> {\n    return {\n      ngModule: ShowdownModule,\n      providers: [{provide: ShowdownConfig, useValue: config}]\n    };\n  }\n\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["hasOwnProperty","tslib_1.__extends","tslib_1.__param","Showdown.Converter","Showdown.getDefaultOptions","tslib_1.__decorate","tslib_1.__values"],"mappings":"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"}