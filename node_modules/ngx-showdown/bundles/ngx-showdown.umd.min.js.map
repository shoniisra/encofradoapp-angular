{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-showdown/showdown-config.provider.ts","ng://ngx-showdown/showdown-converter.provider.ts","ng://ngx-showdown/showdown.component.ts","ng://ngx-showdown/source.directive.ts","ng://ngx-showdown/showdown.pipe.ts","ng://ngx-showdown/showdown.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","ShowdownConfig","options","merge","call","Injectable","ShowdownConverter","_super","config","_this","extensions","setFlavor","flavor","setOptions","tslib_1.__extends","setOption","tslib_1.__param","Optional","Showdown.Converter","MAP_OPTION","","true","false","_toOption","value","OPTIONS_PROPERTIES_KEYS","keys","Showdown.getDefaultOptions","ShowdownComponent","_elementRef","_domSanitizer","getOptions","sanitize","_sanitize","ngOnInit","undefined","nativeElement","innerHTML","trim","render","ngOnChanges","result","makeHtml","SecurityContext","HTML","tslib_1.__decorate","Input","Component","selector","template","exportAs","inputs","ElementRef","DomSanitizer","set","configurable","OPTIONS_PROPERTIES_KEYS_1","o","m","Symbol","iterator","next","done","tslib_1.__values","OPTIONS_PROPERTIES_KEYS_1_1","SourceDirective","_showdownComponent","_http","error","EventEmitter","load","url","src","get","responseType","subscribe","response","emit","Output","Directive","HttpClient","ShowdownPipe","transform","Pipe","name","pure","DECLARATIONS","ShowdownModule","forRoot","ngModule","ShowdownModule_1","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\nexport interface ShowdownConfig extends Showdown.ConverterOptions {\n}\n\n/**\n * A config provider\n *\n * ### Example\n *\n * Set custom config provider.\n * ```typescript\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n * ```\n */\n@Injectable()\nexport class ShowdownConfig implements Showdown.ConverterOptions {\n\n  /**\n   * @see https://github.com/showdownjs/showdown/blob/master/README.md#flavors\n   */\n  flavor?: Showdown.Flavor;\n\n  constructor(options?: ShowdownConfig | Showdown.ConverterOptions) {\n    this.merge(options);\n  }\n\n  /**\n   * Merge options\n   *\n   * @param options - A options object to merge.\n   */\n  public merge?(options: ShowdownConfig | Showdown.ConverterOptions) {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let ConverterOptions: typeof ShowdownConfig;\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let BaseConverterOptions: typeof ShowdownConfig;\n","import { Injectable, Optional } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\n@Injectable()\nexport class ShowdownConverter extends Showdown.Converter {\n\n  constructor(@Optional() config?: ShowdownConfig) {\n    super(config && {extensions: config.extensions});\n    this.setFlavor((config && config.flavor) || 'vanilla');\n    this.setOptions(config);\n  }\n\n  /**\n   * Set options to the converter.\n   *\n   * @param options - A options object to set.\n   */\n  public setOptions(options: Showdown.ShowdownOptions): void {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this.setOption(key, options[key]);\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ConverterOptions} instead.\n */\nexport interface IConverterOptions extends Showdown.ConverterOptions {\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ShowdownOptions} instead.\n */\nexport interface IConverterOptionsChangeable extends Showdown.ShowdownOptions {\n}\n","import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n\n/**\n * @internal\n */\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n\n/**\n * The options keys for the dynamic properties set\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS: string[] = Object.keys(Showdown.getDefaultOptions());\n\n// For the options setter properties that dynamic definition (the code after the class)\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\n}\n\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: '<showdown [value]=\"text\" [options]=\"options\"></showdown>'\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * <showdown emoji=\"true\"  noHeaderId># Some text :+1:</showdown>\n * ```\n *\n * Set static markdown value.\n * ```html\n * <showdown value=\"___Some static value___\" underline></showdown>\n * ```\n *\n * Use as directive on anther element.\n * ```html\n * <div showdown=\"# Div Element\" headerLevelStart=\"2\"></div>\n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * <div>\n *    <showdown smartIndentationFix>\n *       # List:\n *       * a\n *            * A\n *       * b\n *    </showdown>\n * </div>\n * ```\n *\n * Set template reference variable.\n * ```html\n * <showdown #sd></showdown>\n * ```\n * Or\n * ```html\n * <div showdown #sd=\"showdown\"></div>\n * ```\n */\n@Component({\n  selector: 'showdown,[showdown]',\n  template: '<ng-content></ng-content>',\n  exportAs: 'showdown',\n  inputs: OPTIONS_PROPERTIES_KEYS\n})\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\n\n  /**\n   * The input markdown value.\n   *\n   * __Example :__\n   *\n   * Set some static markdown value.\n   * ```html\n   * <showdown value=\"**Some bold value**\"></showdown>\n   * ```\n   *\n   * Bind property with markdown value.\n   * ```html\n   * <textarea [(ngModel)]=\"text\"></textarea>\n   * <showdown [value]=\"text\"></showdown>\n   * ```\n   */\n  @Input() value: string;\n\n  /**\n   * Input alias to `value`.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <div [showdown]=\"# Some Header\"></div>\n   * ```\n   *\n   * Equivalent to\n   * ```html\n   * <showdown [value]=\"# Some Header\"></showdown>\n   * ```\n   */\n  @Input() set showdown(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * The showdown options of the converter.\n   *\n   * __Example :__\n   *\n   * Bind options\n   * ```typescript\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `<showdown [options]=\"options\"># Some Header<showdown>`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   * ```\n   * Or\n   * ```html\n   * <showdown [options]=\"{smartIndentationFix: true}\"> # Indentation Fix<showdown>\n   * ```\n   */\n  @Input()\n  get options(): Showdown.ShowdownOptions {\n    return this.getOptions();\n  }\n\n  set options(options: Showdown.ShowdownOptions) {\n    this.setOptions(options);\n  }\n\n  private _sanitize: boolean;\n\n  /**\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n   *\n   * __Example :__\n   *\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n   *     <h3>Input</h3>\n   *     <textarea class=\"box\" [(ngModel)]=\"text\"></textarea>\n   *     <input type=\"checkbox\" [(ngModel)]=\"sanitize\"/> <b>Sanitize</b>\n   *     <h3>Markdown</h3>\n   *     <pre class=\"box\"><code>{{ text }}</code></pre>\n   *     <h3>Preview</h3>\n   *     <div class=\"box\">\n   *       <showdown #sd [value]=\"text\" [sanitize]=\"sanitize\"></showdown>\n   *     </div>\n   *   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\n   * <a href=\"javascript:alert('Hello!')\">click me</a>`;\n   * }\n   * ```\n   */\n  @Input()\n  set sanitize(sanitize: boolean) {\n    this._sanitize = _toOption(sanitize);\n  }\n\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\n    super(config);\n  }\n\n  /**\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n   * @internal\n   */\n  ngOnInit(): void {\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n      this.render(this._elementRef.nativeElement.innerHTML);\n    }\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to render method after changes.\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.render();\n  }\n\n  /**\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <textarea #textarea (change)=\"showdown.render(textarea.value)\"/># Some Header</textarea>\n   * <showdown #showdown></showdown>\n   * ```\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n   */\n  public render(value?: string): void {\n    if (typeof value === 'string') {\n      this.value = value;\n    }\n\n    if (typeof this.value === 'string') {\n      let result = this.makeHtml(this.value);\n\n      if (this._sanitize) {\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n      }\n\n      this._elementRef.nativeElement.innerHTML = result;\n    }\n  }\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#smartIndentationFix} instead.\n   */\n  // tslint:disable-next-line:member-ordering\n  trimEachLine;\n\n  /**\n   * @ignore\n   * @deprecated from v5,  use {@link ShowdownComponent#render} method instead.\n   */\n  setValue?(value: string): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#render} method instead.\n   */\n  compile?(): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use `innerHTML` property of the element instead.\n   */\n  toHTML?(): string;\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `ShowdownDirective` to {@link ShowdownComponent}.\n */\nexport declare let ShowdownDirective: typeof ShowdownComponent;\n\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value: any): void {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Directive, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { ShowdownComponent } from './showdown.component';\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '<showdown [src]=\"url\" smartIndentationFix>**Loading...**</showdown>\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * <showdown src=\"README.md\" [options]=\"{noHeaderId: true}\"></showdown>\n * ```\n *\n * Set template reference variable\n * ```html\n * <showdown #source=\"source\" src=\"README.md\"></showdown>\n * ```\n *\n * Listening to `error` events.\n * ```html\n * <showdown #sd src=\"http://url.error\" (error)=\"sd.render('# '+$event.message)\"></showdown>\n * ```\n */\n@Directive({\n  selector: 'showdown[src],[showdown][src]',\n  exportAs: 'source'\n})\nexport class SourceDirective implements OnChanges {\n\n  /**\n   * The source url of the markdown content.\n   *\n   * __Example :__\n   *\n   * Set static url to `src` directive.\n   * ```html\n   * <showdown src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n   * ```\n   *\n   * Bind url to `src` directive.\n   * ```html\n   * <input type=\"text\" #url placeholder=\"url\" />\n   * <button (click)=\"src = url.value\">Load</button>\n   * <showdown [src]=\"src\">**Loading...**</showdown>\n   * ```\n   */\n  @Input() src: string;\n\n  /**\n   * On error occur.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <input type=\"text\" placeholder=\"url\" [(ngModel)]=\"url\"/>\n   * <showdown [src]=\"url\" (error)=\"sd.render('# Error\\n> '+$event.message)\">**Loading...**</showdown>\n   * ```\n   */\n  @Output() error: EventEmitter<HttpErrorResponse> = new EventEmitter();\n\n  constructor(private _showdownComponent: ShowdownComponent, private _http: HttpClient) {\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to `load` method on src init/changes\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.load();\n  }\n\n  /**\n   * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <input type=\"text\" #url value=\"source.src\" placeholder=\"Url\" />\n   * <button (click)=\"source.load(url.value)\">Load</button>\n   * <showdown #source=\"source\" src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n   * ```\n   * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n   */\n  public load(url?: string): void {\n    if (url) {\n      this.src = url;\n    }\n\n    if (this.src) {\n      this\n        ._http\n        .get(this.src, {responseType: 'text'})\n        .subscribe((response: string) => {\n          this._showdownComponent.render(response);\n        }, (error: HttpErrorResponse) => {\n          this.error.emit(error);\n        });\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `SrcDirective` to {@link SourceDirective}.\n */\nexport declare let SrcDirective: typeof SourceDirective;\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * <input type=\"text\" placeholder=\"Name\" [(ngModel)]=\"name\"/>\n * <div [innerHTML]=\"'**Hello '+(name || 'nobody')+'!**' | showdown\">\n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: `<div innerHTML=\"{{ text | showdown: options }}\"></div>`\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\n@Pipe({\n  name: 'showdown',\n  pure: false\n})\nexport class ShowdownPipe extends ShowdownConverter implements PipeTransform {\n\n  /**\n   * Transform markdown value to html.\n   *\n   * @param value - The markdown value to transform to html.\n   * @param options - A `Showdown` converter options.\n   * @returns Returns the transform result of `value` to html.\n   */\n  transform(value: string, options?: Showdown.ShowdownOptions): string {\n    this.setOptions(options);\n    return this.makeHtml(value);\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n  ShowdownComponent,\n  ShowdownPipe,\n  SourceDirective\n];\n\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  providers: [ShowdownConverter],\n  exports: DECLARATIONS\n})\nexport class ShowdownModule {\n\n  /**\n   * __Example :__\n   *\n   * Add `ShowdownModule` to app `imports` with config.\n   * ```typescript\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   * ```\n   * @param config - A root converter config for all converter instances.\n   */\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders<ShowdownModule> {\n    return {\n      ngModule: ShowdownModule,\n      providers: [{provide: ShowdownConfig, useValue: config}]\n    };\n  }\n\n}\n"]}