(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('showdown'), require('@angular/platform-browser'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('ngx-showdown', ['exports', '@angular/core', 'showdown', '@angular/platform-browser', '@angular/common/http'], factory) :
    (global = global || self, factory(global['ngx-showdown'] = {}, global.ng.core, global.showdown, global.ng.platformBrowser, global.ng.common.http));
}(this, function (exports, core, showdown, platformBrowser, http) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @internal
     */
    var hasOwnProperty = {}.hasOwnProperty;
    /**
     * A config provider
     *
     * ### Example
     *
     * Set custom config provider.
     * ```typescript
     * import { NgModel } from '@angular/core';
     * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';
     *
     * export class MyShowdownConfig extends ShowdownConfig {
     *   emoji = true;
     *   underscore = false;
     *   flavor = 'github';
     * }
     *
     * @NgModel({
     *   imports: [ ShowdownModule ],
     *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]
     * })
     * export class AppModule {}
     * ```
     */
    var ShowdownConfig = /** @class */ (function () {
        function ShowdownConfig(options) {
            this.merge(options);
        }
        /**
         * Merge options
         *
         * @param options - A options object to merge.
         */
        ShowdownConfig.prototype.merge = function (options) {
            for (var key in options) {
                if (hasOwnProperty.call(options, key)) {
                    this[key] = options[key];
                }
            }
        };
        ShowdownConfig = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [Object])
        ], ShowdownConfig);
        return ShowdownConfig;
    }());

    /**
     * @internal
     */
    var hasOwnProperty$1 = {}.hasOwnProperty;
    /**
     * ### Example
     *
     * Setup as standalone
     * ```typescript
     * import { NgModule } from '@angular/core';
     * import { ShowdownConverter } from 'ngx-showdown';
     *
     * @NgModule({
     *   providers: [ ShowdownConverter ];
     * })
     * export class AppModule {}
     * ```
     *
     * Use the converter instance.
     * ```typescript
     * import { Injectable } from '@angular/core';
     * import { ShowdownConverter } from 'ngx-showdown';
     *
     * @Injectable()
     * export class SomeService {
     *   constructor(showdownConverter: ShowdownConverter) {
     *     let markdown: string = "**Some**";
     *     let html: string = showdownConverter.makeHtml(markdown);
     *     console.log(`some:\nmarkdown: ${markdown)\nhtml: ${html}\n`);
     *   }
     * }
     * ```
     */
    var ShowdownConverter = /** @class */ (function (_super) {
        __extends(ShowdownConverter, _super);
        function ShowdownConverter(config) {
            var _this = _super.call(this, config && { extensions: config.extensions }) || this;
            _this.setFlavor((config && config.flavor) || 'vanilla');
            _this.setOptions(config);
            return _this;
        }
        /**
         * Set options to the converter.
         *
         * @param options - A options object to set.
         */
        ShowdownConverter.prototype.setOptions = function (options) {
            for (var key in options) {
                if (hasOwnProperty$1.call(options, key)) {
                    this.setOption(key, options[key]);
                }
            }
        };
        ShowdownConverter = __decorate([
            core.Injectable(),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [ShowdownConfig])
        ], ShowdownConverter);
        return ShowdownConverter;
    }(showdown.Converter));

    var e_1, _a;
    /**
     * @internal
     */
    var MAP_OPTION = {
        '': true,
        true: true,
        false: false
    };
    /**
     * @internal
     */
    var _toOption = function (value) { return MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value; };
    var Éµ0 = _toOption;
    /**
     * The options keys for the dynamic properties set
     * @internal
     */
    var OPTIONS_PROPERTIES_KEYS = Object.keys(showdown.getDefaultOptions());
    /**
     * A angular component for render `Markdown` to `HTML`.
     *
     * ### Example
     *
     * Setup as standalone
     * ```typescript
     * import { NgModule } from '@angular/core';
     * import { ShowdownComponent } from 'ngx-showdown';
     *
     * @NgModule({
     *   declarations: [ ShowdownComponent ];
     * })
     * export class AppModule {}
     * ```
     *
     * Bind markdown value and options object
     * ```typescript
     * import { Component } from '@angular/core';
     * import * as Showdown from 'showdown';
     *
     * @Component({
     *   selector: 'some',
     *   template: '<showdown [value]="text" [options]="options"></showdown>'
     * })
     * export class SomeComponent {
     *   text: string = `
     *     # Some header
     *     ---
     *     **Some bold**
     *   `;
     *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };
     *   // ...
     * }
     * ```
     * Bind single option (it have properties for all showdown options).
     * ```html
     * <showdown emoji="true"  noHeaderId># Some text :+1:</showdown>
     * ```
     *
     * Set static markdown value.
     * ```html
     * <showdown value="___Some static value___" underline></showdown>
     * ```
     *
     * Use as directive on anther element.
     * ```html
     * <div showdown="# Div Element" headerLevelStart="2"></div>
     * ```
     *
     * Static markdown value in the element content.
     * ```html
     * <div>
     *    <showdown smartIndentationFix>
     *       # List:
     *       * a
     *            * A
     *       * b
     *    </showdown>
     * </div>
     * ```
     *
     * Set template reference variable.
     * ```html
     * <showdown #sd></showdown>
     * ```
     * Or
     * ```html
     * <div showdown #sd="showdown"></div>
     * ```
     */
    var ShowdownComponent = /** @class */ (function (_super) {
        __extends(ShowdownComponent, _super);
        function ShowdownComponent(_elementRef, _domSanitizer, config) {
            var _this = _super.call(this, config) || this;
            _this._elementRef = _elementRef;
            _this._domSanitizer = _domSanitizer;
            return _this;
        }
        Object.defineProperty(ShowdownComponent.prototype, "showdown", {
            /**
             * Input alias to `value`.
             *
             * __Example :__
             *
             * ```html
             * <div [showdown]="# Some Header"></div>
             * ```
             *
             * Equivalent to
             * ```html
             * <showdown [value]="# Some Header"></showdown>
             * ```
             */
            set: function (value) {
                this.value = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowdownComponent.prototype, "options", {
            /**
             * The showdown options of the converter.
             *
             * __Example :__
             *
             * Bind options
             * ```typescript
             * import { Component } from '@angular/core';
             * import * as Showdown from 'showdown';
             *
             * @Component({
             *   selector: `some`,
             *   template: `<showdown [options]="options"># Some Header<showdown>`
             * })
             * export class SomeComponent {
             *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};
             *   // ...
             * }
             * ```
             * Or
             * ```html
             * <showdown [options]="{smartIndentationFix: true}"> # Indentation Fix<showdown>
             * ```
             */
            get: function () {
                return this.getOptions();
            },
            set: function (options) {
                this.setOptions(options);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowdownComponent.prototype, "sanitize", {
            /**
             * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).
             *
             * __Example :__
             *
             * ```typescript
             * import { Component } from '@angular/core';
             *
             * @Component({
             *   selector: 'some',
             *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],
             *   template: `
             *     <h3>Input</h3>
             *     <textarea class="box" [(ngModel)]="text"></textarea>
             *     <input type="checkbox" [(ngModel)]="sanitize"/> <b>Sanitize</b>
             *     <h3>Markdown</h3>
             *     <pre class="box"><code>{{ text }}</code></pre>
             *     <h3>Preview</h3>
             *     <div class="box">
             *       <showdown #sd [value]="text" [sanitize]="sanitize"></showdown>
             *     </div>
             *   `;
             * })
             * export class SomeComponent {
             *    text: string = `# A cool link
             * <a href="javascript:alert('Hello!')">click me</a>`;
             * }
             * ```
             */
            set: function (sanitize) {
                this._sanitize = _toOption(sanitize);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.
         * @internal
         */
        ShowdownComponent.prototype.ngOnInit = function () {
            if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {
                this.render(this._elementRef.nativeElement.innerHTML);
            }
        };
        /**
         * A angular lifecycle method, Use to call to render method after changes.
         * @internal
         */
        ShowdownComponent.prototype.ngOnChanges = function () {
            this.render();
        };
        /**
         * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.
         *
         * __Example :__
         *
         * ```html
         * <textarea #textarea (change)="showdown.render(textarea.value)"/># Some Header</textarea>
         * <showdown #showdown></showdown>
         * ```
         * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)
         */
        ShowdownComponent.prototype.render = function (value) {
            if (typeof value === 'string') {
                this.value = value;
            }
            if (typeof this.value === 'string') {
                var result = this.makeHtml(this.value);
                if (this._sanitize) {
                    result = this._domSanitizer.sanitize(core.SecurityContext.HTML, result);
                }
                this._elementRef.nativeElement.innerHTML = result;
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], ShowdownComponent.prototype, "value", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], ShowdownComponent.prototype, "showdown", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], ShowdownComponent.prototype, "options", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], ShowdownComponent.prototype, "sanitize", null);
        ShowdownComponent = __decorate([
            core.Component({
                selector: 'showdown,[showdown]',
                template: '<ng-content></ng-content>',
                exportAs: 'showdown',
                inputs: OPTIONS_PROPERTIES_KEYS
            }),
            __param(1, core.Optional()), __param(2, core.Optional()),
            __metadata("design:paramtypes", [core.ElementRef, platformBrowser.DomSanitizer, ShowdownConfig])
        ], ShowdownComponent);
        return ShowdownComponent;
    }(ShowdownConverter));
    var _loop_1 = function (key) {
        Object.defineProperty(ShowdownComponent.prototype, key, {
            set: function (value) {
                this.setOption(key, _toOption(value));
            },
            configurable: true
        });
    };
    try {
        // Define options properties setter for angular directive and direct access
        for (var OPTIONS_PROPERTIES_KEYS_1 = __values(OPTIONS_PROPERTIES_KEYS), OPTIONS_PROPERTIES_KEYS_1_1 = OPTIONS_PROPERTIES_KEYS_1.next(); !OPTIONS_PROPERTIES_KEYS_1_1.done; OPTIONS_PROPERTIES_KEYS_1_1 = OPTIONS_PROPERTIES_KEYS_1.next()) {
            var key = OPTIONS_PROPERTIES_KEYS_1_1.value;
            _loop_1(key);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (OPTIONS_PROPERTIES_KEYS_1_1 && !OPTIONS_PROPERTIES_KEYS_1_1.done && (_a = OPTIONS_PROPERTIES_KEYS_1.return)) _a.call(OPTIONS_PROPERTIES_KEYS_1);
        }
        finally { if (e_1) throw e_1.error; }
    }

    /**
     * A angular directive to `ShowdownComponent` for make http request of markdown content.
     *
     * ### Example
     *
     * Setup as standalone
     * ```typescript
     * import { NgModule } from '@angular/core';
     * import { HttpClientModule } from '@angular/common/http';
     * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';
     *
     * @NgModule({
     *    declarations: [ ShowdownComponent, SourceDirective ],
     *    imports: [ HttpClientModule ]
     * })
     * export class AppModule {}
     * ```
     *
     * Bind url `src` directive
     * ```typescript
     * import { Component } from '@angular/core';
     *
     * @Component({
     *     selector: 'some',
     *     template: '<showdown [src]="url" smartIndentationFix>**Loading...**</showdown>
     * })
     * class SomeComponent {
     *     url: string = 'https://unpkg.com/ngx-showdown/README.md';
     *     // ...
     * }
     * ```
     *
     * Set static url
     * ```html
     * <showdown src="README.md" [options]="{noHeaderId: true}"></showdown>
     * ```
     *
     * Set template reference variable
     * ```html
     * <showdown #source="source" src="README.md"></showdown>
     * ```
     *
     * Listening to `error` events.
     * ```html
     * <showdown #sd src="http://url.error" (error)="sd.render('# '+$event.message)"></showdown>
     * ```
     */
    var SourceDirective = /** @class */ (function () {
        function SourceDirective(_showdownComponent, _http) {
            this._showdownComponent = _showdownComponent;
            this._http = _http;
            /**
             * On error occur.
             *
             * __Example :__
             *
             * ```html
             * <input type="text" placeholder="url" [(ngModel)]="url"/>
             * <showdown [src]="url" (error)="sd.render('# Error\n> '+$event.message)">**Loading...**</showdown>
             * ```
             */
            this.error = new core.EventEmitter();
        }
        /**
         * A angular lifecycle method, Use to call to `load` method on src init/changes
         * @internal
         */
        SourceDirective.prototype.ngOnChanges = function () {
            this.load();
        };
        /**
         * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.
         *
         * __Example :__
         *
         * ```html
         * <input type="text" #url value="source.src" placeholder="Url" />
         * <button (click)="source.load(url.value)">Load</button>
         * <showdown #source="source" src="https://unpkg.com/ngx-showdown/README.md"></showdown>
         * ```
         * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)
         */
        SourceDirective.prototype.load = function (url) {
            var _this = this;
            if (url) {
                this.src = url;
            }
            if (this.src) {
                this
                    ._http
                    .get(this.src, { responseType: 'text' })
                    .subscribe(function (response) {
                    _this._showdownComponent.render(response);
                }, function (error) {
                    _this.error.emit(error);
                });
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], SourceDirective.prototype, "src", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], SourceDirective.prototype, "error", void 0);
        SourceDirective = __decorate([
            core.Directive({
                selector: 'showdown[src],[showdown][src]',
                exportAs: 'source'
            }),
            __metadata("design:paramtypes", [ShowdownComponent, http.HttpClient])
        ], SourceDirective);
        return SourceDirective;
    }());

    /**
     * A angular pipe to transform `Markdown` to `HTML`.
     *
     * ### Example
     *
     * Setup as standalone
     * ```typescript
     * import { NgModule } from '@angular/core';
     * import { ShowdownPipe } from 'ngx-showdown';
     *
     * @NgModule({
     *   declarations: [ ShowdownPipe ];
     * })
     * export class AppModule {}
     * ```
     *
     * Transform markdown value to html.
     * ```html
     * <input type="text" placeholder="Name" [(ngModel)]="name"/>
     * <div [innerHTML]="'**Hello '+(name || 'nobody')+'!**' | showdown">
     * ```
     *
     * Transform markdown value to html with `options`.
     * ```typescript
     * import * as Showdown from 'showdown';
     *
     * @Component({
     *   selector: 'some',
     *   template: `<div innerHTML="{{ text | showdown: options }}"></div>`
     * })
     * export class SomeComponent {
     *   text: string = "__Some Underline__";
     *   options: Showdown.ShowdownOptions = { underline: true };
     *   // ...
     * }
     * ```
     */
    var ShowdownPipe = /** @class */ (function (_super) {
        __extends(ShowdownPipe, _super);
        function ShowdownPipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Transform markdown value to html.
         *
         * @param value - The markdown value to transform to html.
         * @param options - A `Showdown` converter options.
         * @returns Returns the transform result of `value` to html.
         */
        ShowdownPipe.prototype.transform = function (value, options) {
            this.setOptions(options);
            return this.makeHtml(value);
        };
        ShowdownPipe = __decorate([
            core.Pipe({
                name: 'showdown',
                pure: false
            })
        ], ShowdownPipe);
        return ShowdownPipe;
    }(ShowdownConverter));

    /**
     * @internal
     */
    var DECLARATIONS = [
        ShowdownComponent,
        ShowdownPipe,
        SourceDirective
    ];
    /**
     * ### Example
     *
     * Add `ShowdownModule` to app `imports`.
     * ```typescript
     * import { NgModule } from '@angular/core';
     * import { ShowdownModule } from 'ngx-showdown';
     *
     * @NgModule({
     *   imports: [ ShowdownModule ];
     * })
     * export class AppModule {}
     * ```
     */
    var ShowdownModule = /** @class */ (function () {
        function ShowdownModule() {
        }
        ShowdownModule_1 = ShowdownModule;
        /**
         * __Example :__
         *
         * Add `ShowdownModule` to app `imports` with config.
         * ```typescript
         * import { NgModule } from '@angular/core';
         * import { ShowdownModule } from 'ngx-showdown';
         *
         * @NgModule({
         *   imports: [ ShowdownModule.forRoot({
         *     smartIndentationFix: true,
         *     foo: 'bar',
         *     flavor: 'github',
         *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]
         *   }) ];
         * })
         * export class AppModule {}
         * ```
         * @param config - A root converter config for all converter instances.
         */
        ShowdownModule.forRoot = function (config) {
            return {
                ngModule: ShowdownModule_1,
                providers: [{ provide: ShowdownConfig, useValue: config }]
            };
        };
        var ShowdownModule_1;
        ShowdownModule = ShowdownModule_1 = __decorate([
            core.NgModule({
                declarations: DECLARATIONS,
                providers: [ShowdownConverter],
                exports: DECLARATIONS
            })
        ], ShowdownModule);
        return ShowdownModule;
    }());

    exports.ShowdownComponent = ShowdownComponent;
    exports.ShowdownConfig = ShowdownConfig;
    exports.ShowdownConverter = ShowdownConverter;
    exports.ShowdownModule = ShowdownModule;
    exports.ShowdownPipe = ShowdownPipe;
    exports.SourceDirective = SourceDirective;
    exports.Éµ0 = Éµ0;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-showdown.umd.js.map
