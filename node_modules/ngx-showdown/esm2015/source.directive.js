import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { ShowdownComponent } from './showdown.component';
/**
 * A angular directive to `ShowdownComponent` for make http request of markdown content.
 *
 * ### Example
 *
 * Setup as standalone
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { HttpClientModule } from '@angular/common/http';
 * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';
 *
 * @NgModule({
 *    declarations: [ ShowdownComponent, SourceDirective ],
 *    imports: [ HttpClientModule ]
 * })
 * export class AppModule {}
 * ```
 *
 * Bind url `src` directive
 * ```typescript
 * import { Component } from '@angular/core';
 *
 * @Component({
 *     selector: 'some',
 *     template: '<showdown [src]="url" smartIndentationFix>**Loading...**</showdown>
 * })
 * class SomeComponent {
 *     url: string = 'https://unpkg.com/ngx-showdown/README.md';
 *     // ...
 * }
 * ```
 *
 * Set static url
 * ```html
 * <showdown src="README.md" [options]="{noHeaderId: true}"></showdown>
 * ```
 *
 * Set template reference variable
 * ```html
 * <showdown #source="source" src="README.md"></showdown>
 * ```
 *
 * Listening to `error` events.
 * ```html
 * <showdown #sd src="http://url.error" (error)="sd.render('# '+$event.message)"></showdown>
 * ```
 */
let SourceDirective = class SourceDirective {
    constructor(_showdownComponent, _http) {
        this._showdownComponent = _showdownComponent;
        this._http = _http;
        /**
         * On error occur.
         *
         * __Example :__
         *
         * ```html
         * <input type="text" placeholder="url" [(ngModel)]="url"/>
         * <showdown [src]="url" (error)="sd.render('# Error\n> '+$event.message)">**Loading...**</showdown>
         * ```
         */
        this.error = new EventEmitter();
    }
    /**
     * A angular lifecycle method, Use to call to `load` method on src init/changes
     * @internal
     */
    ngOnChanges() {
        this.load();
    }
    /**
     * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.
     *
     * __Example :__
     *
     * ```html
     * <input type="text" #url value="source.src" placeholder="Url" />
     * <button (click)="source.load(url.value)">Load</button>
     * <showdown #source="source" src="https://unpkg.com/ngx-showdown/README.md"></showdown>
     * ```
     * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)
     */
    load(url) {
        if (url) {
            this.src = url;
        }
        if (this.src) {
            this
                ._http
                .get(this.src, { responseType: 'text' })
                .subscribe((response) => {
                this._showdownComponent.render(response);
            }, (error) => {
                this.error.emit(error);
            });
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SourceDirective.prototype, "src", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], SourceDirective.prototype, "error", void 0);
SourceDirective = tslib_1.__decorate([
    Directive({
        selector: 'showdown[src],[showdown][src]',
        exportAs: 'source'
    }),
    tslib_1.__metadata("design:paramtypes", [ShowdownComponent, HttpClient])
], SourceDirective);
export { SourceDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaG93ZG93bi8iLCJzb3VyY2VzIjpbInNvdXJjZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXFCLE1BQU0sc0JBQXNCLENBQUM7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQThDRztBQUtILElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFpQzFCLFlBQW9CLGtCQUFxQyxFQUFVLEtBQWlCO1FBQWhFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBWnBGOzs7Ozs7Ozs7V0FTRztRQUNPLFVBQUssR0FBb0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUd0RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsV0FBVztRQUNULElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7T0FXRztJQUNJLElBQUksQ0FBQyxHQUFZO1FBQ3RCLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7U0FDaEI7UUFFRCxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJO2lCQUNELEtBQUs7aUJBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBQyxZQUFZLEVBQUUsTUFBTSxFQUFDLENBQUM7aUJBQ3JDLFNBQVMsQ0FBQyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQyxDQUFDLEVBQUUsQ0FBQyxLQUF3QixFQUFFLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDO0NBRUYsQ0FBQTtBQXREVTtJQUFSLEtBQUssRUFBRTs7NENBQWE7QUFZWDtJQUFULE1BQU0sRUFBRTtzQ0FBUSxZQUFZOzhDQUF5QztBQS9CM0QsZUFBZTtJQUozQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsK0JBQStCO1FBQ3pDLFFBQVEsRUFBRSxRQUFRO0tBQ25CLENBQUM7NkNBa0N3QyxpQkFBaUIsRUFBaUIsVUFBVTtHQWpDekUsZUFBZSxDQXlFM0I7U0F6RVksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hvd2Rvd25Db21wb25lbnQgfSBmcm9tICcuL3Nob3dkb3duLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQSBhbmd1bGFyIGRpcmVjdGl2ZSB0byBgU2hvd2Rvd25Db21wb25lbnRgIGZvciBtYWtlIGh0dHAgcmVxdWVzdCBvZiBtYXJrZG93biBjb250ZW50LlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogU2V0dXAgYXMgc3RhbmRhbG9uZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG4gKiBpbXBvcnQgeyBTaG93ZG93bkNvbXBvbmVudCwgU291cmNlRGlyZWN0aXZlIH0gZnJvbSAnbmd4LXNob3dkb3duJztcbiAqXG4gKiBATmdNb2R1bGUoe1xuICogICAgZGVjbGFyYXRpb25zOiBbIFNob3dkb3duQ29tcG9uZW50LCBTb3VyY2VEaXJlY3RpdmUgXSxcbiAqICAgIGltcG9ydHM6IFsgSHR0cENsaWVudE1vZHVsZSBdXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7fVxuICogYGBgXG4gKlxuICogQmluZCB1cmwgYHNyY2AgZGlyZWN0aXZlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqXG4gKiBAQ29tcG9uZW50KHtcbiAqICAgICBzZWxlY3RvcjogJ3NvbWUnLFxuICogICAgIHRlbXBsYXRlOiAnPHNob3dkb3duIFtzcmNdPVwidXJsXCIgc21hcnRJbmRlbnRhdGlvbkZpeD4qKkxvYWRpbmcuLi4qKjwvc2hvd2Rvd24+XG4gKiB9KVxuICogY2xhc3MgU29tZUNvbXBvbmVudCB7XG4gKiAgICAgdXJsOiBzdHJpbmcgPSAnaHR0cHM6Ly91bnBrZy5jb20vbmd4LXNob3dkb3duL1JFQURNRS5tZCc7XG4gKiAgICAgLy8gLi4uXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBTZXQgc3RhdGljIHVybFxuICogYGBgaHRtbFxuICogPHNob3dkb3duIHNyYz1cIlJFQURNRS5tZFwiIFtvcHRpb25zXT1cIntub0hlYWRlcklkOiB0cnVlfVwiPjwvc2hvd2Rvd24+XG4gKiBgYGBcbiAqXG4gKiBTZXQgdGVtcGxhdGUgcmVmZXJlbmNlIHZhcmlhYmxlXG4gKiBgYGBodG1sXG4gKiA8c2hvd2Rvd24gI3NvdXJjZT1cInNvdXJjZVwiIHNyYz1cIlJFQURNRS5tZFwiPjwvc2hvd2Rvd24+XG4gKiBgYGBcbiAqXG4gKiBMaXN0ZW5pbmcgdG8gYGVycm9yYCBldmVudHMuXG4gKiBgYGBodG1sXG4gKiA8c2hvd2Rvd24gI3NkIHNyYz1cImh0dHA6Ly91cmwuZXJyb3JcIiAoZXJyb3IpPVwic2QucmVuZGVyKCcjICcrJGV2ZW50Lm1lc3NhZ2UpXCI+PC9zaG93ZG93bj5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdzaG93ZG93bltzcmNdLFtzaG93ZG93bl1bc3JjXScsXG4gIGV4cG9ydEFzOiAnc291cmNlJ1xufSlcbmV4cG9ydCBjbGFzcyBTb3VyY2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gIC8qKlxuICAgKiBUaGUgc291cmNlIHVybCBvZiB0aGUgbWFya2Rvd24gY29udGVudC5cbiAgICpcbiAgICogX19FeGFtcGxlIDpfX1xuICAgKlxuICAgKiBTZXQgc3RhdGljIHVybCB0byBgc3JjYCBkaXJlY3RpdmUuXG4gICAqIGBgYGh0bWxcbiAgICogPHNob3dkb3duIHNyYz1cImh0dHBzOi8vdW5wa2cuY29tL25neC1zaG93ZG93bi9SRUFETUUubWRcIj48L3Nob3dkb3duPlxuICAgKiBgYGBcbiAgICpcbiAgICogQmluZCB1cmwgdG8gYHNyY2AgZGlyZWN0aXZlLlxuICAgKiBgYGBodG1sXG4gICAqIDxpbnB1dCB0eXBlPVwidGV4dFwiICN1cmwgcGxhY2Vob2xkZXI9XCJ1cmxcIiAvPlxuICAgKiA8YnV0dG9uIChjbGljayk9XCJzcmMgPSB1cmwudmFsdWVcIj5Mb2FkPC9idXR0b24+XG4gICAqIDxzaG93ZG93biBbc3JjXT1cInNyY1wiPioqTG9hZGluZy4uLioqPC9zaG93ZG93bj5cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoKSBzcmM6IHN0cmluZztcblxuICAvKipcbiAgICogT24gZXJyb3Igb2NjdXIuXG4gICAqXG4gICAqIF9fRXhhbXBsZSA6X19cbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cInVybFwiIFsobmdNb2RlbCldPVwidXJsXCIvPlxuICAgKiA8c2hvd2Rvd24gW3NyY109XCJ1cmxcIiAoZXJyb3IpPVwic2QucmVuZGVyKCcjIEVycm9yXFxuPiAnKyRldmVudC5tZXNzYWdlKVwiPioqTG9hZGluZy4uLioqPC9zaG93ZG93bj5cbiAgICogYGBgXG4gICAqL1xuICBAT3V0cHV0KCkgZXJyb3I6IEV2ZW50RW1pdHRlcjxIdHRwRXJyb3JSZXNwb25zZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2hvd2Rvd25Db21wb25lbnQ6IFNob3dkb3duQ29tcG9uZW50LCBwcml2YXRlIF9odHRwOiBIdHRwQ2xpZW50KSB7XG4gIH1cblxuICAvKipcbiAgICogQSBhbmd1bGFyIGxpZmVjeWNsZSBtZXRob2QsIFVzZSB0byBjYWxsIHRvIGBsb2FkYCBtZXRob2Qgb24gc3JjIGluaXQvY2hhbmdlc1xuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgIHRoaXMubG9hZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgdGhlIG1hcmtkb3duIGNvbnRlbnQgb2Yge0BsaW5rIFNvdXJjZURpcmVjdGl2ZSNzcmN9IHVybCB0byB7QGxpbmsgU2hvd2Rvd25Db21wb25lbnQjdmFsdWV9LlxuICAgKlxuICAgKiBfX0V4YW1wbGUgOl9fXG4gICAqXG4gICAqIGBgYGh0bWxcbiAgICogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgI3VybCB2YWx1ZT1cInNvdXJjZS5zcmNcIiBwbGFjZWhvbGRlcj1cIlVybFwiIC8+XG4gICAqIDxidXR0b24gKGNsaWNrKT1cInNvdXJjZS5sb2FkKHVybC52YWx1ZSlcIj5Mb2FkPC9idXR0b24+XG4gICAqIDxzaG93ZG93biAjc291cmNlPVwic291cmNlXCIgc3JjPVwiaHR0cHM6Ly91bnBrZy5jb20vbmd4LXNob3dkb3duL1JFQURNRS5tZFwiPjwvc2hvd2Rvd24+XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gdXJsIC0gQSB1cmwgb2YgbWFya2Rvd24gY29udGVudCB0byBsb2FkIChpdCB3aWxsIG92ZXJyaWRlIHRoZSBjdXJyZW50IHVybCBvZiBgU291cmNlRGlyZWN0aXZlI3NyY2ApXG4gICAqL1xuICBwdWJsaWMgbG9hZCh1cmw/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAodXJsKSB7XG4gICAgICB0aGlzLnNyYyA9IHVybDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zcmMpIHtcbiAgICAgIHRoaXNcbiAgICAgICAgLl9odHRwXG4gICAgICAgIC5nZXQodGhpcy5zcmMsIHtyZXNwb25zZVR5cGU6ICd0ZXh0J30pXG4gICAgICAgIC5zdWJzY3JpYmUoKHJlc3BvbnNlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICB0aGlzLl9zaG93ZG93bkNvbXBvbmVudC5yZW5kZXIocmVzcG9uc2UpO1xuICAgICAgICB9LCAoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKiBAZGVwcmVjYXRlZCBmcm9tIHY1LCByZW5hbWVkIGBTcmNEaXJlY3RpdmVgIHRvIHtAbGluayBTb3VyY2VEaXJlY3RpdmV9LlxuICovXG5leHBvcnQgZGVjbGFyZSBsZXQgU3JjRGlyZWN0aXZlOiB0eXBlb2YgU291cmNlRGlyZWN0aXZlO1xuIl19