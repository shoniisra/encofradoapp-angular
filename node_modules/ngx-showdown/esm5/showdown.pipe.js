import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { ShowdownConverter } from './showdown-converter.provider';
/**
 * A angular pipe to transform `Markdown` to `HTML`.
 *
 * ### Example
 *
 * Setup as standalone
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { ShowdownPipe } from 'ngx-showdown';
 *
 * @NgModule({
 *   declarations: [ ShowdownPipe ];
 * })
 * export class AppModule {}
 * ```
 *
 * Transform markdown value to html.
 * ```html
 * <input type="text" placeholder="Name" [(ngModel)]="name"/>
 * <div [innerHTML]="'**Hello '+(name || 'nobody')+'!**' | showdown">
 * ```
 *
 * Transform markdown value to html with `options`.
 * ```typescript
 * import * as Showdown from 'showdown';
 *
 * @Component({
 *   selector: 'some',
 *   template: `<div innerHTML="{{ text | showdown: options }}"></div>`
 * })
 * export class SomeComponent {
 *   text: string = "__Some Underline__";
 *   options: Showdown.ShowdownOptions = { underline: true };
 *   // ...
 * }
 * ```
 */
var ShowdownPipe = /** @class */ (function (_super) {
    tslib_1.__extends(ShowdownPipe, _super);
    function ShowdownPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Transform markdown value to html.
     *
     * @param value - The markdown value to transform to html.
     * @param options - A `Showdown` converter options.
     * @returns Returns the transform result of `value` to html.
     */
    ShowdownPipe.prototype.transform = function (value, options) {
        this.setOptions(options);
        return this.makeHtml(value);
    };
    ShowdownPipe = tslib_1.__decorate([
        Pipe({
            name: 'showdown',
            pure: false
        })
    ], ShowdownPipe);
    return ShowdownPipe;
}(ShowdownConverter));
export { ShowdownPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvd2Rvd24ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaG93ZG93bi8iLCJzb3VyY2VzIjpbInNob3dkb3duLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRWxFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQ0c7QUFLSDtJQUFrQyx3Q0FBaUI7SUFBbkQ7O0lBY0EsQ0FBQztJQVpDOzs7Ozs7T0FNRztJQUNILGdDQUFTLEdBQVQsVUFBVSxLQUFhLEVBQUUsT0FBa0M7UUFDekQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQVpVLFlBQVk7UUFKeEIsSUFBSSxDQUFDO1lBQ0osSUFBSSxFQUFFLFVBQVU7WUFDaEIsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO09BQ1csWUFBWSxDQWN4QjtJQUFELG1CQUFDO0NBQUEsQUFkRCxDQUFrQyxpQkFBaUIsR0FjbEQ7U0FkWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgU2hvd2Rvd24gZnJvbSAnc2hvd2Rvd24nO1xuaW1wb3J0IHsgU2hvd2Rvd25Db252ZXJ0ZXIgfSBmcm9tICcuL3Nob3dkb3duLWNvbnZlcnRlci5wcm92aWRlcic7XG5cbi8qKlxuICogQSBhbmd1bGFyIHBpcGUgdG8gdHJhbnNmb3JtIGBNYXJrZG93bmAgdG8gYEhUTUxgLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogU2V0dXAgYXMgc3RhbmRhbG9uZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7IFNob3dkb3duUGlwZSB9IGZyb20gJ25neC1zaG93ZG93bic7XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgZGVjbGFyYXRpb25zOiBbIFNob3dkb3duUGlwZSBdO1xuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge31cbiAqIGBgYFxuICpcbiAqIFRyYW5zZm9ybSBtYXJrZG93biB2YWx1ZSB0byBodG1sLlxuICogYGBgaHRtbFxuICogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJOYW1lXCIgWyhuZ01vZGVsKV09XCJuYW1lXCIvPlxuICogPGRpdiBbaW5uZXJIVE1MXT1cIicqKkhlbGxvICcrKG5hbWUgfHwgJ25vYm9keScpKychKionIHwgc2hvd2Rvd25cIj5cbiAqIGBgYFxuICpcbiAqIFRyYW5zZm9ybSBtYXJrZG93biB2YWx1ZSB0byBodG1sIHdpdGggYG9wdGlvbnNgLlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0ICogYXMgU2hvd2Rvd24gZnJvbSAnc2hvd2Rvd24nO1xuICpcbiAqIEBDb21wb25lbnQoe1xuICogICBzZWxlY3RvcjogJ3NvbWUnLFxuICogICB0ZW1wbGF0ZTogYDxkaXYgaW5uZXJIVE1MPVwie3sgdGV4dCB8IHNob3dkb3duOiBvcHRpb25zIH19XCI+PC9kaXY+YFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBTb21lQ29tcG9uZW50IHtcbiAqICAgdGV4dDogc3RyaW5nID0gXCJfX1NvbWUgVW5kZXJsaW5lX19cIjtcbiAqICAgb3B0aW9uczogU2hvd2Rvd24uU2hvd2Rvd25PcHRpb25zID0geyB1bmRlcmxpbmU6IHRydWUgfTtcbiAqICAgLy8gLi4uXG4gKiB9XG4gKiBgYGBcbiAqL1xuQFBpcGUoe1xuICBuYW1lOiAnc2hvd2Rvd24nLFxuICBwdXJlOiBmYWxzZVxufSlcbmV4cG9ydCBjbGFzcyBTaG93ZG93blBpcGUgZXh0ZW5kcyBTaG93ZG93bkNvbnZlcnRlciBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gbWFya2Rvd24gdmFsdWUgdG8gaHRtbC5cbiAgICpcbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIG1hcmtkb3duIHZhbHVlIHRvIHRyYW5zZm9ybSB0byBodG1sLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEEgYFNob3dkb3duYCBjb252ZXJ0ZXIgb3B0aW9ucy5cbiAgICogQHJldHVybnMgUmV0dXJucyB0aGUgdHJhbnNmb3JtIHJlc3VsdCBvZiBgdmFsdWVgIHRvIGh0bWwuXG4gICAqL1xuICB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZywgb3B0aW9ucz86IFNob3dkb3duLlNob3dkb3duT3B0aW9ucyk6IHN0cmluZyB7XG4gICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLm1ha2VIdG1sKHZhbHVlKTtcbiAgfVxuXG59XG4iXX0=