{"version":3,"file":"ngx-loading-bar-core.js.map","sources":["ng://@ngx-loading-bar/core/loading-bar.service.ts","ng://@ngx-loading-bar/core/loading-bar.component.ts","ng://@ngx-loading-bar/core/core.module.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable({ providedIn: 'root' })\nexport class LoadingBarService implements OnDestroy {\n  readonly progress$ = (new Subject<number>()).pipe(debounceTime(0)) as Subject<number>;\n\n  private _pendingRequests = 0;\n  private _value = 0;\n  private _incTimeout: any;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  start(initialValue = 2) {\n    ++this._pendingRequests;\n    if (this._value === 0 || this._pendingRequests === 1) {\n      // Inserts the loading bar element into the dom, and sets it to 2%\n      this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);\n    }\n  }\n\n  stop() {\n    this.complete();\n    while (this._pendingRequests > 0) {\n      this.complete();\n    }\n  }\n\n  complete() {\n    if (this._pendingRequests === 0 && this._value === 0) {\n      return;\n    }\n\n    if (this._pendingRequests > 0) {\n      --this._pendingRequests;\n    }\n\n    if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {\n      if (this._value !== 100) {\n        this.set(100);\n      }\n\n      // Attempt to aggregate any start/complete calls within 500ms:\n      setTimeout(() => this.set(0), 500);\n    }\n  }\n\n  /**\n   * Set the loading bar's width to a certain percent.\n   *\n   * @param n any value between 0 and 100\n   */\n  set(n) {\n    if (!isPlatformBrowser(this.platformId)) {\n      this._pendingRequests = 0;\n      return;\n    }\n\n    if (n === 0 && this._pendingRequests > 0) {\n      n = 2;\n    }\n\n    this._value = n;\n    this.progress$.next(n);\n\n    if (this._pendingRequests === 0) {\n      return;\n    }\n\n    // increment loadingbar to give the illusion that there is always\n    // progress but make sure to cancel the previous timeouts so we don't\n    // have multiple incs running at the same time.\n    clearTimeout(this._incTimeout);\n    if (this._value > 0 && this._value < 100) {\n      this._incTimeout = setTimeout(() => this.increment(), 250);\n    }\n  }\n\n  /**\n   * Increments the loading bar by a random amount\n   * but slows down as it progresses\n   */\n  increment(rnd = 0) {\n    if (rnd > 0) {\n      this.set(this._value + rnd);\n    }\n\n    const stat = this._value;\n    if (stat >= 0 && stat < 25) {\n      // Start out between 3 - 6% increments\n      rnd = (Math.random() * (5 - 3 + 1) + 3);\n    } else if (stat >= 25 && stat < 65) {\n      // increment between 0 - 3%\n      rnd = (Math.random() * 3);\n    } else if (stat >= 65 && stat < 90) {\n      // increment between 0 - 2%\n      rnd = (Math.random() * 2);\n    } else if (stat >= 90 && stat < 99) {\n      // finally, increment it .5 %\n      rnd = 0.5;\n    } else {\n      // after 99%, don't increment:\n      rnd = 0;\n    }\n\n    this.set(this._value + rnd);\n  }\n\n  ngOnDestroy() {\n    this.progress$.complete();\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { LoadingBarService } from './loading-bar.service';\n\n@Component({\n  selector: 'ngx-loading-bar',\n  template: `\n    <ng-container *ngIf=\"(value !== null ? value : loader.progress$|async) as progress\">\n      <div id=\"loading-bar-spinner\" *ngIf=\"includeSpinner\" [style.color]=\"color\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"spinner-icon\"></div>\n      </div>\n      <div id=\"loading-bar\" *ngIf=\"includeBar\" [style.color]=\"color\">\n        <div class=\"bar\" [style.background]=\"color\" [style.height]=\"height\" [style.width]=\"progress + '%'\">\n          <div class=\"peg\" [style.height]=\"height\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n  preserveWhitespaces: false,\n  encapsulation: ViewEncapsulation.Emulated,\n  styleUrls: ['./loading-bar.component.scss'],\n  host: {\n    '[class.loading-bar-fixed]': 'fixed',\n  }\n})\nexport class LoadingBarComponent {\n  @Input() includeSpinner = true;\n  @Input() includeBar = true;\n  @Input() fixed = true;\n  @Input() color;\n  @Input() height;\n  @Input() diameter;\n  @Input() value = null;\n\n  constructor(public loader: LoadingBarService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoadingBarComponent } from './loading-bar.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingBarComponent],\n  exports: [LoadingBarComponent],\n})\nexport class LoadingBarModule {}\n"],"names":[],"mappings":"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"}
