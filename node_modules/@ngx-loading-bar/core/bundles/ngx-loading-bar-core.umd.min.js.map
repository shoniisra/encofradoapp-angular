{"version":3,"sources":["ng://@ngx-loading-bar/core/loading-bar.service.ts","ng://@ngx-loading-bar/core/loading-bar.component.ts","ng://@ngx-loading-bar/core/core.module.ts"],"names":["LoadingBarService","platformId","this","progress$","Subject","pipe","debounceTime","_pendingRequests","_value","prototype","start","initialValue","set","stop","complete","_this","setTimeout","n","isPlatformBrowser","next","clearTimeout","_incTimeout","increment","rnd","stat","Math","random","ngOnDestroy","Injectable","args","providedIn","Object","decorators","type","Inject","PLATFORM_ID","LoadingBarComponent","loader","includeSpinner","includeBar","fixed","value","Component","selector","template","preserveWhitespaces","encapsulation","ViewEncapsulation","Emulated","host","[class.loading-bar-fixed]","Input","LoadingBarModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"geAAA,IAAAA,EAAA,WAcE,SAAAA,EAAyCC,GAAAC,KAAAD,WAAAA,EANhCC,KAAAC,WAAY,IAAKC,EAAAA,SAAmBC,KAAKC,EAAAA,aAAa,IAEvDJ,KAAAK,iBAAmB,EACnBL,KAAAM,OAAS,SAKjBR,EAAAS,UAAAC,MAAA,SAAMC,QAAA,IAAAA,IAAAA,EAAA,KACFT,KAAKK,iBACa,IAAhBL,KAAKM,QAA0C,IAA1BN,KAAKK,kBAE5BL,KAAKU,IAA8B,IAA1BV,KAAKK,kBAAwC,EAAdL,KAAKM,OAAaN,KAAKM,OAASG,IAI5EX,EAAAS,UAAAI,KAAA,WAEE,IADAX,KAAKY,WAC0B,EAAxBZ,KAAKK,kBACVL,KAAKY,YAITd,EAAAS,UAAAK,SAAA,WAAA,IAAAC,EAAAb,KACgC,IAA1BA,KAAKK,kBAA0C,IAAhBL,KAAKM,SAIZ,EAAxBN,KAAKK,oBACLL,KAAKK,kBAGqB,IAA1BL,KAAKK,kBAAqD,IAA1BL,KAAKK,kBAAwC,EAAdL,KAAKM,UAClD,MAAhBN,KAAKM,QACPN,KAAKU,IAAI,KAIXI,WAAW,WAAM,OAAAD,EAAKH,IAAI,IAAI,QASlCZ,EAAAS,UAAAG,IAAA,SAAIK,GAAJ,IAAAF,EAAAb,KACOgB,EAAAA,kBAAkBhB,KAAKD,aAKlB,IAANgB,GAAmC,EAAxBf,KAAKK,mBAClBU,EAAI,GAGNf,KAAKM,OAASS,EACdf,KAAKC,UAAUgB,KAAKF,GAEU,IAA1Bf,KAAKK,mBAOTa,aAAalB,KAAKmB,aACA,EAAdnB,KAAKM,QAAcN,KAAKM,OAAS,MACnCN,KAAKmB,YAAcL,WAAW,WAAM,OAAAD,EAAKO,aAAa,QApBtDpB,KAAKK,iBAAmB,GA4B5BP,EAAAS,UAAAa,UAAA,SAAUC,QAAA,IAAAA,IAAAA,EAAA,GACE,EAANA,GACFrB,KAAKU,IAAIV,KAAKM,OAASe,OAGnBC,EAAOtB,KAAKM,OAGhBe,EAFU,GAARC,GAAaA,EAAO,GAEF,EAAbC,KAAKC,SAAyB,EACpB,IAARF,GAAcA,EAAO,GAEP,EAAhBC,KAAKC,SACK,IAARF,GAAcA,EAAO,GAEP,EAAhBC,KAAKC,SACK,IAARF,GAAcA,EAAO,GAExB,GAGA,EAGRtB,KAAKU,IAAIV,KAAKM,OAASe,IAGzBvB,EAAAS,UAAAkB,YAAA,WACEzB,KAAKC,UAAUW,gCA1GlBc,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAQ6BC,OAAMC,WAAA,CAAA,CAAAC,KAA9CC,EAAAA,OAAML,KAAA,CAACM,EAAAA,gJAdtB,GCAAC,EAAA,WAiCE,SAAAA,EAAmBC,GAAAnC,KAAAmC,OAAAA,EARVnC,KAAAoC,gBAAiB,EACjBpC,KAAAqC,YAAa,EACbrC,KAAAsC,OAAQ,EAIRtC,KAAAuC,MAAQ,KAGnB,2BA/BCC,EAAAA,UAASb,KAAA,CAAC,CACTc,SAAU,kBACVC,SAAU,mkBAYVC,qBAAqB,EACrBC,cAAeC,EAAAA,kBAAkBC,SAEjCC,KAAM,CACJC,4BAA6B,07CApBxBlD,6CAwBNmD,EAAAA,0BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,SAGHf,EAlCA,GCAAgB,EAAA,WAIA,SAAAA,KAK+B,2BAL9BC,EAAAA,SAAQxB,KAAA,CAAC,CACRyB,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACpB,GACfqB,QAAS,CAACrB,OAEmBgB,EAT/B","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable({ providedIn: 'root' })\nexport class LoadingBarService implements OnDestroy {\n  readonly progress$ = (new Subject<number>()).pipe(debounceTime(0)) as Subject<number>;\n\n  private _pendingRequests = 0;\n  private _value = 0;\n  private _incTimeout: any;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  start(initialValue = 2) {\n    ++this._pendingRequests;\n    if (this._value === 0 || this._pendingRequests === 1) {\n      // Inserts the loading bar element into the dom, and sets it to 2%\n      this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);\n    }\n  }\n\n  stop() {\n    this.complete();\n    while (this._pendingRequests > 0) {\n      this.complete();\n    }\n  }\n\n  complete() {\n    if (this._pendingRequests === 0 && this._value === 0) {\n      return;\n    }\n\n    if (this._pendingRequests > 0) {\n      --this._pendingRequests;\n    }\n\n    if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {\n      if (this._value !== 100) {\n        this.set(100);\n      }\n\n      // Attempt to aggregate any start/complete calls within 500ms:\n      setTimeout(() => this.set(0), 500);\n    }\n  }\n\n  /**\n   * Set the loading bar's width to a certain percent.\n   *\n   * @param n any value between 0 and 100\n   */\n  set(n) {\n    if (!isPlatformBrowser(this.platformId)) {\n      this._pendingRequests = 0;\n      return;\n    }\n\n    if (n === 0 && this._pendingRequests > 0) {\n      n = 2;\n    }\n\n    this._value = n;\n    this.progress$.next(n);\n\n    if (this._pendingRequests === 0) {\n      return;\n    }\n\n    // increment loadingbar to give the illusion that there is always\n    // progress but make sure to cancel the previous timeouts so we don't\n    // have multiple incs running at the same time.\n    clearTimeout(this._incTimeout);\n    if (this._value > 0 && this._value < 100) {\n      this._incTimeout = setTimeout(() => this.increment(), 250);\n    }\n  }\n\n  /**\n   * Increments the loading bar by a random amount\n   * but slows down as it progresses\n   */\n  increment(rnd = 0) {\n    if (rnd > 0) {\n      this.set(this._value + rnd);\n    }\n\n    const stat = this._value;\n    if (stat >= 0 && stat < 25) {\n      // Start out between 3 - 6% increments\n      rnd = (Math.random() * (5 - 3 + 1) + 3);\n    } else if (stat >= 25 && stat < 65) {\n      // increment between 0 - 3%\n      rnd = (Math.random() * 3);\n    } else if (stat >= 65 && stat < 90) {\n      // increment between 0 - 2%\n      rnd = (Math.random() * 2);\n    } else if (stat >= 90 && stat < 99) {\n      // finally, increment it .5 %\n      rnd = 0.5;\n    } else {\n      // after 99%, don't increment:\n      rnd = 0;\n    }\n\n    this.set(this._value + rnd);\n  }\n\n  ngOnDestroy() {\n    this.progress$.complete();\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { LoadingBarService } from './loading-bar.service';\n\n@Component({\n  selector: 'ngx-loading-bar',\n  template: `\n    <ng-container *ngIf=\"(value !== null ? value : loader.progress$|async) as progress\">\n      <div id=\"loading-bar-spinner\" *ngIf=\"includeSpinner\" [style.color]=\"color\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"spinner-icon\"></div>\n      </div>\n      <div id=\"loading-bar\" *ngIf=\"includeBar\" [style.color]=\"color\">\n        <div class=\"bar\" [style.background]=\"color\" [style.height]=\"height\" [style.width]=\"progress + '%'\">\n          <div class=\"peg\" [style.height]=\"height\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n  preserveWhitespaces: false,\n  encapsulation: ViewEncapsulation.Emulated,\n  styleUrls: ['./loading-bar.component.scss'],\n  host: {\n    '[class.loading-bar-fixed]': 'fixed',\n  }\n})\nexport class LoadingBarComponent {\n  @Input() includeSpinner = true;\n  @Input() includeBar = true;\n  @Input() fixed = true;\n  @Input() color;\n  @Input() height;\n  @Input() diameter;\n  @Input() value = null;\n\n  constructor(public loader: LoadingBarService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoadingBarComponent } from './loading-bar.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingBarComponent],\n  exports: [LoadingBarComponent],\n})\nexport class LoadingBarModule {}\n"]}