(function () {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };

  /**
   * Returns `true` if provided input is Element.
   * @name isElement
   * @param {*} [input]
   * @returns {boolean}
   */
  function isElement (input) {
    return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.nodeType === 1 && _typeof(input.style) === 'object' && _typeof(input.ownerDocument) === 'object';
  }

  function indexOfElement(elements, element) {
      for (var i = 0; i < elements.length; i++) {
          if (elements[i] === element) {
              return i;
          }
      }
      return -1;
  }

  function resolveElement(element) {
      if (typeof element === 'string') {
          try {
              return document.querySelector(element);
          } catch (e) {
              throw e;
          }
      }

      if (!isElement(element)) {
          throw new TypeError(element + ' is not a DOM element.');
      }
      return element;
  }

  function addElements(elements) {
      for (var _len = arguments.length, toAdd = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          toAdd[_key - 1] = arguments[_key];
      }

      return toAdd.map(resolveElement).forEach(function (e) {
          var index = indexOfElement(elements, e);

          if (index === -1) elements.push(e);
      });
  }

  function removeElements(elements) {
      for (var _len2 = arguments.length, toRemove = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          toRemove[_key2 - 1] = arguments[_key2];
      }

      return toRemove.map(resolveElement).reduce(function (last, e) {

          var index = indexOfElement(elements, e);

          if (index !== -1) return last.concat(elements.splice(index, 1));
          return last;
      }, []);
  }

  function createAdder(elements) {
      return function add() {
          try {
              for (var _len3 = arguments.length, toAdd = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  toAdd[_key3] = arguments[_key3];
              }

              addElements.apply(undefined, [elements].concat(toAdd));
          } catch (e) {
              throw e;
          }

          return this;
      };
  }

  function createRemover(elements) {
      return function remove() {
          try {
              for (var _len4 = arguments.length, toRemove = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                  toRemove[_key4] = arguments[_key4];
              }

              return removeElements.apply(undefined, [elements].concat(toRemove));
          } catch (e) {
              throw e;
          }
      };
  }

  var elements = [];
  var obj = {
      getElements: function getElements() {
          return elements;
      }
  };
  obj.add = createAdder(elements);
  obj.remove = createRemover(elements);
  console.log(obj.add(document.querySelector('.thing1')));
  console.log(obj.add(document.querySelector('.thing2')));

  console.log('elements ', elements);
  console.log('removed ', obj.remove('.thing1'));
  console.log('elements ', elements);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
