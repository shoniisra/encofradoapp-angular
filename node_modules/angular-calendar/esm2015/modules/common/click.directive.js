/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Renderer2, ElementRef, Output, EventEmitter, Inject, Input, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Observable, Subject } from 'rxjs';
import { requestIdleCallbackObservable } from './request-idle-callback';
import { switchMapTo, takeUntil } from 'rxjs/operators';
/** @type {?} */
const clickElements = new Set();
/** @type {?} */
const eventName = typeof window !== 'undefined' && typeof window['Hammer'] !== 'undefined'
    ? 'tap'
    : 'click';
export class ClickDirective {
    /**
     * @param {?} renderer
     * @param {?} elm
     * @param {?} document
     * @param {?} zone
     */
    constructor(renderer, elm, document, zone) {
        this.renderer = renderer;
        this.elm = elm;
        this.document = document;
        this.zone = zone;
        this.clickListenerDisabled = false;
        this.click = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.clickListenerDisabled) {
            this.renderer.setAttribute(this.elm.nativeElement, 'data-calendar-clickable', 'true');
            clickElements.add(this.elm.nativeElement);
            // issue #942 - lazily initialise all click handlers after initial render as hammerjs is slow
            requestIdleCallbackObservable()
                .pipe(switchMapTo(this.listen()), takeUntil(this.destroy$))
                .subscribe((/**
             * @param {?} event
             * @return {?}
             */
            event => {
                // prevent child click events from firing on parent elements that also have click events
                /** @type {?} */
                let nearestClickableParent = (/** @type {?} */ (event.target));
                while (!clickElements.has(nearestClickableParent) &&
                    nearestClickableParent !== this.document.body) {
                    nearestClickableParent = nearestClickableParent.parentElement;
                }
                /** @type {?} */
                const isThisClickableElement = this.elm.nativeElement === nearestClickableParent;
                if (isThisClickableElement) {
                    this.zone.run((/**
                     * @return {?}
                     */
                    () => {
                        this.click.next(event);
                    }));
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        clickElements.delete(this.elm.nativeElement);
    }
    /**
     * @private
     * @return {?}
     */
    listen() {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            return this.renderer.listen(this.elm.nativeElement, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            event => {
                observer.next(event);
            }));
        }));
    }
}
ClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mwlClick]'
            },] }
];
/** @nocollapse */
ClickDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone }
];
ClickDirective.propDecorators = {
    clickListenerDisabled: [{ type: Input }],
    click: [{ type: Output, args: ['mwlClick',] }]
};
if (false) {
    /** @type {?} */
    ClickDirective.prototype.clickListenerDisabled;
    /** @type {?} */
    ClickDirective.prototype.click;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.elm;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1jYWxlbmRhci8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvY29tbW9uL2NsaWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUdWLE1BQU0sRUFDTixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O01BRWxELGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBZTs7TUFFdEMsU0FBUyxHQUNiLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxXQUFXO0lBQ3RFLENBQUMsQ0FBQyxLQUFLO0lBQ1AsQ0FBQyxDQUFDLE9BQU87QUFLYixNQUFNLE9BQU8sY0FBYzs7Ozs7OztJQU96QixZQUNVLFFBQW1CLEVBQ25CLEdBQTRCLEVBQ1YsUUFBUSxFQUMxQixJQUFZO1FBSFosYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixRQUFHLEdBQUgsR0FBRyxDQUF5QjtRQUNWLGFBQVEsR0FBUixRQUFRLENBQUE7UUFDMUIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQVZiLDBCQUFxQixHQUFHLEtBQUssQ0FBQztRQUVuQixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWMsQ0FBQyxDQUFDLHNCQUFzQjs7UUFFMUUsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFPOUIsQ0FBQzs7OztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFDdEIseUJBQXlCLEVBQ3pCLE1BQU0sQ0FDUCxDQUFDO1lBQ0YsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRTFDLDZGQUE2RjtZQUM3Riw2QkFBNkIsRUFBRTtpQkFDNUIsSUFBSSxDQUNILFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFDMUIsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDekI7aUJBQ0EsU0FBUzs7OztZQUFDLEtBQUssQ0FBQyxFQUFFOzs7b0JBRWIsc0JBQXNCLEdBQUcsbUJBQUEsS0FBSyxDQUFDLE1BQU0sRUFBZTtnQkFDeEQsT0FDRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7b0JBQzFDLHNCQUFzQixLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUM3QztvQkFDQSxzQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQyxhQUFhLENBQUM7aUJBQy9EOztzQkFDSyxzQkFBc0IsR0FDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEtBQUssc0JBQXNCO2dCQUNuRCxJQUFJLHNCQUFzQixFQUFFO29CQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7OztvQkFBQyxHQUFHLEVBQUU7d0JBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN6QixDQUFDLEVBQUMsQ0FBQztpQkFDSjtZQUNILENBQUMsRUFBQyxDQUFDO1NBQ047SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7O0lBRU8sTUFBTTtRQUNaLE9BQU8sSUFBSSxVQUFVOzs7O1FBQWEsUUFBUSxDQUFDLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxTQUFTOzs7O1lBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkIsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQS9ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7YUFDdkI7Ozs7WUF4QkMsU0FBUztZQUNULFVBQVU7NENBa0NQLE1BQU0sU0FBQyxRQUFRO1lBM0JsQixNQUFNOzs7b0NBa0JMLEtBQUs7b0JBRUwsTUFBTSxTQUFDLFVBQVU7Ozs7SUFGbEIsK0NBQXVDOztJQUV2QywrQkFBMkQ7Ozs7O0lBRTNELGtDQUFpQzs7Ozs7SUFHL0Isa0NBQTJCOzs7OztJQUMzQiw2QkFBb0M7Ozs7O0lBQ3BDLGtDQUFrQzs7Ozs7SUFDbEMsOEJBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBSZW5kZXJlcjIsXG4gIEVsZW1lbnRSZWYsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgTmdab25lXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgcmVxdWVzdElkbGVDYWxsYmFja09ic2VydmFibGUgfSBmcm9tICcuL3JlcXVlc3QtaWRsZS1jYWxsYmFjayc7XG5pbXBvcnQgeyBzd2l0Y2hNYXBUbywgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBjbGlja0VsZW1lbnRzID0gbmV3IFNldDxIVE1MRWxlbWVudD4oKTtcblxuY29uc3QgZXZlbnROYW1lOiBzdHJpbmcgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93WydIYW1tZXInXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/ICd0YXAnXG4gICAgOiAnY2xpY2snO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbXdsQ2xpY2tdJ1xufSlcbmV4cG9ydCBjbGFzcyBDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgY2xpY2tMaXN0ZW5lckRpc2FibGVkID0gZmFsc2U7XG5cbiAgQE91dHB1dCgnbXdsQ2xpY2snKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxuXG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdCgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGVsbTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudCxcbiAgICBwcml2YXRlIHpvbmU6IE5nWm9uZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNsaWNrTGlzdGVuZXJEaXNhYmxlZCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoXG4gICAgICAgIHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdkYXRhLWNhbGVuZGFyLWNsaWNrYWJsZScsXG4gICAgICAgICd0cnVlJ1xuICAgICAgKTtcbiAgICAgIGNsaWNrRWxlbWVudHMuYWRkKHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAvLyBpc3N1ZSAjOTQyIC0gbGF6aWx5IGluaXRpYWxpc2UgYWxsIGNsaWNrIGhhbmRsZXJzIGFmdGVyIGluaXRpYWwgcmVuZGVyIGFzIGhhbW1lcmpzIGlzIHNsb3dcbiAgICAgIHJlcXVlc3RJZGxlQ2FsbGJhY2tPYnNlcnZhYmxlKClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgc3dpdGNoTWFwVG8odGhpcy5saXN0ZW4oKSksXG4gICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICAgICAgLy8gcHJldmVudCBjaGlsZCBjbGljayBldmVudHMgZnJvbSBmaXJpbmcgb24gcGFyZW50IGVsZW1lbnRzIHRoYXQgYWxzbyBoYXZlIGNsaWNrIGV2ZW50c1xuICAgICAgICAgIGxldCBuZWFyZXN0Q2xpY2thYmxlUGFyZW50ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgIHdoaWxlIChcbiAgICAgICAgICAgICFjbGlja0VsZW1lbnRzLmhhcyhuZWFyZXN0Q2xpY2thYmxlUGFyZW50KSAmJlxuICAgICAgICAgICAgbmVhcmVzdENsaWNrYWJsZVBhcmVudCAhPT0gdGhpcy5kb2N1bWVudC5ib2R5XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBuZWFyZXN0Q2xpY2thYmxlUGFyZW50ID0gbmVhcmVzdENsaWNrYWJsZVBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBpc1RoaXNDbGlja2FibGVFbGVtZW50ID1cbiAgICAgICAgICAgIHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQgPT09IG5lYXJlc3RDbGlja2FibGVQYXJlbnQ7XG4gICAgICAgICAgaWYgKGlzVGhpc0NsaWNrYWJsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmNsaWNrLm5leHQoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICBjbGlja0VsZW1lbnRzLmRlbGV0ZSh0aGlzLmVsbS5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgbGlzdGVuKCkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PihvYnNlcnZlciA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5lbG0ubmF0aXZlRWxlbWVudCwgZXZlbnROYW1lLCBldmVudCA9PiB7XG4gICAgICAgIG9ic2VydmVyLm5leHQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==