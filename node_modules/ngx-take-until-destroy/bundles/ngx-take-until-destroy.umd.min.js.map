{"version":3,"sources":["ng://ngx-take-until-destroy/src/take-until-destroy.ts"],"names":["isFunction","value","componentInstance","destroyMethodName","source","originalDestroy","Error","constructor","name","Subject","apply","this","arguments","next","complete","pipe","takeUntil"],"mappings":"mUAGA,SAAAA,EAAoBC,GAClB,MAAwB,mBAAVA,mBAGc,SAC5BC,EACAC,GACG,YADH,IAAAA,IAAAA,EAAA,eACG,SAAIC,GACP,IAAMC,EAAkBH,EAAkBC,GAC1C,IAAoC,IAAhCH,EAAWK,GACb,MAAM,IAAIC,MAENJ,EAAkBK,YAAYC,KAAI,kDACcL,GAYtD,OATKD,EAAsC,qBACzCA,EAAsC,mBAAI,IAAIO,EAAAA,QAE9CP,EAAkBC,GAAqB,WACrCH,EAAWK,IAAoBA,EAAgBK,MAAMC,KAAMC,WAC3DV,EAAsC,mBAAEW,MAAK,GAC7CX,EAAsC,mBAAEY,aAGrCV,EAAOW,KAAKC,EAAAA,UAAad,EAAsC","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nexport const untilDestroyed = (\n  componentInstance,\n  destroyMethodName = 'ngOnDestroy'\n) => <T>(source: Observable<T>) => {\n  const originalDestroy = componentInstance[destroyMethodName];\n  if (isFunction(originalDestroy) === false) {\n    throw new Error(\n      `${\n        componentInstance.constructor.name\n      } is using untilDestroyed but doesn't implement ${destroyMethodName}`\n    );\n  }\n  if (!componentInstance['__takeUntilDestroy']) {\n    componentInstance['__takeUntilDestroy'] = new Subject();\n\n    componentInstance[destroyMethodName] = function() {\n      isFunction(originalDestroy) && originalDestroy.apply(this, arguments);\n      componentInstance['__takeUntilDestroy'].next(true);\n      componentInstance['__takeUntilDestroy'].complete();\n    };\n  }\n  return source.pipe(takeUntil<T>(componentInstance['__takeUntilDestroy']));\n};\n"]}