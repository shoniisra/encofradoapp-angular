(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-take-until-destroy', ['exports', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ngx-take-until-destroy'] = {}),global.rxjs,global.rxjs.operators));
}(this, (function (exports,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function isFunction(value) {
        return typeof value === 'function';
    }
    /** @type {?} */
    var untilDestroyed = function (componentInstance, destroyMethodName) {
        if (destroyMethodName === void 0) {
            destroyMethodName = 'ngOnDestroy';
        }
        return function (source) {
            /** @type {?} */
            var originalDestroy = componentInstance[destroyMethodName];
            if (isFunction(originalDestroy) === false) {
                throw new Error(componentInstance.constructor.name + " is using untilDestroyed but doesn't implement " + destroyMethodName);
            }
            if (!componentInstance['__takeUntilDestroy']) {
                componentInstance['__takeUntilDestroy'] = new rxjs.Subject();
                componentInstance[destroyMethodName] = function () {
                    isFunction(originalDestroy) && originalDestroy.apply(this, arguments);
                    componentInstance['__takeUntilDestroy'].next(true);
                    componentInstance['__takeUntilDestroy'].complete();
                };
            }
            return source.pipe(operators.takeUntil(componentInstance['__takeUntilDestroy']));
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.untilDestroyed = untilDestroyed;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRha2UtdW50aWwtZGVzdHJveS51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC10YWtlLXVudGlsLWRlc3Ryb3kvc3JjL3Rha2UtdW50aWwtZGVzdHJveS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGNvbnN0IHVudGlsRGVzdHJveWVkID0gKFxuICBjb21wb25lbnRJbnN0YW5jZSxcbiAgZGVzdHJveU1ldGhvZE5hbWUgPSAnbmdPbkRlc3Ryb3knXG4pID0+IDxUPihzb3VyY2U6IE9ic2VydmFibGU8VD4pID0+IHtcbiAgY29uc3Qgb3JpZ2luYWxEZXN0cm95ID0gY29tcG9uZW50SW5zdGFuY2VbZGVzdHJveU1ldGhvZE5hbWVdO1xuICBpZiAoaXNGdW5jdGlvbihvcmlnaW5hbERlc3Ryb3kpID09PSBmYWxzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGAke1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICB9IGlzIHVzaW5nIHVudGlsRGVzdHJveWVkIGJ1dCBkb2Vzbid0IGltcGxlbWVudCAke2Rlc3Ryb3lNZXRob2ROYW1lfWBcbiAgICApO1xuICB9XG4gIGlmICghY29tcG9uZW50SW5zdGFuY2VbJ19fdGFrZVVudGlsRGVzdHJveSddKSB7XG4gICAgY29tcG9uZW50SW5zdGFuY2VbJ19fdGFrZVVudGlsRGVzdHJveSddID0gbmV3IFN1YmplY3QoKTtcblxuICAgIGNvbXBvbmVudEluc3RhbmNlW2Rlc3Ryb3lNZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaXNGdW5jdGlvbihvcmlnaW5hbERlc3Ryb3kpICYmIG9yaWdpbmFsRGVzdHJveS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgY29tcG9uZW50SW5zdGFuY2VbJ19fdGFrZVVudGlsRGVzdHJveSddLm5leHQodHJ1ZSk7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZVsnX190YWtlVW50aWxEZXN0cm95J10uY29tcGxldGUoKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBzb3VyY2UucGlwZSh0YWtlVW50aWw8VD4oY29tcG9uZW50SW5zdGFuY2VbJ19fdGFrZVVudGlsRGVzdHJveSddKSk7XG59O1xuIl0sIm5hbWVzIjpbIlN1YmplY3QiLCJ0YWtlVW50aWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7OztJQUdBLG9CQUFvQixLQUFLO1FBQ3ZCLE9BQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFDO0tBQ3BDOztBQUVELFFBQWEsY0FBYyxHQUFHLFVBQzVCLGlCQUFpQixFQUNqQixpQkFBaUM7UUFBakMsa0NBQUE7WUFBQSxpQ0FBaUM7O1FBQzlCLE9BQUEsVUFBSSxNQUFxQjs7WUFDNUIsSUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUM3RCxJQUFJLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQ3pDLE1BQU0sSUFBSSxLQUFLLENBRVgsaUJBQWlCLENBQUMsV0FBVyxDQUFDLElBQUksdURBQ2MsaUJBQW1CLENBQ3RFLENBQUM7YUFDSDtZQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO2dCQUM1QyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLElBQUlBLFlBQU8sRUFBRSxDQUFDO2dCQUV4RCxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHO29CQUNyQyxVQUFVLENBQUMsZUFBZSxDQUFDLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7b0JBQ3RFLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNuRCxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUNwRCxDQUFDO2FBQ0g7WUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUNDLG1CQUFTLENBQUksaUJBQWlCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0U7SUFuQkksQ0FtQko7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==