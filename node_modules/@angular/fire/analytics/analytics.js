var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Injectable, Inject, Optional, NgZone, InjectionToken, PLATFORM_ID } from '@angular/core';
import { of } from 'rxjs';
import { isPlatformBrowser } from '@angular/common';
import { map, tap, shareReplay, switchMap, observeOn } from 'rxjs/operators';
import { ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, _firebaseAppFactory, ɵAngularFireSchedulers } from '@angular/fire';
;
export var COLLECTION_ENABLED = new InjectionToken('angularfire2.analytics.analyticsCollectionEnabled');
export var APP_VERSION = new InjectionToken('angularfire2.analytics.appVersion');
export var APP_NAME = new InjectionToken('angularfire2.analytics.appName');
export var DEBUG_MODE = new InjectionToken('angularfire2.analytics.debugMode');
export var CONFIG = new InjectionToken('angularfire2.analytics.config');
var APP_NAME_KEY = 'app_name';
var APP_VERSION_KEY = 'app_version';
var DEBUG_MODE_KEY = 'debug_mode';
var ANALYTICS_ID_FIELD = 'measurementId';
var GTAG_CONFIG_COMMAND = 'config';
var GTAG_FUNCTION_NAME = 'gtag';
var DATA_LAYER_NAME = 'dataLayer';
;
var AngularFireAnalytics = (function () {
    function AngularFireAnalytics(options, nameOrConfig, analyticsCollectionEnabled, providedAppVersion, providedAppName, debugModeEnabled, providedConfig, platformId, zone) {
        var _this = this;
        var _a, _b, _c;
        this.options = options;
        var schedulers = new ɵAngularFireSchedulers(zone);
        if (isPlatformBrowser(platformId)) {
            window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || [];
            this.gtag = window[GTAG_FUNCTION_NAME] || function () { window[DATA_LAYER_NAME].push(arguments); };
            this.analyticsInitialized = zone.runOutsideAngular(function () {
                return new Promise(function (resolve) {
                    window[GTAG_FUNCTION_NAME] = function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        if (args[0] == 'js') {
                            resolve();
                        }
                        _this.gtag.apply(_this, args);
                    };
                });
            });
        }
        else {
            this.analyticsInitialized = Promise.resolve();
            this.gtag = function () { };
        }
        if (providedConfig) {
            this.updateConfig(providedConfig);
        }
        if (providedAppName) {
            this.updateConfig((_a = {}, _a[APP_NAME_KEY] = providedAppName, _a));
        }
        if (providedAppVersion) {
            this.updateConfig((_b = {}, _b[APP_VERSION_KEY] = providedAppVersion, _b));
        }
        if (debugModeEnabled) {
            this.updateConfig((_c = {}, _c[DEBUG_MODE_KEY] = 1, _c));
        }
        var analytics = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(function () { return import('firebase/analytics'); }), map(function () { return _firebaseAppFactory(options, zone, nameOrConfig); }), map(function (app) { return app.analytics(); }), tap(function (analytics) {
            if (analyticsCollectionEnabled === false) {
                analytics.setAnalyticsCollectionEnabled(false);
            }
        }), shareReplay({ bufferSize: 1, refCount: false }));
        return ɵlazySDKProxy(this, analytics, zone);
    }
    AngularFireAnalytics.prototype.updateConfig = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.analyticsInitialized];
                    case 1:
                        _a.sent();
                        this.gtag(GTAG_CONFIG_COMMAND, this.options[ANALYTICS_ID_FIELD], __assign({}, config, { update: true }));
                        return [2];
                }
            });
        });
    };
    ;
    AngularFireAnalytics = __decorate([
        Injectable(),
        __param(0, Inject(FIREBASE_OPTIONS)),
        __param(1, Optional()), __param(1, Inject(FIREBASE_APP_NAME)),
        __param(2, Optional()), __param(2, Inject(COLLECTION_ENABLED)),
        __param(3, Optional()), __param(3, Inject(APP_VERSION)),
        __param(4, Optional()), __param(4, Inject(APP_NAME)),
        __param(5, Optional()), __param(5, Inject(DEBUG_MODE)),
        __param(6, Optional()), __param(6, Inject(CONFIG)),
        __param(7, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object, Object, Object,
            NgZone])
    ], AngularFireAnalytics);
    return AngularFireAnalytics;
}());
export { AngularFireAnalytics };
//# sourceMappingURL=analytics.js.map