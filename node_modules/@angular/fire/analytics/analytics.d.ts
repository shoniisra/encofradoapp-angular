import { NgZone, InjectionToken } from '@angular/core';
import { FirebaseAppConfig, FirebaseOptions } from '@angular/fire';
import { analytics, app } from 'firebase';
export interface Config {
    [key: string]: any;
}
export declare const COLLECTION_ENABLED: InjectionToken<boolean>;
export declare const APP_VERSION: InjectionToken<string>;
export declare const APP_NAME: InjectionToken<string>;
export declare const DEBUG_MODE: InjectionToken<boolean>;
export declare const CONFIG: InjectionToken<Config>;
declare type AnalyticsProxy = {
    logEvent(eventName: string, eventParams?: {
        [key: string]: any;
    }, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setCurrentScreen(screenName: string, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setUserId(id: string, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setUserProperties(properties: analytics.CustomParams, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setAnalyticsCollectionEnabled(enabled: boolean): Promise<void>;
    app: Promise<app.App>;
};
export interface AngularFireAnalytics extends AnalyticsProxy {
}
export declare class AngularFireAnalytics {
    private options;
    private gtag;
    private analyticsInitialized;
    updateConfig(config: Config): Promise<void>;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, analyticsCollectionEnabled: boolean | null, providedAppVersion: string | null, providedAppName: string | null, debugModeEnabled: boolean | null, providedConfig: Config | null, platformId: Object, zone: NgZone);
}
export {};
