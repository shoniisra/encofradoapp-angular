var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Optional, NgZone, ComponentFactoryResolver, Inject, PLATFORM_ID, Injector, NgModuleFactory } from '@angular/core';
import { from, Observable, of } from 'rxjs';
import { filter, withLatestFrom, switchMap, map, tap, pairwise, startWith, groupBy, mergeMap, observeOn } from 'rxjs/operators';
import { Router, NavigationEnd, ActivationEnd, ROUTES } from '@angular/router';
import { ɵAngularFireSchedulers } from '@angular/fire';
import { AngularFireAnalytics, DEBUG_MODE } from './analytics';
import { Title } from '@angular/platform-browser';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
var FIREBASE_EVENT_ORIGIN_KEY = 'firebase_event_origin';
var FIREBASE_PREVIOUS_SCREEN_CLASS_KEY = 'firebase_previous_class';
var FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY = 'firebase_previous_id';
var FIREBASE_PREVIOUS_SCREEN_NAME_KEY = 'firebase_previous_screen';
var FIREBASE_SCREEN_CLASS_KEY = 'firebase_screen_class';
var FIREBASE_SCREEN_INSTANCE_ID_KEY = 'firebase_screen_id';
var FIREBASE_SCREEN_NAME_KEY = 'firebase_screen';
var OUTLET_KEY = 'outlet';
var PAGE_PATH_KEY = 'page_path';
var PAGE_TITLE_KEY = 'page_title';
var SCREEN_CLASS_KEY = 'screen_class';
var SCREEN_NAME_KEY = 'screen_name';
var SCREEN_VIEW_EVENT = 'screen_view';
var EVENT_ORIGIN_AUTO = 'auto';
var DEFAULT_SCREEN_CLASS = '???';
var NG_PRIMARY_OUTLET = 'primary';
var SCREEN_INSTANCE_DELIMITER = '#';
var ANNOTATIONS = '__annotations__';
var ScreenTrackingService = (function () {
    function ScreenTrackingService(analytics, router, title, componentFactoryResolver, platformId, debugModeEnabled, zone, injector) {
        var _this = this;
        if (!router || !isPlatformBrowser(platformId)) {
            return this;
        }
        zone.runOutsideAngular(function () {
            var activationEndEvents = router.events.pipe(filter(function (e) { return e instanceof ActivationEnd; }));
            var navigationEndEvents = router.events.pipe(filter(function (e) { return e instanceof NavigationEnd; }));
            _this.disposable = navigationEndEvents.pipe(withLatestFrom(activationEndEvents), switchMap(function (_a) {
                var _b, _c, _d, _e, _f;
                var navigationEnd = _a[0], activationEnd = _a[1];
                var page_path = navigationEnd.url;
                var screen_name = activationEnd.snapshot.routeConfig && activationEnd.snapshot.routeConfig.path || page_path;
                var params = (_b = {},
                    _b[SCREEN_NAME_KEY] = screen_name,
                    _b[PAGE_PATH_KEY] = page_path,
                    _b[FIREBASE_EVENT_ORIGIN_KEY] = EVENT_ORIGIN_AUTO,
                    _b[FIREBASE_SCREEN_NAME_KEY] = screen_name,
                    _b[OUTLET_KEY] = activationEnd.snapshot.outlet,
                    _b);
                if (title) {
                    params[PAGE_TITLE_KEY] = title.getTitle();
                }
                var component = activationEnd.snapshot.component;
                var routeConfig = activationEnd.snapshot.routeConfig;
                var loadChildren = routeConfig && routeConfig.loadChildren;
                if (typeof loadChildren === "string") {
                    return of(__assign({}, params, (_c = {}, _c[SCREEN_CLASS_KEY] = loadChildren.split('#')[1], _c)));
                }
                else if (typeof component === 'string') {
                    return of(__assign({}, params, (_d = {}, _d[SCREEN_CLASS_KEY] = component, _d)));
                }
                else if (component) {
                    var componentFactory = componentFactoryResolver.resolveComponentFactory(component);
                    return of(__assign({}, params, (_e = {}, _e[SCREEN_CLASS_KEY] = componentFactory.selector, _e)));
                }
                else if (loadChildren) {
                    var loadedChildren = loadChildren();
                    var loadedChildren$ = (loadedChildren instanceof Observable) ? loadedChildren : from(Promise.resolve(loadedChildren));
                    return loadedChildren$.pipe(map(function (lazyModule) {
                        var _a, _b, _c;
                        if (lazyModule instanceof NgModuleFactory) {
                            var moduleRef = lazyModule.create(injector);
                            var routes = moduleRef.injector.get(ROUTES);
                            var component_1 = routes[0][0].component;
                            try {
                                var componentFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(component_1);
                                return __assign({}, params, (_a = {}, _a[SCREEN_CLASS_KEY] = componentFactory.selector, _a));
                            }
                            catch (_) {
                                return __assign({}, params, (_b = {}, _b[SCREEN_CLASS_KEY] = DEFAULT_SCREEN_CLASS, _b));
                            }
                        }
                        else {
                            var declarations = [].concat.apply([], (lazyModule[ANNOTATIONS] || []).map(function (f) { return f.declarations; }));
                            var selectors = [].concat.apply([], declarations.map(function (c) { return (c[ANNOTATIONS] || []).map(function (f) { return f.selector; }); }));
                            return __assign({}, params, (_c = {}, _c[SCREEN_CLASS_KEY] = selectors[0] || DEFAULT_SCREEN_CLASS, _c));
                        }
                    }));
                }
                else {
                    return of(__assign({}, params, (_f = {}, _f[SCREEN_CLASS_KEY] = DEFAULT_SCREEN_CLASS, _f)));
                }
            }), map(function (params) {
                var _a;
                return (__assign((_a = {}, _a[FIREBASE_SCREEN_CLASS_KEY] = params[SCREEN_CLASS_KEY], _a[FIREBASE_SCREEN_INSTANCE_ID_KEY] = getScreenInstanceID(params), _a), params));
            }), tap(function (params) {
                var _a, _b;
                if (params[OUTLET_KEY] == NG_PRIMARY_OUTLET) {
                    analytics.setCurrentScreen(params[SCREEN_NAME_KEY]);
                    analytics.updateConfig((_a = {},
                        _a[PAGE_PATH_KEY] = params[PAGE_PATH_KEY],
                        _a[SCREEN_CLASS_KEY] = params[SCREEN_CLASS_KEY],
                        _a));
                    if (title) {
                        analytics.updateConfig((_b = {}, _b[PAGE_TITLE_KEY] = params[PAGE_TITLE_KEY], _b));
                    }
                }
            }), groupBy(function (params) { return params[OUTLET_KEY]; }), mergeMap(function (group) { return group.pipe(startWith(undefined), pairwise()); }), map(function (_a) {
                var _b;
                var prior = _a[0], current = _a[1];
                return prior ? __assign((_b = {}, _b[FIREBASE_PREVIOUS_SCREEN_CLASS_KEY] = prior[SCREEN_CLASS_KEY], _b[FIREBASE_PREVIOUS_SCREEN_NAME_KEY] = prior[SCREEN_NAME_KEY], _b[FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY] = prior[FIREBASE_SCREEN_INSTANCE_ID_KEY], _b), current) : current;
            }), tap(function (params) { return debugModeEnabled && console.info(SCREEN_VIEW_EVENT, params); }), tap(function (params) { return zone.runOutsideAngular(function () { return analytics.logEvent(SCREEN_VIEW_EVENT, params); }); })).subscribe();
        });
    }
    ScreenTrackingService.prototype.ngOnDestroy = function () {
        if (this.disposable) {
            this.disposable.unsubscribe();
        }
    };
    ScreenTrackingService = __decorate([
        Injectable(),
        __param(1, Optional()),
        __param(2, Optional()),
        __param(4, Inject(PLATFORM_ID)),
        __param(5, Optional()), __param(5, Inject(DEBUG_MODE)),
        __metadata("design:paramtypes", [AngularFireAnalytics,
            Router,
            Title,
            ComponentFactoryResolver,
            Object, Object, NgZone,
            Injector])
    ], ScreenTrackingService);
    return ScreenTrackingService;
}());
export { ScreenTrackingService };
var UserTrackingService = (function () {
    function UserTrackingService(analytics, zone, platformId) {
        var _this = this;
        var schedulers = new ɵAngularFireSchedulers(zone);
        if (!isPlatformServer(platformId)) {
            zone.runOutsideAngular(function () {
                _this.disposable = from(import('firebase/auth')).pipe(observeOn(schedulers.outsideAngular), switchMap(function () { return analytics.app; }), map(function (app) { return app.auth(); }), switchMap(function (auth) { return new Observable(auth.onAuthStateChanged.bind(auth)); }), switchMap(function (user) { return analytics.setUserId(user ? user.uid : null); })).subscribe();
            });
        }
    }
    UserTrackingService.prototype.ngOnDestroy = function () {
        if (this.disposable) {
            this.disposable.unsubscribe();
        }
    };
    UserTrackingService = __decorate([
        Injectable(),
        __param(2, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [AngularFireAnalytics,
            NgZone,
            Object])
    ], UserTrackingService);
    return UserTrackingService;
}());
export { UserTrackingService };
var nextScreenInstanceID = Math.floor(Math.random() * (Math.pow(2, 32) - 1)) - Math.pow(2, 31);
var knownScreenInstanceIDs = {};
var getScreenInstanceID = function (params) {
    var screenInstanceKey = [
        params[SCREEN_CLASS_KEY],
        params[OUTLET_KEY]
    ].join(SCREEN_INSTANCE_DELIMITER);
    if (knownScreenInstanceIDs.hasOwnProperty(screenInstanceKey)) {
        return knownScreenInstanceIDs[screenInstanceKey];
    }
    else {
        var ret = nextScreenInstanceID++;
        knownScreenInstanceIDs[screenInstanceKey] = ret;
        return ret;
    }
};
var ɵ0 = getScreenInstanceID;
export { ɵ0 };
//# sourceMappingURL=analytics.service.js.map