var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Optional, NgZone, ComponentFactoryResolver, Inject, PLATFORM_ID, Injector, NgModuleFactory } from '@angular/core';
import { from, Observable, of } from 'rxjs';
import { filter, withLatestFrom, switchMap, map, tap, pairwise, startWith, groupBy, mergeMap, observeOn } from 'rxjs/operators';
import { Router, NavigationEnd, ActivationEnd, ROUTES } from '@angular/router';
import { ɵAngularFireSchedulers } from '@angular/fire';
import { AngularFireAnalytics, DEBUG_MODE } from './analytics';
import { Title } from '@angular/platform-browser';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
const FIREBASE_EVENT_ORIGIN_KEY = 'firebase_event_origin';
const FIREBASE_PREVIOUS_SCREEN_CLASS_KEY = 'firebase_previous_class';
const FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY = 'firebase_previous_id';
const FIREBASE_PREVIOUS_SCREEN_NAME_KEY = 'firebase_previous_screen';
const FIREBASE_SCREEN_CLASS_KEY = 'firebase_screen_class';
const FIREBASE_SCREEN_INSTANCE_ID_KEY = 'firebase_screen_id';
const FIREBASE_SCREEN_NAME_KEY = 'firebase_screen';
const OUTLET_KEY = 'outlet';
const PAGE_PATH_KEY = 'page_path';
const PAGE_TITLE_KEY = 'page_title';
const SCREEN_CLASS_KEY = 'screen_class';
const SCREEN_NAME_KEY = 'screen_name';
const SCREEN_VIEW_EVENT = 'screen_view';
const EVENT_ORIGIN_AUTO = 'auto';
const DEFAULT_SCREEN_CLASS = '???';
const NG_PRIMARY_OUTLET = 'primary';
const SCREEN_INSTANCE_DELIMITER = '#';
const ANNOTATIONS = '__annotations__';
let ScreenTrackingService = class ScreenTrackingService {
    constructor(analytics, router, title, componentFactoryResolver, platformId, debugModeEnabled, zone, injector) {
        if (!router || !isPlatformBrowser(platformId)) {
            return this;
        }
        zone.runOutsideAngular(() => {
            const activationEndEvents = router.events.pipe(filter(e => e instanceof ActivationEnd));
            const navigationEndEvents = router.events.pipe(filter(e => e instanceof NavigationEnd));
            this.disposable = navigationEndEvents.pipe(withLatestFrom(activationEndEvents), switchMap(([navigationEnd, activationEnd]) => {
                const page_path = navigationEnd.url;
                const screen_name = activationEnd.snapshot.routeConfig && activationEnd.snapshot.routeConfig.path || page_path;
                const params = {
                    [SCREEN_NAME_KEY]: screen_name,
                    [PAGE_PATH_KEY]: page_path,
                    [FIREBASE_EVENT_ORIGIN_KEY]: EVENT_ORIGIN_AUTO,
                    [FIREBASE_SCREEN_NAME_KEY]: screen_name,
                    [OUTLET_KEY]: activationEnd.snapshot.outlet
                };
                if (title) {
                    params[PAGE_TITLE_KEY] = title.getTitle();
                }
                const component = activationEnd.snapshot.component;
                const routeConfig = activationEnd.snapshot.routeConfig;
                const loadChildren = routeConfig && routeConfig.loadChildren;
                if (typeof loadChildren === "string") {
                    return of(Object.assign({}, params, { [SCREEN_CLASS_KEY]: loadChildren.split('#')[1] }));
                }
                else if (typeof component === 'string') {
                    return of(Object.assign({}, params, { [SCREEN_CLASS_KEY]: component }));
                }
                else if (component) {
                    const componentFactory = componentFactoryResolver.resolveComponentFactory(component);
                    return of(Object.assign({}, params, { [SCREEN_CLASS_KEY]: componentFactory.selector }));
                }
                else if (loadChildren) {
                    const loadedChildren = loadChildren();
                    var loadedChildren$ = (loadedChildren instanceof Observable) ? loadedChildren : from(Promise.resolve(loadedChildren));
                    return loadedChildren$.pipe(map(lazyModule => {
                        if (lazyModule instanceof NgModuleFactory) {
                            const moduleRef = lazyModule.create(injector);
                            const routes = moduleRef.injector.get(ROUTES);
                            const component = routes[0][0].component;
                            try {
                                const componentFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(component);
                                return Object.assign({}, params, { [SCREEN_CLASS_KEY]: componentFactory.selector });
                            }
                            catch (_) {
                                return Object.assign({}, params, { [SCREEN_CLASS_KEY]: DEFAULT_SCREEN_CLASS });
                            }
                        }
                        else {
                            const declarations = [].concat.apply([], (lazyModule[ANNOTATIONS] || []).map((f) => f.declarations));
                            const selectors = [].concat.apply([], declarations.map((c) => (c[ANNOTATIONS] || []).map((f) => f.selector)));
                            return Object.assign({}, params, { [SCREEN_CLASS_KEY]: selectors[0] || DEFAULT_SCREEN_CLASS });
                        }
                    }));
                }
                else {
                    return of(Object.assign({}, params, { [SCREEN_CLASS_KEY]: DEFAULT_SCREEN_CLASS }));
                }
            }), map(params => (Object.assign({ [FIREBASE_SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY], [FIREBASE_SCREEN_INSTANCE_ID_KEY]: getScreenInstanceID(params) }, params))), tap(params => {
                if (params[OUTLET_KEY] == NG_PRIMARY_OUTLET) {
                    analytics.setCurrentScreen(params[SCREEN_NAME_KEY]);
                    analytics.updateConfig({
                        [PAGE_PATH_KEY]: params[PAGE_PATH_KEY],
                        [SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY]
                    });
                    if (title) {
                        analytics.updateConfig({ [PAGE_TITLE_KEY]: params[PAGE_TITLE_KEY] });
                    }
                }
            }), groupBy(params => params[OUTLET_KEY]), mergeMap(group => group.pipe(startWith(undefined), pairwise())), map(([prior, current]) => prior ? Object.assign({ [FIREBASE_PREVIOUS_SCREEN_CLASS_KEY]: prior[SCREEN_CLASS_KEY], [FIREBASE_PREVIOUS_SCREEN_NAME_KEY]: prior[SCREEN_NAME_KEY], [FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY]: prior[FIREBASE_SCREEN_INSTANCE_ID_KEY] }, current) : current), tap(params => debugModeEnabled && console.info(SCREEN_VIEW_EVENT, params)), tap(params => zone.runOutsideAngular(() => analytics.logEvent(SCREEN_VIEW_EVENT, params)))).subscribe();
        });
    }
    ngOnDestroy() {
        if (this.disposable) {
            this.disposable.unsubscribe();
        }
    }
};
ScreenTrackingService = __decorate([
    Injectable(),
    __param(1, Optional()),
    __param(2, Optional()),
    __param(4, Inject(PLATFORM_ID)),
    __param(5, Optional()), __param(5, Inject(DEBUG_MODE)),
    __metadata("design:paramtypes", [AngularFireAnalytics,
        Router,
        Title,
        ComponentFactoryResolver,
        Object, Object, NgZone,
        Injector])
], ScreenTrackingService);
export { ScreenTrackingService };
let UserTrackingService = class UserTrackingService {
    constructor(analytics, zone, platformId) {
        const schedulers = new ɵAngularFireSchedulers(zone);
        if (!isPlatformServer(platformId)) {
            zone.runOutsideAngular(() => {
                this.disposable = from(import('firebase/auth')).pipe(observeOn(schedulers.outsideAngular), switchMap(() => analytics.app), map(app => app.auth()), switchMap(auth => new Observable(auth.onAuthStateChanged.bind(auth))), switchMap(user => analytics.setUserId(user ? user.uid : null))).subscribe();
            });
        }
    }
    ngOnDestroy() {
        if (this.disposable) {
            this.disposable.unsubscribe();
        }
    }
};
UserTrackingService = __decorate([
    Injectable(),
    __param(2, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [AngularFireAnalytics,
        NgZone,
        Object])
], UserTrackingService);
export { UserTrackingService };
let nextScreenInstanceID = Math.floor(Math.random() * (Math.pow(2, 32) - 1)) - Math.pow(2, 31);
const knownScreenInstanceIDs = {};
const getScreenInstanceID = (params) => {
    const screenInstanceKey = [
        params[SCREEN_CLASS_KEY],
        params[OUTLET_KEY]
    ].join(SCREEN_INSTANCE_DELIMITER);
    if (knownScreenInstanceIDs.hasOwnProperty(screenInstanceKey)) {
        return knownScreenInstanceIDs[screenInstanceKey];
    }
    else {
        const ret = nextScreenInstanceID++;
        knownScreenInstanceIDs[screenInstanceKey] = ret;
        return ret;
    }
};
const ɵ0 = getScreenInstanceID;
export { ɵ0 };
//# sourceMappingURL=analytics.service.js.map