var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Injectable, Inject, Optional, NgZone, InjectionToken, PLATFORM_ID } from '@angular/core';
import { of } from 'rxjs';
import { isPlatformBrowser } from '@angular/common';
import { map, tap, shareReplay, switchMap, observeOn } from 'rxjs/operators';
import { ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, _firebaseAppFactory, ɵAngularFireSchedulers } from '@angular/fire';
;
export const COLLECTION_ENABLED = new InjectionToken('angularfire2.analytics.analyticsCollectionEnabled');
export const APP_VERSION = new InjectionToken('angularfire2.analytics.appVersion');
export const APP_NAME = new InjectionToken('angularfire2.analytics.appName');
export const DEBUG_MODE = new InjectionToken('angularfire2.analytics.debugMode');
export const CONFIG = new InjectionToken('angularfire2.analytics.config');
const APP_NAME_KEY = 'app_name';
const APP_VERSION_KEY = 'app_version';
const DEBUG_MODE_KEY = 'debug_mode';
const ANALYTICS_ID_FIELD = 'measurementId';
const GTAG_CONFIG_COMMAND = 'config';
const GTAG_FUNCTION_NAME = 'gtag';
const DATA_LAYER_NAME = 'dataLayer';
;
let AngularFireAnalytics = class AngularFireAnalytics {
    constructor(options, nameOrConfig, analyticsCollectionEnabled, providedAppVersion, providedAppName, debugModeEnabled, providedConfig, platformId, zone) {
        this.options = options;
        const schedulers = new ɵAngularFireSchedulers(zone);
        if (isPlatformBrowser(platformId)) {
            window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || [];
            this.gtag = window[GTAG_FUNCTION_NAME] || function () { window[DATA_LAYER_NAME].push(arguments); };
            this.analyticsInitialized = zone.runOutsideAngular(() => new Promise(resolve => {
                window[GTAG_FUNCTION_NAME] = (...args) => {
                    if (args[0] == 'js') {
                        resolve();
                    }
                    this.gtag(...args);
                };
            }));
        }
        else {
            this.analyticsInitialized = Promise.resolve();
            this.gtag = () => { };
        }
        if (providedConfig) {
            this.updateConfig(providedConfig);
        }
        if (providedAppName) {
            this.updateConfig({ [APP_NAME_KEY]: providedAppName });
        }
        if (providedAppVersion) {
            this.updateConfig({ [APP_VERSION_KEY]: providedAppVersion });
        }
        if (debugModeEnabled) {
            this.updateConfig({ [DEBUG_MODE_KEY]: 1 });
        }
        const analytics = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(() => import('firebase/analytics')), map(() => _firebaseAppFactory(options, zone, nameOrConfig)), map(app => app.analytics()), tap(analytics => {
            if (analyticsCollectionEnabled === false) {
                analytics.setAnalyticsCollectionEnabled(false);
            }
        }), shareReplay({ bufferSize: 1, refCount: false }));
        return ɵlazySDKProxy(this, analytics, zone);
    }
    updateConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.analyticsInitialized;
            this.gtag(GTAG_CONFIG_COMMAND, this.options[ANALYTICS_ID_FIELD], Object.assign({}, config, { update: true }));
        });
    }
    ;
};
AngularFireAnalytics = __decorate([
    Injectable(),
    __param(0, Inject(FIREBASE_OPTIONS)),
    __param(1, Optional()), __param(1, Inject(FIREBASE_APP_NAME)),
    __param(2, Optional()), __param(2, Inject(COLLECTION_ENABLED)),
    __param(3, Optional()), __param(3, Inject(APP_VERSION)),
    __param(4, Optional()), __param(4, Inject(APP_NAME)),
    __param(5, Optional()), __param(5, Inject(DEBUG_MODE)),
    __param(6, Optional()), __param(6, Inject(CONFIG)),
    __param(7, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object, Object, Object,
        NgZone])
], AngularFireAnalytics);
export { AngularFireAnalytics };
//# sourceMappingURL=analytics.js.map