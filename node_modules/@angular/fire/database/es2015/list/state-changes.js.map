{"version":3,"file":"state-changes.js","sourceRoot":"","sources":["../../../../../src/database/list/state-changes.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,mBAAmB,EAAE,MAAM,SAAS,CAAC;AAC9C,OAAO,EAA6B,KAAK,EAAE,MAAM,MAAM,CAAC;AAGxD,MAAM,UAAU,YAAY,CAAI,KAAoB,EAAE,MAAqB,EAAE,SAAyB;IACpG,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAE,CAAC;IACtC,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAI,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;IACnF,OAAO,KAAK,CAAC,GAAG,WAAW,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["import { DatabaseQuery, ChildEvent, AngularFireAction, SnapshotAction } from '../interfaces';\nimport { fromRef } from '../observable/fromRef';\nimport { validateEventsArray } from './utils';\nimport { SchedulerLike, Observable, merge } from 'rxjs';\nimport { DatabaseSnapshot } from '../interfaces';\n\nexport function stateChanges<T>(query: DatabaseQuery, events?: ChildEvent[], scheduler?: SchedulerLike) {\n  events = validateEventsArray(events)!;\n  const childEvent$ = events.map(event => fromRef<T>(query, event, 'on', scheduler));\n  return merge(...childEvent$);\n}\n"]}