{"version":3,"file":"fromRef.js","sourceRoot":"","sources":["../../../../../src/database/observable/fromRef.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAiC,cAAc,EAAE,MAAM,MAAM,CAAC;AACjF,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAY5C,MAAM,UAAU,OAAO,CAAI,GAAkB,EAAE,KAAkB,EAAE,UAAU,GAAG,IAAI,EAAE,YAA2B,cAAc;IAC7H,OAAO,IAAI,UAAU,CAAqB,UAAU,CAAC,EAAE;QACrD,IAAI,EAAE,GAAe,IAAI,CAAC;QAC1B,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE;YAChD,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;gBACtB,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YACH,IAAI,UAAU,IAAI,MAAM,EAAE;gBACxB,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;aACjD;QACH,CAAC,EAAE,GAAG,CAAC,EAAE;YACP,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAA;QACjD,CAAC,CAAC,CAAC;QAEH,IAAI,UAAU,IAAI,IAAI,EAAE;YACtB,OAAO;gBACL,WAAW;oBACT,IAAI,EAAE,IAAI,IAAI,EAAE;wBACd,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;qBACpB;gBACH,CAAC;aACF,CAAC;SACH;aAAM;YACL,OAAO,EAAE,WAAW,KAAK,CAAC,EAAE,CAAC;SAC9B;IACH,CAAC,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,OAAO,CAAC,EAAE;QACZ,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;QACtC,IAAI,GAAG,GAAkB,IAAI,CAAC;QAC9B,IAAI,QAAQ,CAAC,MAAM,EAAE,EAAE;YAAE,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;SAAE;QAC9C,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;IAC1D,CAAC,CAAC,EACF,KAAK,EAAE,CACR,CAAC;AACJ,CAAC","sourcesContent":["import { DatabaseQuery, DatabaseSnapshot, ListenEvent, AngularFireAction } from '../interfaces';\nimport { Observable, SchedulerLike, queueScheduler, asyncScheduler } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\ninterface SnapshotPrevKey<T> {\n  snapshot: DatabaseSnapshot<T>;\n  prevKey: string | null | undefined;\n}\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n */\nexport function fromRef<T>(ref: DatabaseQuery, event: ListenEvent, listenType = 'on', scheduler: SchedulerLike = asyncScheduler): Observable<AngularFireAction<DatabaseSnapshot<T>>> {\n  return new Observable<SnapshotPrevKey<T>>(subscriber => {\n    let fn: any | null = null;\n    fn = ref[listenType](event, (snapshot, prevKey) => {\n      scheduler.schedule(() => {\n        subscriber.next({ snapshot, prevKey });\n      });\n      if (listenType == 'once') {\n        scheduler.schedule(() => subscriber.complete());\n      }\n    }, err => {\n      scheduler.schedule(() => subscriber.error(err))\n    });\n\n    if (listenType == 'on') {\n      return {\n        unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n      };\n    } else {\n      return { unsubscribe() { } };\n    }\n  }).pipe(\n    map(payload => {\n      const { snapshot, prevKey } = payload;\n      let key: string | null = null;\n      if (snapshot.exists()) { key = snapshot.key; }\n      return { type: event, payload: snapshot, prevKey, key };\n    }),\n    share()\n  );\n}\n"]}