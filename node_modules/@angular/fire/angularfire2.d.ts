import { InjectionToken, NgZone } from '@angular/core';
import { Observable, Subscription, SchedulerLike, SchedulerAction, Operator, Subscriber, TeardownLogic } from 'rxjs';
export declare const RealtimeDatabaseURL: InjectionToken<string>;
export declare const DATABASE_URL: InjectionToken<string>;
export declare class ɵZoneScheduler implements SchedulerLike {
    private zone;
    private delegate;
    constructor(zone: any, delegate?: any);
    now(): any;
    schedule(work: (this: SchedulerAction<any>, state?: any) => void, delay?: number, state?: any): Subscription;
}
export declare class ɵBlockUntilFirstOperator<T> implements Operator<T, T> {
    private zone;
    private task;
    constructor(zone: any);
    call(subscriber: Subscriber<T>, source: Observable<T>): TeardownLogic;
    private unscheduleTask;
}
export declare class ɵAngularFireSchedulers {
    ngZone: NgZone;
    readonly outsideAngular: ɵZoneScheduler;
    readonly insideAngular: ɵZoneScheduler;
    constructor(ngZone: NgZone);
}
export declare function ɵkeepUnstableUntilFirstFactory(schedulers: ɵAngularFireSchedulers, platformId: Object): <T>(obs$: Observable<T>) => Observable<T>;
export declare const runOutsideAngular: (zone: NgZone) => <T>(obs$: Observable<T>) => Observable<T>;
export declare const runInZone: (zone: NgZone) => <T>(obs$: Observable<T>) => Observable<T>;
export declare class FirebaseZoneScheduler {
    zone: NgZone;
    private platformId;
    constructor(zone: NgZone, platformId: Object);
    schedule(...args: any[]): Subscription;
    keepUnstableUntilFirst<T>(obs$: Observable<T>): Observable<T>;
    runOutsideAngular<T>(obs$: Observable<T>): Observable<T>;
}
export declare const ɵlazySDKProxy: (klass: any, observable: Observable<any>, zone: NgZone) => any;
