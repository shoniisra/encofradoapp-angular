var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { Observable, from, of, throwError } from 'rxjs';
import { mergeMap, catchError, map, switchMap, concat, defaultIfEmpty, observeOn } from 'rxjs/operators';
import { ɵAngularFireSchedulers, _firebaseAppFactory, FIREBASE_APP_NAME, FIREBASE_OPTIONS } from '@angular/fire';
var AngularFireMessaging = (function () {
    function AngularFireMessaging(options, nameOrConfig, platformId, zone) {
        var _this = this;
        var schedulers = new ɵAngularFireSchedulers(zone);
        var requireMessaging = from(import('firebase/messaging'));
        this.messaging = requireMessaging.pipe(observeOn(schedulers.outsideAngular), map(function () { return _firebaseAppFactory(options, zone, nameOrConfig); }), map(function (app) { return app.messaging(); }));
        if (!isPlatformServer(platformId)) {
            this.requestPermission = this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(function (messaging) { return messaging.requestPermission(); }));
        }
        else {
            this.requestPermission = throwError('Not available on server platform.');
        }
        this.getToken = this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(function (messaging) { return messaging.getToken(); }), defaultIfEmpty(null));
        var tokenChanges = this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(function (messaging) { return new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(switchMap(function () { return messaging.getToken(); })); }));
        this.tokenChanges = this.getToken.pipe(concat(tokenChanges));
        this.messages = this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(function (messaging) { return new Observable(messaging.onMessage.bind(messaging)); }));
        this.requestToken = this.requestPermission.pipe(catchError(function () { return of(null); }), mergeMap(function () { return _this.tokenChanges; }));
        this.deleteToken = function (token) { return _this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(function (messaging) { return messaging.deleteToken(token); }), defaultIfEmpty(false)); };
    }
    AngularFireMessaging = __decorate([
        Injectable(),
        __param(0, Inject(FIREBASE_OPTIONS)),
        __param(1, Optional()), __param(1, Inject(FIREBASE_APP_NAME)),
        __param(2, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [Object, Object, Object,
            NgZone])
    ], AngularFireMessaging);
    return AngularFireMessaging;
}());
export { AngularFireMessaging };
//# sourceMappingURL=messaging.js.map