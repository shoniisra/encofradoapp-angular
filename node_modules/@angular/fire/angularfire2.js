import { InjectionToken } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { Observable, queueScheduler, asyncScheduler } from 'rxjs';
import { subscribeOn, observeOn, tap } from 'rxjs/operators';
export var RealtimeDatabaseURL = new InjectionToken('angularfire2.realtimeDatabaseURL');
export var DATABASE_URL = RealtimeDatabaseURL;
function noop() { }
var ɵZoneScheduler = (function () {
    function ɵZoneScheduler(zone, delegate) {
        if (delegate === void 0) { delegate = queueScheduler; }
        this.zone = zone;
        this.delegate = delegate;
    }
    ɵZoneScheduler.prototype.now = function () {
        return this.delegate.now();
    };
    ɵZoneScheduler.prototype.schedule = function (work, delay, state) {
        var targetZone = this.zone;
        var workInZone = function (state) {
            var _this = this;
            targetZone.runGuarded(function () {
                work.apply(_this, [state]);
            });
        };
        return this.delegate.schedule(workInZone, delay, state);
    };
    return ɵZoneScheduler;
}());
export { ɵZoneScheduler };
var ɵBlockUntilFirstOperator = (function () {
    function ɵBlockUntilFirstOperator(zone) {
        this.zone = zone;
        this.task = null;
    }
    ɵBlockUntilFirstOperator.prototype.call = function (subscriber, source) {
        var unscheduleTask = this.unscheduleTask.bind(this);
        this.task = this.zone.run(function () { return Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop); });
        return source.pipe(tap(unscheduleTask, unscheduleTask, unscheduleTask)).subscribe(subscriber).add(unscheduleTask);
    };
    ɵBlockUntilFirstOperator.prototype.unscheduleTask = function () {
        if (this.task != null && this.task.state === 'scheduled') {
            this.task.invoke();
            this.task = null;
        }
    };
    return ɵBlockUntilFirstOperator;
}());
export { ɵBlockUntilFirstOperator };
var ɵAngularFireSchedulers = (function () {
    function ɵAngularFireSchedulers(ngZone) {
        this.ngZone = ngZone;
        this.outsideAngular = ngZone.runOutsideAngular(function () { return new ɵZoneScheduler(Zone.current); });
        this.insideAngular = ngZone.run(function () { return new ɵZoneScheduler(Zone.current, asyncScheduler); });
    }
    return ɵAngularFireSchedulers;
}());
export { ɵAngularFireSchedulers };
export function ɵkeepUnstableUntilFirstFactory(schedulers, platformId) {
    return function keepUnstableUntilFirst(obs$) {
        if (isPlatformServer(platformId)) {
            obs$ = obs$.lift(new ɵBlockUntilFirstOperator(schedulers.ngZone));
        }
        return obs$.pipe(subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));
    };
}
export var runOutsideAngular = function (zone) { return function (obs$) {
    return new Observable(function (subscriber) {
        return zone.runOutsideAngular(function () {
            runInZone(zone)(obs$).subscribe(subscriber);
        });
    });
}; };
export var runInZone = function (zone) { return function (obs$) {
    return new Observable(function (subscriber) {
        return obs$.subscribe(function (value) { return zone.run(function () { return subscriber.next(value); }); }, function (error) { return zone.run(function () { return subscriber.error(error); }); }, function () { return zone.run(function () { return subscriber.complete(); }); });
    });
}; };
var FirebaseZoneScheduler = (function () {
    function FirebaseZoneScheduler(zone, platformId) {
        this.zone = zone;
        this.platformId = platformId;
    }
    FirebaseZoneScheduler.prototype.schedule = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.zone.runGuarded(function () { return queueScheduler.schedule.apply(queueScheduler, args); });
    };
    FirebaseZoneScheduler.prototype.keepUnstableUntilFirst = function (obs$) {
        if (isPlatformServer(this.platformId)) {
            return new Observable(function (subscriber) {
                var noop = function () { };
                var task = Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);
                obs$.subscribe(function (next) {
                    if (task.state === 'scheduled') {
                        task.invoke();
                    }
                    ;
                    subscriber.next(next);
                }, function (error) {
                    if (task.state === 'scheduled') {
                        task.invoke();
                    }
                    subscriber.error(error);
                }, function () {
                    if (task.state === 'scheduled') {
                        task.invoke();
                    }
                    subscriber.complete();
                });
            });
        }
        else {
            return obs$;
        }
    };
    FirebaseZoneScheduler.prototype.runOutsideAngular = function (obs$) {
        var _this = this;
        return new Observable(function (subscriber) {
            return _this.zone.runOutsideAngular(function () {
                return obs$.subscribe(function (value) { return _this.zone.run(function () { return subscriber.next(value); }); }, function (error) { return _this.zone.run(function () { return subscriber.error(error); }); }, function () { return _this.zone.run(function () { return subscriber.complete(); }); });
            });
        });
    };
    return FirebaseZoneScheduler;
}());
export { FirebaseZoneScheduler };
var noopFunctions = ['ngOnDestroy'];
export var ɵlazySDKProxy = function (klass, observable, zone) {
    return new Proxy(klass, {
        get: function (_, name) { return zone.runOutsideAngular(function () {
            if (klass[name]) {
                return klass[name];
            }
            if (noopFunctions.includes(name)) {
                return function () { };
            }
            var promise = observable.toPromise().then(function (mod) {
                var ret = mod && mod[name];
                if (typeof ret == 'function') {
                    return ret.bind(mod);
                }
                else if (ret && ret.then) {
                    return ret.then(function (res) { return zone.run(function () { return res; }); });
                }
                else {
                    return zone.run(function () { return ret; });
                }
            });
            return new Proxy(function () { return undefined; }, {
                get: function (_, name) { return promise[name]; },
                apply: function (self, _, args) { return promise.then(function (it) { return it && it.apply(void 0, args); }); }
            });
        }); }
    });
};
//# sourceMappingURL=angularfire2.js.map