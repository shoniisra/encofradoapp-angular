(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators', 'firebase/app'], factory) :
    (factory((global.angularfire2 = {}),global.ng.core,global.ng.common,global.rxjs,global.rxjs.operators,global.firebase));
}(this, (function (exports,core,common,rxjs,operators,firebase) { 'use strict';

    firebase = firebase && firebase.hasOwnProperty('default') ? firebase['default'] : firebase;

    var RealtimeDatabaseURL = new core.InjectionToken('angularfire2.realtimeDatabaseURL');
    var DATABASE_URL = RealtimeDatabaseURL;
    function noop() { }
    var ɵZoneScheduler = (function () {
        function ɵZoneScheduler(zone, delegate) {
            if (delegate === void 0) { delegate = rxjs.queueScheduler; }
            this.zone = zone;
            this.delegate = delegate;
        }
        ɵZoneScheduler.prototype.now = function () {
            return this.delegate.now();
        };
        ɵZoneScheduler.prototype.schedule = function (work, delay, state) {
            var targetZone = this.zone;
            var workInZone = function (state) {
                var _this = this;
                targetZone.runGuarded(function () {
                    work.apply(_this, [state]);
                });
            };
            return this.delegate.schedule(workInZone, delay, state);
        };
        return ɵZoneScheduler;
    }());
    var ɵBlockUntilFirstOperator = (function () {
        function ɵBlockUntilFirstOperator(zone) {
            this.zone = zone;
            this.task = null;
        }
        ɵBlockUntilFirstOperator.prototype.call = function (subscriber, source) {
            var unscheduleTask = this.unscheduleTask.bind(this);
            this.task = this.zone.run(function () { return Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop); });
            return source.pipe(operators.tap(unscheduleTask, unscheduleTask, unscheduleTask)).subscribe(subscriber).add(unscheduleTask);
        };
        ɵBlockUntilFirstOperator.prototype.unscheduleTask = function () {
            if (this.task != null && this.task.state === 'scheduled') {
                this.task.invoke();
                this.task = null;
            }
        };
        return ɵBlockUntilFirstOperator;
    }());
    var ɵAngularFireSchedulers = (function () {
        function ɵAngularFireSchedulers(ngZone) {
            this.ngZone = ngZone;
            this.outsideAngular = ngZone.runOutsideAngular(function () { return new ɵZoneScheduler(Zone.current); });
            this.insideAngular = ngZone.run(function () { return new ɵZoneScheduler(Zone.current, rxjs.asyncScheduler); });
        }
        return ɵAngularFireSchedulers;
    }());
    function ɵkeepUnstableUntilFirstFactory(schedulers, platformId) {
        return function keepUnstableUntilFirst(obs$) {
            if (common.isPlatformServer(platformId)) {
                obs$ = obs$.lift(new ɵBlockUntilFirstOperator(schedulers.ngZone));
            }
            return obs$.pipe(operators.subscribeOn(schedulers.outsideAngular), operators.observeOn(schedulers.insideAngular));
        };
    }
    var runOutsideAngular = function (zone) { return function (obs$) {
        return new rxjs.Observable(function (subscriber) {
            return zone.runOutsideAngular(function () {
                runInZone(zone)(obs$).subscribe(subscriber);
            });
        });
    }; };
    var runInZone = function (zone) { return function (obs$) {
        return new rxjs.Observable(function (subscriber) {
            return obs$.subscribe(function (value) { return zone.run(function () { return subscriber.next(value); }); }, function (error) { return zone.run(function () { return subscriber.error(error); }); }, function () { return zone.run(function () { return subscriber.complete(); }); });
        });
    }; };
    var FirebaseZoneScheduler = (function () {
        function FirebaseZoneScheduler(zone, platformId) {
            this.zone = zone;
            this.platformId = platformId;
        }
        FirebaseZoneScheduler.prototype.schedule = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.zone.runGuarded(function () { return rxjs.queueScheduler.schedule.apply(rxjs.queueScheduler, args); });
        };
        FirebaseZoneScheduler.prototype.keepUnstableUntilFirst = function (obs$) {
            if (common.isPlatformServer(this.platformId)) {
                return new rxjs.Observable(function (subscriber) {
                    var noop = function () { };
                    var task = Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);
                    obs$.subscribe(function (next) {
                        if (task.state === 'scheduled') {
                            task.invoke();
                        }
                        subscriber.next(next);
                    }, function (error) {
                        if (task.state === 'scheduled') {
                            task.invoke();
                        }
                        subscriber.error(error);
                    }, function () {
                        if (task.state === 'scheduled') {
                            task.invoke();
                        }
                        subscriber.complete();
                    });
                });
            }
            else {
                return obs$;
            }
        };
        FirebaseZoneScheduler.prototype.runOutsideAngular = function (obs$) {
            var _this = this;
            return new rxjs.Observable(function (subscriber) {
                return _this.zone.runOutsideAngular(function () {
                    return obs$.subscribe(function (value) { return _this.zone.run(function () { return subscriber.next(value); }); }, function (error) { return _this.zone.run(function () { return subscriber.error(error); }); }, function () { return _this.zone.run(function () { return subscriber.complete(); }); });
                });
            });
        };
        return FirebaseZoneScheduler;
    }());
    var noopFunctions = ['ngOnDestroy'];
    var ɵlazySDKProxy = function (klass, observable, zone) {
        return new Proxy(klass, {
            get: function (_, name) { return zone.runOutsideAngular(function () {
                if (klass[name]) {
                    return klass[name];
                }
                if (noopFunctions.includes(name)) {
                    return function () { };
                }
                var promise = observable.toPromise().then(function (mod) {
                    var ret = mod && mod[name];
                    if (typeof ret == 'function') {
                        return ret.bind(mod);
                    }
                    else if (ret && ret.then) {
                        return ret.then(function (res) { return zone.run(function () { return res; }); });
                    }
                    else {
                        return zone.run(function () { return ret; });
                    }
                });
                return new Proxy(function () { return undefined; }, {
                    get: function (_, name) { return promise[name]; },
                    apply: function (self, _, args) { return promise.then(function (it) { return it && it.apply(void 0, args); }); }
                });
            }); }
        });
    };

    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var FirebaseOptionsToken = new core.InjectionToken('angularfire2.app.options');
    var FirebaseNameOrConfigToken = new core.InjectionToken('angularfire2.app.nameOrConfig');
    var FIREBASE_OPTIONS = FirebaseOptionsToken;
    var FIREBASE_APP_NAME = FirebaseNameOrConfigToken;
    var FirebaseApp = (function () {
        function FirebaseApp() {
        }
        return FirebaseApp;
    }());
    var VERSION = new core.Version('5.4.2');
    function _firebaseAppFactory(options, zone, nameOrConfig) {
        var name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';
        var config = typeof nameOrConfig === 'object' && nameOrConfig || {};
        config.name = config.name || name;
        var existingApp = firebase.apps.filter(function (app) { return app && app.name === config.name; })[0];
        return (existingApp || zone.runOutsideAngular(function () { return firebase.initializeApp(options, config); }));
    }
    var FirebaseAppProvider = {
        provide: FirebaseApp,
        useFactory: _firebaseAppFactory,
        deps: [
            FIREBASE_OPTIONS,
            core.NgZone,
            [new core.Optional(), FIREBASE_APP_NAME]
        ]
    };
    var AngularFireModule = (function () {
        function AngularFireModule(platformId) {
            if (firebase.registerVersion) {
                firebase.registerVersion('angularfire', VERSION.full, platformId.toString());
                firebase.registerVersion('angular', core.VERSION.full);
            }
        }
        AngularFireModule_1 = AngularFireModule;
        AngularFireModule.initializeApp = function (options, nameOrConfig) {
            return {
                ngModule: AngularFireModule_1,
                providers: [
                    { provide: FIREBASE_OPTIONS, useValue: options },
                    { provide: FIREBASE_APP_NAME, useValue: nameOrConfig }
                ]
            };
        };
        var AngularFireModule_1;
        AngularFireModule = AngularFireModule_1 = __decorate([
            core.NgModule({
                providers: [FirebaseAppProvider],
            }),
            __param(0, core.Inject(core.PLATFORM_ID)),
            __metadata("design:paramtypes", [Object])
        ], AngularFireModule);
        return AngularFireModule;
    }());

    exports.RealtimeDatabaseURL = RealtimeDatabaseURL;
    exports.DATABASE_URL = DATABASE_URL;
    exports.ɵZoneScheduler = ɵZoneScheduler;
    exports.ɵBlockUntilFirstOperator = ɵBlockUntilFirstOperator;
    exports.ɵAngularFireSchedulers = ɵAngularFireSchedulers;
    exports.ɵkeepUnstableUntilFirstFactory = ɵkeepUnstableUntilFirstFactory;
    exports.runOutsideAngular = runOutsideAngular;
    exports.runInZone = runInZone;
    exports.FirebaseZoneScheduler = FirebaseZoneScheduler;
    exports.ɵlazySDKProxy = ɵlazySDKProxy;
    exports.FirebaseOptionsToken = FirebaseOptionsToken;
    exports.FirebaseNameOrConfigToken = FirebaseNameOrConfigToken;
    exports.FIREBASE_OPTIONS = FIREBASE_OPTIONS;
    exports.FIREBASE_APP_NAME = FIREBASE_APP_NAME;
    exports.FirebaseApp = FirebaseApp;
    exports.VERSION = VERSION;
    exports._firebaseAppFactory = _firebaseAppFactory;
    exports.AngularFireModule = AngularFireModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
