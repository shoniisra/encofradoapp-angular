import { from } from 'rxjs';
import { fromCollectionRef } from '../observable/fromRef';
import { map, filter, scan, observeOn } from 'rxjs/operators';
import { validateEventsArray } from '../collection/collection';
import { docChanges, sortedChanges } from '../collection/changes';
var AngularFirestoreCollectionGroup = (function () {
    function AngularFirestoreCollectionGroup(query, afs) {
        this.query = query;
        this.afs = afs;
    }
    AngularFirestoreCollectionGroup.prototype.stateChanges = function (events) {
        if (!events || events.length === 0) {
            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);
        }
        return docChanges(this.query, this.afs.schedulers.outsideAngular)
            .pipe(this.afs.keepUnstableUntilFirst, map(function (actions) { return actions.filter(function (change) { return events.indexOf(change.type) > -1; }); }), filter(function (changes) { return changes.length > 0; }));
    };
    AngularFirestoreCollectionGroup.prototype.auditTrail = function (events) {
        return this.stateChanges(events).pipe(scan(function (current, action) { return current.concat(action); }, []));
    };
    AngularFirestoreCollectionGroup.prototype.snapshotChanges = function (events) {
        var validatedEvents = validateEventsArray(events);
        var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);
        return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);
    };
    AngularFirestoreCollectionGroup.prototype.valueChanges = function () {
        var fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);
        return fromCollectionRefScheduled$
            .pipe(this.afs.keepUnstableUntilFirst, map(function (actions) { return actions.payload.docs.map(function (a) { return a.data(); }); }));
    };
    AngularFirestoreCollectionGroup.prototype.get = function (options) {
        return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));
    };
    return AngularFirestoreCollectionGroup;
}());
export { AngularFirestoreCollectionGroup };
//# sourceMappingURL=collection-group.js.map