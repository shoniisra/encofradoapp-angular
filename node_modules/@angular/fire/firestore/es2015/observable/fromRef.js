import { Observable, asyncScheduler } from 'rxjs';
import { map } from 'rxjs/operators';
function _fromRef(ref, scheduler = asyncScheduler) {
    return new Observable(subscriber => {
        let unsubscribe;
        if (scheduler != null) {
            scheduler.schedule(() => {
                unsubscribe = ref.onSnapshot(subscriber);
            });
        }
        else {
            unsubscribe = ref.onSnapshot(subscriber);
        }
        return function () {
            if (unsubscribe != null) {
                unsubscribe();
            }
        };
    });
}
export function fromRef(ref, scheduler) {
    return _fromRef(ref, scheduler);
}
export function fromDocRef(ref, scheduler) {
    return fromRef(ref, scheduler)
        .pipe(map(payload => ({ payload, type: 'value' })));
}
export function fromCollectionRef(ref, scheduler) {
    return fromRef(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));
}
//# sourceMappingURL=fromRef.js.map