{"version":3,"file":"fromRef.js","sourceRoot":"","sources":["../../../../../src/firestore/observable/fromRef.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAiB,cAAc,EAAE,MAAM,MAAM,CAAC;AAEjE,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,SAAS,QAAQ,CAAO,GAAiB,EAAE,YAA2B,cAAc;IAClF,OAAO,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;QACjC,IAAI,WAAW,CAAC;QAChB,IAAI,SAAS,IAAI,IAAI,EAAE;YACrB,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;gBACtB,WAAW,GAAG,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,WAAW,GAAG,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;SAC1C;QAED,OAAO;YACL,IAAI,WAAW,IAAI,IAAI,EAAE;gBACvB,WAAW,EAAE,CAAC;aACf;QACH,CAAC,CAAA;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,OAAO,CAAI,GAA8B,EAAE,SAAyB;IAClF,OAAO,QAAQ,CAAgB,GAAG,EAAE,SAAS,CAAC,CAAC;AACjD,CAAC;AAED,MAAM,UAAU,UAAU,CAAI,GAAsB,EAAE,SAAyB;IAC7E,OAAO,OAAO,CAAsB,GAAG,EAAE,SAAS,CAAC;SAChD,IAAI,CACH,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAC7C,CAAC;AACN,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAI,GAAU,EAAE,SAAyB;IACxE,OAAO,OAAO,CAAmB,GAAG,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;AACtG,CAAC","sourcesContent":["import { Observable, SchedulerLike, asyncScheduler } from 'rxjs';\nimport { DocumentReference, Query, Action, Reference, DocumentSnapshot, QuerySnapshot } from '../interfaces';\nimport { map } from 'rxjs/operators';\n\nfunction _fromRef<T, R>(ref: Reference<T>, scheduler: SchedulerLike = asyncScheduler): Observable<R> {\n  return new Observable(subscriber => {\n    let unsubscribe;\n    if (scheduler != null) {\n      scheduler.schedule(() => {\n        unsubscribe = ref.onSnapshot(subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot(subscriber);\n    }\n\n    return function() {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    }\n  });\n}\n\nexport function fromRef<R>(ref: DocumentReference | Query, scheduler?: SchedulerLike) {\n  return _fromRef<typeof ref, R>(ref, scheduler);\n}\n\nexport function fromDocRef<T>(ref: DocumentReference, scheduler?: SchedulerLike): Observable<Action<DocumentSnapshot<T>>>{\n  return fromRef<DocumentSnapshot<T>>(ref, scheduler)\n    .pipe(\n      map(payload => ({ payload, type: 'value' }))\n    );\n}\n\nexport function fromCollectionRef<T>(ref: Query, scheduler?: SchedulerLike): Observable<Action<QuerySnapshot<T>>> {\n  return fromRef<QuerySnapshot<T>>(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));\n}\n"]}