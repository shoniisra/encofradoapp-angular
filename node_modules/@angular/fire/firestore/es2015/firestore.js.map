{"version":3,"file":"firestore.js","sourceRoot":"","sources":["../../../../src/firestore/firestore.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken, NgZone, PLATFORM_ID, Injectable, Inject, Optional } from '@angular/core';\n\nimport { Observable, of, from } from 'rxjs';\n\nimport { Settings, PersistenceSettings, CollectionReference, DocumentReference, QueryFn, Query, QueryGroupFn, AssociatedReference } from './interfaces';\nimport { AngularFirestoreDocument } from './document/document';\nimport { AngularFirestoreCollection } from './collection/collection';\nimport { AngularFirestoreCollectionGroup } from './collection-group/collection-group';\n\nimport { FirebaseFirestore, FirebaseOptions, FirebaseAppConfig, FIREBASE_OPTIONS, FIREBASE_APP_NAME, _firebaseAppFactory, ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\n\n// Workaround for Nodejs build\n// @ts-ignore\nimport firebase from 'firebase/app';\n\n// SEMVER: have to import here while we target ng 6, as the version of typescript doesn't allow dynamic import of types\nimport { firestore } from 'firebase/app';\n\n// SEMVER drop EnablePersistenceToken, PersistenceSettingsToken, and FirestoreSettingsToken in favor of new export names\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\nexport const EnablePersistenceToken = new InjectionToken<boolean>('angularfire2.enableFirestorePersistence');\nexport const PersistenceSettingsToken = new InjectionToken<PersistenceSettings|undefined>('angularfire2.firestore.persistenceSettings');\nexport const FirestoreSettingsToken = new InjectionToken<Settings>('angularfire2.firestore.settings');\n\nexport const ENABLE_PERSISTENCE = EnablePersistenceToken;\nexport const PERSISTENCE_SETTINGS = PersistenceSettingsToken\nexport const SETTINGS = FirestoreSettingsToken;\n\n// SEMVER kill this in the next major\n// timestampsInSnapshots was depreciated in 5.8.0\nconst major = parseInt(firebase.SDK_VERSION.split('.')[0]);\nconst minor = parseInt(firebase.SDK_VERSION.split('.')[1]);\nexport const DefaultFirestoreSettings = ((major < 5 || (major == 5 && minor < 8)) ? {timestampsInSnapshots: true} : {}) as Settings;\n\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\nexport function associateQuery(collectionRef: CollectionReference, queryFn = ref => ref): AssociatedReference {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return { query, ref };\n}\n\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\n@Injectable()\nexport class AngularFirestore {\n  public readonly firestore: FirebaseFirestore;\n  public readonly persistenceEnabled$: Observable<boolean>;\n  public readonly schedulers: ɵAngularFireSchedulers;\n  public readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;\n\n  /**\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\n   * don't rely on the main Firebase App instance and we can create named\n   * apps and use multiple apps.\n   * @param app\n   */\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Optional() @Inject(ENABLE_PERSISTENCE) shouldEnablePersistence: boolean|null,\n    @Optional() @Inject(SETTINGS) settings: Settings|null,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone,\n    @Optional() @Inject(PERSISTENCE_SETTINGS) persistenceSettings: PersistenceSettings|null,\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers, platformId);\n\n    this.firestore = zone.runOutsideAngular(() => {\n      const app = _firebaseAppFactory(options, zone, nameOrConfig);\n      const firestore = app.firestore();\n      firestore.settings(settings || DefaultFirestoreSettings);\n      return firestore;\n    });\n\n    if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n      // We need to try/catch here because not all enablePersistence() failures are caught\n      // https://github.com/firebase/firebase-js-sdk/issues/608\n      const enablePersistence = () => {\n        try {\n          return from(this.firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n        } catch(e) {\n          return of(false);\n        }\n      };\n      this.persistenceEnabled$ = zone.runOutsideAngular(enablePersistence);\n    } else {\n      this.persistenceEnabled$ = of(false);\n    }\n  }\n\n  /**\n   * Create a reference to a Firestore Collection based on a path or\n   * CollectionReference and an optional query function to narrow the result\n   * set.\n   * @param pathOrRef\n   * @param queryFn\n   */\n  collection<T>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<T>\n  collection<T>(ref: CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T>\n  collection<T>(pathOrRef: string | CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T> {\n    let collectionRef: CollectionReference;\n    if (typeof pathOrRef === 'string') {\n      collectionRef = this.firestore.collection(pathOrRef);\n    } else {\n      collectionRef = pathOrRef;\n    }\n    const { ref, query } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection<T>(ref, query, this);\n  }\n\n  /**\n   * Create a reference to a Firestore Collection Group based on a collectionId\n   * and an optional query function to narrow the result\n   * set.\n   * @param collectionId\n   * @param queryGroupFn\n   */\n  collectionGroup<T>(collectionId: string, queryGroupFn?: QueryGroupFn): AngularFirestoreCollectionGroup<T> {\n    if (major < 6) { throw \"collection group queries require Firebase JS SDK >= 6.0\"}\n    const queryFn = queryGroupFn || (ref => ref);\n    const firestore: any = this.firestore; // SEMVER: ditch any once targeting >= 6.0\n    const collectionGroup: Query = firestore.collectionGroup(collectionId);\n    return new AngularFirestoreCollectionGroup<T>(queryFn(collectionGroup), this);\n  }\n\n  /**\n   * Create a reference to a Firestore Document based on a path or\n   * DocumentReference. Note that documents are not queryable because they are\n   * simply objects. However, documents have sub-collections that return a\n   * Collection reference and can be queried.\n   * @param pathOrRef\n   */\n  doc<T>(path: string): AngularFirestoreDocument<T>\n  doc<T>(ref: DocumentReference): AngularFirestoreDocument<T>\n  doc<T>(pathOrRef: string | DocumentReference): AngularFirestoreDocument<T> {\n    let ref: DocumentReference;\n    if (typeof pathOrRef === 'string') {\n      ref = this.firestore.doc(pathOrRef);\n    } else {\n      ref = pathOrRef;\n    }\n    return new AngularFirestoreDocument<T>(ref, this);\n  }\n\n  /**\n   * Returns a generated Firestore Document Id.\n   */\n  createId() {\n    return this.firestore.collection('_').doc().id\n  }\n}\n"]}