{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../../src/storage/storage.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAClG,OAAO,EAAE,gBAAgB,EAA+B,MAAM,OAAO,CAAC;AAGtE,OAAO,EAAuD,mBAAmB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,8BAA8B,EAAE,sBAAsB,EAAE,MAAM,eAAe,CAAC;AAKtM,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,cAAc,CAAS,4BAA4B,CAAC,CAAC;AACtF,MAAM,CAAC,MAAM,MAAM,GAAG,aAAa,CAAC;AAUpC,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAM7B,YAC4B,OAAuB,EACV,YAAoD,EAC/D,aAAyB,EAChC,UAAkB,EACvC,IAAY;QAEZ,IAAI,CAAC,UAAU,GAAG,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,sBAAsB,GAAG,8BAA8B,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAE1F,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACzC,MAAM,GAAG,GAAG,mBAAmB,CAAC,OAAO,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;YAC7D,OAAO,GAAG,CAAC,OAAO,CAAC,aAAa,IAAI,SAAS,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,GAAG,CAAC,IAAY;QACd,OAAO,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAChG,CAAC;IAED,MAAM,CAAC,IAAY,EAAE,IAAS,EAAE,QAAyB;QACvD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,GAAG,GAAG,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACvF,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACjC,CAAC;CAEF,CAAA;AAhCY,kBAAkB;IAD9B,UAAU,EAAE;IAQR,WAAA,MAAM,CAAC,gBAAgB,CAAC,CAAA;IACxB,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,iBAAiB,CAAC,CAAA;IACrC,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,MAAM,CAAC,CAAA;IAC1B,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;6DAAa,MAAM;QACjC,MAAM;GAXH,kBAAkB,CAgC9B;SAhCY,kBAAkB","sourcesContent":["import { Injectable, Inject, Optional, InjectionToken, NgZone, PLATFORM_ID } from '@angular/core';\nimport { createStorageRef, AngularFireStorageReference } from './ref';\nimport { createUploadTask, AngularFireUploadTask } from './task';\nimport { Observable } from 'rxjs';\nimport { FirebaseStorage, FirebaseOptions, FirebaseAppConfig, _firebaseAppFactory, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵkeepUnstableUntilFirstFactory, ɵAngularFireSchedulers } from '@angular/fire';\n\nimport { UploadMetadata } from './interfaces';\n\n// SEMVER drop StorageBucket in favor of BUCKET\nexport const StorageBucket = new InjectionToken<string>('angularfire2.storageBucket');\nexport const BUCKET = StorageBucket;\n\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\n@Injectable()\nexport class AngularFireStorage {\n  public readonly storage: FirebaseStorage;\n\n  public readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;\n  public readonly schedulers: ɵAngularFireSchedulers;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Optional() @Inject(BUCKET) storageBucket:string|null,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers, platformId);\n\n    this.storage = zone.runOutsideAngular(() => {\n      const app = _firebaseAppFactory(options, zone, nameOrConfig);\n      return app.storage(storageBucket || undefined);\n    });\n  }\n\n  ref(path: string) {\n    return createStorageRef(this.storage.ref(path), this.schedulers, this.keepUnstableUntilFirst);\n  }\n\n  upload(path: string, data: any, metadata?: UploadMetadata) {\n    const storageRef = this.storage.ref(path);\n    const ref = createStorageRef(storageRef, this.schedulers, this.keepUnstableUntilFirst);\n    return ref.put(data, metadata);\n  }\n\n}\n"]}