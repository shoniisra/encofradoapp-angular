/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { normalize, SVG } from './svg';
var IconDirective = /** @class */ (function () {
    function IconDirective(domSanitizer) {
        this.domSanitizer = domSanitizer;
        this.width = '1em';
        this.height = '1em';
        this.rotate = 0;
    }
    /**
     * @return {?}
     */
    IconDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} changes
     * @return {?}
     */
    IconDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes) {
            this.updateIcon();
        }
    };
    /**
     * @return {?}
     */
    IconDirective.prototype.updateIcon = /**
     * @return {?}
     */
    function () {
        if (typeof this.icon !== 'object' && typeof this.icIcon !== 'object') {
            throw new Error('[Iconify]: No icon provided');
        }
        // Get SVG data
        /** @type {?} */
        var svg = new SVG(normalize(this.icon || this.icIcon));
        // Generate SVG
        this.iconHTML = this.domSanitizer.bypassSecurityTrustHtml(svg.getSVG({
            width: this.width,
            height: this.height,
            color: this.color,
            inline: this.inline,
            box: this.box,
            align: this.align,
            hFlip: this.hFlip,
            vFlip: this.vFlip,
            flip: this.flip,
            rotate: this.rotate
        }));
    };
    IconDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'ic-icon,[icIcon]'
                },] }
    ];
    /** @nocollapse */
    IconDirective.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    IconDirective.propDecorators = {
        icIcon: [{ type: Input }],
        icon: [{ type: Input }],
        color: [{ type: Input }],
        inline: [{ type: Input }, { type: HostBinding, args: ['class.ic-inline',] }],
        box: [{ type: Input }],
        size: [{ type: Input }, { type: HostBinding, args: ['style.font-size',] }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        align: [{ type: Input }],
        hFlip: [{ type: Input }],
        vFlip: [{ type: Input }],
        flip: [{ type: Input }],
        rotate: [{ type: Input }],
        iconHTML: [{ type: HostBinding, args: ['innerHTML',] }]
    };
    return IconDirective;
}());
export { IconDirective };
if (false) {
    /** @type {?} */
    IconDirective.prototype.icIcon;
    /** @type {?} */
    IconDirective.prototype.icon;
    /** @type {?} */
    IconDirective.prototype.color;
    /** @type {?} */
    IconDirective.prototype.inline;
    /** @type {?} */
    IconDirective.prototype.box;
    /** @type {?} */
    IconDirective.prototype.size;
    /** @type {?} */
    IconDirective.prototype.width;
    /** @type {?} */
    IconDirective.prototype.height;
    /** @type {?} */
    IconDirective.prototype.align;
    /** @type {?} */
    IconDirective.prototype.hFlip;
    /** @type {?} */
    IconDirective.prototype.vFlip;
    /** @type {?} */
    IconDirective.prototype.flip;
    /** @type {?} */
    IconDirective.prototype.rotate;
    /** @type {?} */
    IconDirective.prototype.iconHTML;
    /**
     * @type {?}
     * @private
     */
    IconDirective.prototype.domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmlzdXJlbC9pY29uaWZ5LWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvaWNvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRXZDO0lBbUNFLHVCQUFvQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQWJyQyxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2QsV0FBTSxHQUFHLEtBQUssQ0FBQztRQU9mLFdBQU0sR0FBRyxDQUFDLENBQUM7SUFLOEIsQ0FBQzs7OztJQUVuRCxnQ0FBUTs7O0lBQVIsY0FBWSxDQUFDOzs7OztJQUViLG1DQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNuQjtJQUNILENBQUM7Ozs7SUFFRCxrQ0FBVTs7O0lBQVY7UUFDRSxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUNwRSxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDaEQ7OztZQUdLLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFeEQsZUFBZTtRQUNmLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQ25FLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDcEIsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDOztnQkFsRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7aUJBQzdCOzs7O2dCQUxRLFlBQVk7Ozt5QkFRbEIsS0FBSzt1QkFDTCxLQUFLO3dCQUdMLEtBQUs7eUJBRUwsS0FBSyxZQUNMLFdBQVcsU0FBQyxpQkFBaUI7c0JBRzdCLEtBQUs7dUJBR0wsS0FBSyxZQUNMLFdBQVcsU0FBQyxpQkFBaUI7d0JBRzdCLEtBQUs7eUJBQ0wsS0FBSzt3QkFDTCxLQUFLO3dCQUdMLEtBQUs7d0JBQ0wsS0FBSzt1QkFDTCxLQUFLO3lCQUNMLEtBQUs7MkJBRUwsV0FBVyxTQUFDLFdBQVc7O0lBbUMxQixvQkFBQztDQUFBLEFBbkVELElBbUVDO1NBaEVZLGFBQWE7OztJQUV4QiwrQkFBd0I7O0lBQ3hCLDZCQUFzQjs7SUFHdEIsOEJBQXVCOztJQUV2QiwrQkFFZ0I7O0lBRWhCLDRCQUFzQjs7SUFHdEIsNkJBRWE7O0lBRWIsOEJBQXVCOztJQUN2QiwrQkFBd0I7O0lBQ3hCLDhCQUF1Qjs7SUFHdkIsOEJBQXdCOztJQUN4Qiw4QkFBd0I7O0lBQ3hCLDZCQUFzQjs7SUFDdEIsK0JBQW9COztJQUVwQixpQ0FDbUI7Ozs7O0lBRVAscUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBub3JtYWxpemUsIFNWRyB9IGZyb20gJy4vc3ZnJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaWMtaWNvbixbaWNJY29uXSdcbn0pXG5leHBvcnQgY2xhc3MgSWNvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKSBpY0ljb246IG9iamVjdDtcbiAgQElucHV0KCkgaWNvbjogb2JqZWN0O1xuXG4gIC8vIE9wdGlvbmFsIFByb3BlcnRpZXNcbiAgQElucHV0KCkgY29sb3I6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmljLWlubGluZScpXG4gIGlubGluZTogYm9vbGVhbjtcblxuICBASW5wdXQoKSBib3g6IGJvb2xlYW47XG5cbiAgLy8gRGltZW5zaW9ucyBhbmQgQWxpZ25tZW50XG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnc3R5bGUuZm9udC1zaXplJylcbiAgc2l6ZTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIHdpZHRoID0gJzFlbSc7XG4gIEBJbnB1dCgpIGhlaWdodCA9ICcxZW0nO1xuICBASW5wdXQoKSBhbGlnbjogc3RyaW5nO1xuXG4gIC8vIFRyYW5zZm9ybWF0aW9uc1xuICBASW5wdXQoKSBoRmxpcDogYm9vbGVhbjtcbiAgQElucHV0KCkgdkZsaXA6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGZsaXA6IHN0cmluZztcbiAgQElucHV0KCkgcm90YXRlID0gMDtcblxuICBASG9zdEJpbmRpbmcoJ2lubmVySFRNTCcpXG4gIGljb25IVE1MOiBTYWZlSHRtbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7IH1cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzKSB7XG4gICAgICB0aGlzLnVwZGF0ZUljb24oKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVJY29uKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5pY29uICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGhpcy5pY0ljb24gIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tJY29uaWZ5XTogTm8gaWNvbiBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIC8vIEdldCBTVkcgZGF0YVxuICAgIGNvbnN0IHN2ZyA9IG5ldyBTVkcobm9ybWFsaXplKHRoaXMuaWNvbiB8fCB0aGlzLmljSWNvbikpO1xuXG4gICAgLy8gR2VuZXJhdGUgU1ZHXG4gICAgdGhpcy5pY29uSFRNTCA9IHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHN2Zy5nZXRTVkcoe1xuICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgY29sb3I6IHRoaXMuY29sb3IsXG4gICAgICBpbmxpbmU6IHRoaXMuaW5saW5lLFxuICAgICAgYm94OiB0aGlzLmJveCxcbiAgICAgIGFsaWduOiB0aGlzLmFsaWduLFxuICAgICAgaEZsaXA6IHRoaXMuaEZsaXAsXG4gICAgICB2RmxpcDogdGhpcy52RmxpcCxcbiAgICAgIGZsaXA6IHRoaXMuZmxpcCxcbiAgICAgIHJvdGF0ZTogdGhpcy5yb3RhdGVcbiAgICB9KSk7XG4gIH1cbn1cbiJdfQ==