{"version":3,"sources":["ng://@visurel/iconify-angular/lib/svg.ts","ng://@visurel/iconify-angular/lib/icon.directive.ts","ng://@visurel/iconify-angular/lib/icon.module.ts"],"names":["idCounter","unitsSplit","unitsTest","defaultAttributes","left","top","width","height","rotate","hFlip","vFlip","SVG","_icon","this","calculateDimension","size","ratio","precision","Math","ceil","split","length","num","results","code","shift","isNumber","test","parseFloat","isNaN","push","join","replaceIDs","body","match","prefix","regex","ids","strReplace","search","replace","subject","pos","indexOf","slice","exec","Date","now","toString","random","forEach","id","newID","prototype","getAttributes","props","item","Object","create","align","horizontal","vertical","transform","style","attributes","inline","box","inlineTop","inlineHeight","key","flip","toLowerCase","value","units","parseInt","round","tempValue","transformations","unshift","customWidth","customHeight","verticalAlign","preserveAspectRatio","result","getAlignment","viewBox","color","getSVG","data","svg","keys","attr","IconDirective","domSanitizer","ngOnInit","ngOnChanges","changes","updateIcon","icon","icIcon","Error","assign","iconHTML","bypassSecurityTrustHtml","Directive","args","selector","DomSanitizer","Input","type","HostBinding","IconModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["/* tslint:disable:no-redundant-jsdoc variable-name no-conditional-assignment no-bitwise */\r\n\r\nimport { IconProps } from './icon-props.interface';\r\n\r\n/**\r\n * Unique id counter\r\n */\r\nlet idCounter = 0;\r\n\r\n/**\r\n * Regex used to split dimensions\r\n */\r\nconst unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\r\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\r\n\r\n/**\r\n * Attributes used for icon\r\n */\r\nconst iconAttributes = ['width', 'height', 'inline', 'hFlip', 'vFlip', 'flip', 'rotate', 'align', 'color', 'box'];\r\n\r\n/**\r\n * Default attribute values\r\n */\r\nconst defaultAttributes = {\r\n  left: 0,\r\n  top: 0,\r\n  width: 16,\r\n  height: 16,\r\n  rotate: 0,\r\n  hFlip: false,\r\n  vFlip: false\r\n};\r\n\r\n/**\r\n * Add missing properties to icon\r\n *\r\n * Important: in PHP version of this library this function is part of Collection class: Collection::addMissingAttributes()\r\n *\r\n * JavaScript version uses separate file so this function could be used in React and other components without loading\r\n * entire Collection class.\r\n */\r\nexport function normalize(data: object): object {\r\n  const item = Object.assign(Object.create(null), defaultAttributes, data);\r\n  if (item.inlineTop === void 0) {\r\n    item.inlineTop = item.top;\r\n  }\r\n  if (item.inlineHeight === void 0) {\r\n    item.inlineHeight = item.height;\r\n  }\r\n  if (item.verticalAlign === void 0) {\r\n    // -0.143 if icon is designed for 14px height,\r\n    // otherwise assume icon is designed for 16px height\r\n    item.verticalAlign = item.height % 7 === 0 && item.height % 8 !== 0 ? -0.143 : -0.125;\r\n  }\r\n  return item;\r\n}\r\n\r\n/**\r\n * Get preserveAspectRatio attribute value\r\n */\r\nexport function getAlignment(align: { horizontal: string; vertical: string; slice: boolean }): string {\r\n  let result;\r\n  switch (align.horizontal) {\r\n    case 'left':\r\n      result = 'xMin';\r\n      break;\r\n\r\n    case 'right':\r\n      result = 'xMax';\r\n      break;\r\n\r\n    default:\r\n      result = 'xMid';\r\n  }\r\n  switch (align.vertical) {\r\n    case 'top':\r\n      result += 'YMin';\r\n      break;\r\n\r\n    case 'bottom':\r\n      result += 'YMax';\r\n      break;\r\n\r\n    default:\r\n      result += 'YMid';\r\n  }\r\n  result += align.slice ? ' slice' : ' meet';\r\n  return result;\r\n}\r\n\r\n/**\r\n * SVG class\r\n *\r\n * @see @iconify/json-tools/src/svg.js\r\n */\r\nexport class SVG {\r\n  /**\r\n   * Constructor\r\n   *\r\n   *  Use Collection.getIconData() to retrieve icon data\r\n   */\r\n  constructor(private _icon) {}\r\n\r\n  /**\r\n   * Calculate second dimension when only 1 dimension is set\r\n   * If size == width, ratio = height/width\r\n   * If size == height, ratio = width/height\r\n   */\r\n  static calculateDimension(size: string | number, ratio: number, precision = 100): string | number | null {\r\n    if (ratio === 1) {\r\n      return size;\r\n    }\r\n\r\n    if (typeof size === 'number') {\r\n      return Math.ceil(size * ratio * precision) / precision;\r\n    }\r\n\r\n    // split code into sets of strings and numbers\r\n    const split = size.split(unitsSplit);\r\n    if (split === null || !split.length) {\r\n      return null;\r\n    }\r\n    const results = [];\r\n    let code = split.shift();\r\n    let isNumber = unitsTest.test(code);\r\n    let num;\r\n\r\n    while (true) {\r\n      if (isNumber) {\r\n        num = parseFloat(code);\r\n        if (isNaN(num)) {\r\n          results.push(code);\r\n        } else {\r\n          results.push(Math.ceil(num * ratio * precision) / precision);\r\n        }\r\n      } else {\r\n        results.push(code);\r\n      }\r\n\r\n      // next\r\n      code = split.shift();\r\n      if (code === void 0) {\r\n        return results.join('');\r\n      }\r\n      isNumber = !isNumber;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace IDs in SVG output with unique IDs\r\n   * Fast replacement without parsing XML, assuming commonly used patterns.\r\n   */\r\n  static replaceIDs(body: string): string {\r\n    const regex = /\\sid=\"(\\S+)\"/g;\r\n    const ids = [];\r\n    let match: RegExpExecArray;\r\n    let prefix: string;\r\n\r\n    function strReplace(search, replace, subject) {\r\n      let pos = 0;\r\n\r\n      while ((pos = subject.indexOf(search, pos)) !== -1) {\r\n        subject = subject.slice(0, pos) + replace + subject.slice(pos + search.length);\r\n        pos += replace.length;\r\n      }\r\n\r\n      return subject;\r\n    }\r\n\r\n    // Find all IDs\r\n    while (match = regex.exec(body)) {\r\n      ids.push(match[1]);\r\n    }\r\n    if (!ids.length) {\r\n      return body;\r\n    }\r\n\r\n    prefix = 'IconifyId-' + Date.now().toString(16) + '-' + (Math.random() * 0x1000000 | 0).toString(16) + '-';\r\n\r\n    // Replace with unique ids\r\n    ids.forEach((id) => {\r\n      const newID = prefix + idCounter;\r\n      idCounter++;\r\n      body = strReplace('=\"' + id + '\"', '=\"' + newID + '\"', body);\r\n      body = strReplace('=\"#' + id + '\"', '=\"#' + newID + '\"', body);\r\n      body = strReplace('(#' + id + ')', '(#' + newID + ')', body);\r\n    });\r\n\r\n    return body;\r\n  }\r\n\r\n  /**\r\n   * Get SVG attributes\r\n   */\r\n  getAttributes(props: IconProps) {\r\n    const item = this._icon;\r\n    if (typeof props !== 'object') {\r\n      props = Object.create(null);\r\n    }\r\n\r\n    // Set data\r\n    const align = {\r\n      horizontal: 'center',\r\n      vertical: 'middle',\r\n      slice: false\r\n    };\r\n    const transform = {\r\n      rotate: item.rotate,\r\n      hFlip: item.hFlip,\r\n      vFlip: item.vFlip\r\n    };\r\n    const style = Object.create(null);\r\n\r\n    const attributes = Object.create(null);\r\n\r\n    // Get width/height\r\n    const inline = props.inline === true || props.inline === 'true' || props.inline === '1';\r\n\r\n    const box = {\r\n      left: item.left,\r\n      top: inline ? item.inlineTop : item.top,\r\n      width: item.width,\r\n      height: inline ? item.inlineHeight : item.height\r\n    };\r\n\r\n    // Transformations\r\n    ['hFlip', 'vFlip'].forEach(key => {\r\n      if (props[key] !== void 0 && (props[key] === true || props[key] === 'true' || props[key] === '1')) {\r\n        transform[key] = !transform[key];\r\n      }\r\n    });\r\n    if (props.flip !== void 0) {\r\n      props.flip.toLowerCase().split(/[\\s,]+/).forEach(value => {\r\n        switch (value) {\r\n          case 'horizontal':\r\n            transform.hFlip = !transform.hFlip;\r\n            break;\r\n\r\n          case 'vertical':\r\n            transform.vFlip = !transform.vFlip;\r\n        }\r\n      });\r\n    }\r\n    if (props.rotate !== void 0) {\r\n      let value = props.rotate;\r\n      if (typeof value === 'number') {\r\n        transform.rotate += value;\r\n      } else if (typeof value === 'string') {\r\n        const units = value.replace(/^-?[0-9.]*/, '');\r\n        if (units === '') {\r\n          value = parseInt(value, 10);\r\n          if (!isNaN(value)) {\r\n            transform.rotate += value;\r\n          }\r\n        } else if (units !== value) {\r\n          let split: boolean | number = false;\r\n          switch (units) {\r\n            case '%':\r\n              // 25% -> 1, 50% -> 2, ...\r\n              split = 25;\r\n              break;\r\n\r\n            case 'deg':\r\n              // 90deg -> 1, 180deg -> 2, ...\r\n              split = 90;\r\n          }\r\n          if (split) {\r\n            value = parseInt(value.slice(0, value.length - units.length), 10);\r\n            if (!isNaN(value)) {\r\n              transform.rotate += Math.round(value / split);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply transformations to box\r\n    const transformations = [];\r\n    let tempValue;\r\n    if (transform.hFlip) {\r\n      if (transform.vFlip) {\r\n        transform.rotate += 2;\r\n      } else {\r\n        // Horizontal flip\r\n        transformations.push('translate(' + (box.width + box.left) + ' ' + (0 - box.top) + ')');\r\n        transformations.push('scale(-1 1)');\r\n        box.top = box.left = 0;\r\n      }\r\n    } else if (transform.vFlip) {\r\n      // Vertical flip\r\n      transformations.push('translate(' + (0 - box.left) + ' ' + (box.height + box.top) + ')');\r\n      transformations.push('scale(1 -1)');\r\n      box.top = box.left = 0;\r\n    }\r\n    switch (transform.rotate % 4) {\r\n      case 1:\r\n        // 90deg\r\n        tempValue = box.height / 2 + box.top;\r\n        transformations.unshift('rotate(90 ' + tempValue + ' ' + tempValue + ')');\r\n        // swap width/height and x/y\r\n        if (box.left !== 0 || box.top !== 0) {\r\n          tempValue = box.left;\r\n          box.left = box.top;\r\n          box.top = tempValue;\r\n        }\r\n        if (box.width !== box.height) {\r\n          tempValue = box.width;\r\n          box.width = box.height;\r\n          box.height = tempValue;\r\n        }\r\n        break;\r\n\r\n      case 2:\r\n        // 180deg\r\n        transformations.unshift('rotate(180 ' + (box.width / 2 + box.left) + ' ' + (box.height / 2 + box.top) + ')');\r\n        break;\r\n\r\n      case 3:\r\n        // 270deg\r\n        tempValue = box.width / 2 + box.left;\r\n        transformations.unshift('rotate(-90 ' + tempValue + ' ' + tempValue + ')');\r\n        // swap width/height and x/y\r\n        if (box.left !== 0 || box.top !== 0) {\r\n          tempValue = box.left;\r\n          box.left = box.top;\r\n          box.top = tempValue;\r\n        }\r\n        if (box.width !== box.height) {\r\n          tempValue = box.width;\r\n          box.width = box.height;\r\n          box.height = tempValue;\r\n        }\r\n        break;\r\n    }\r\n\r\n    // Calculate dimensions\r\n    // Values for width/height: null = default, 'auto' = from svg, false = do not set\r\n    // Default: if both values aren't set, height defaults to '1em', width is calculated from height\r\n    const customWidth = props.width ? props.width : null;\r\n    let customHeight = props.height ? props.height : null;\r\n\r\n    let width;\r\n    let height;\r\n    if (customWidth === null && customHeight === null) {\r\n      customHeight = '1em';\r\n    }\r\n    if (customWidth !== null && customHeight !== null) {\r\n      width = customWidth;\r\n      height = customHeight;\r\n    } else if (customWidth !== null) {\r\n      width = customWidth;\r\n      height = SVG.calculateDimension(width, box.height / box.width);\r\n    } else {\r\n      height = customHeight;\r\n      width = SVG.calculateDimension(height, box.width / box.height);\r\n    }\r\n\r\n    if (width !== false) {\r\n      attributes.width = width === 'auto' ? box.width : width;\r\n    }\r\n    if (height !== false) {\r\n      attributes.height = height === 'auto' ? box.height : height;\r\n    }\r\n\r\n    // Add vertical-align for inline icon\r\n    if (inline && item.verticalAlign !== 0) {\r\n      style['vertical-align'] = item.verticalAlign + 'em';\r\n    }\r\n\r\n    // Check custom alignment\r\n    if (props.align !== void 0) {\r\n      props.align.toLowerCase().split(/[\\s,]+/).forEach(value => {\r\n        switch (value) {\r\n          case 'left':\r\n          case 'right':\r\n          case 'center':\r\n            align.horizontal = value;\r\n            break;\r\n\r\n          case 'top':\r\n          case 'bottom':\r\n          case 'middle':\r\n            align.vertical = value;\r\n            break;\r\n\r\n          case 'crop':\r\n            align.slice = true;\r\n            break;\r\n\r\n          case 'meet':\r\n            align.slice = false;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Generate viewBox and preserveAspectRatio attributes\r\n    attributes.preserveAspectRatio = getAlignment(align);\r\n    attributes.viewBox = box.left + ' ' + box.top + ' ' + box.width + ' ' + box.height;\r\n\r\n    // Generate body\r\n    let body = SVG.replaceIDs(item.body);\r\n\r\n    if (props.color !== void 0) {\r\n      body = body.replace(/currentColor/g, props.color);\r\n    }\r\n    if (transformations.length) {\r\n      body = '<g transform=\"' + transformations.join(' ') + '\">' + body + '</g>';\r\n    }\r\n    if (props.box === true || props.box === 'true' || props.box === '1') {\r\n      // Add transparent bounding box\r\n      // tslint:disable-next-line:max-line-length\r\n      body += '<rect x=\"' + box.left + '\" y=\"' + box.top + '\" width=\"' + box.width + '\" height=\"' + box.height + '\" fill=\"rgba(0, 0, 0, 0)\" />';\r\n    }\r\n\r\n    return {\r\n      attributes,\r\n      body,\r\n      style\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate SVG\r\n   */\r\n  getSVG(attributes: IconProps) {\r\n    const data = this.getAttributes(attributes);\r\n\r\n    let svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\r\n\r\n    // Add SVG attributes\r\n    Object.keys(data.attributes).forEach(attr => {\r\n      svg += ' ' + attr + '=\"' + data.attributes[attr] + '\"';\r\n    });\r\n\r\n    // Add style with 360deg transformation to style to prevent subpixel rendering bug\r\n    svg += ' style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);';\r\n    Object.keys(data.style).forEach(attr => {\r\n      svg += ' ' + attr + ': ' + data.style[attr] + ';';\r\n    });\r\n\r\n    svg += '\">';\r\n\r\n    svg += data.body + '</svg>';\r\n\r\n    return svg;\r\n  }\r\n}\r\n","import { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { normalize, SVG } from './svg';\n\n@Directive({\n  selector: 'ic-icon,[icIcon]'\n})\nexport class IconDirective implements OnInit, OnChanges {\n\n  @Input() icIcon: object;\n  @Input() icon: object;\n\n  // Optional Properties\n  @Input() color: string;\n\n  @Input()\n  @HostBinding('class.ic-inline')\n  inline: boolean;\n\n  @Input() box: boolean;\n\n  // Dimensions and Alignment\n  @Input()\n  @HostBinding('style.font-size')\n  size: string;\n\n  @Input() width = '1em';\n  @Input() height = '1em';\n  @Input() align: string;\n\n  // Transformations\n  @Input() hFlip: boolean;\n  @Input() vFlip: boolean;\n  @Input() flip: string;\n  @Input() rotate = 0;\n\n  @HostBinding('innerHTML')\n  iconHTML: SafeHtml;\n\n  constructor(private domSanitizer: DomSanitizer) { }\n\n  ngOnInit() {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes) {\n      this.updateIcon();\n    }\n  }\n\n  updateIcon() {\n    if (typeof this.icon !== 'object' && typeof this.icIcon !== 'object') {\n      throw new Error('[Iconify]: No icon provided');\n    }\n\n    // Get SVG data\n    const svg = new SVG(normalize(this.icon || this.icIcon));\n\n    // Generate SVG\n    this.iconHTML = this.domSanitizer.bypassSecurityTrustHtml(svg.getSVG({\n      width: this.width,\n      height: this.height,\n      color: this.color,\n      inline: this.inline,\n      box: this.box,\n      align: this.align,\n      hFlip: this.hFlip,\n      vFlip: this.vFlip,\n      flip: this.flip,\n      rotate: this.rotate\n    }));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { IconDirective } from './icon.directive';\n\n\n@NgModule({\n  declarations: [IconDirective],\n  imports: [],\n  exports: [IconDirective]\n})\nexport class IconModule {\n}\n"]}