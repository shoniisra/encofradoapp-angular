/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { normalize, SVG } from './svg';
export class IconDirective {
    /**
     * @param {?} domSanitizer
     */
    constructor(domSanitizer) {
        this.domSanitizer = domSanitizer;
        this.width = '1em';
        this.height = '1em';
        this.rotate = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes) {
            this.updateIcon();
        }
    }
    /**
     * @return {?}
     */
    updateIcon() {
        if (typeof this.icon !== 'object' && typeof this.icIcon !== 'object') {
            throw new Error('[Iconify]: No icon provided');
        }
        // Get SVG data
        /** @type {?} */
        const svg = new SVG(normalize(this.icon || this.icIcon));
        // Generate SVG
        this.iconHTML = this.domSanitizer.bypassSecurityTrustHtml(svg.getSVG({
            width: this.width,
            height: this.height,
            color: this.color,
            inline: this.inline,
            box: this.box,
            align: this.align,
            hFlip: this.hFlip,
            vFlip: this.vFlip,
            flip: this.flip,
            rotate: this.rotate
        }));
    }
}
IconDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ic-icon,[icIcon]'
            },] }
];
/** @nocollapse */
IconDirective.ctorParameters = () => [
    { type: DomSanitizer }
];
IconDirective.propDecorators = {
    icIcon: [{ type: Input }],
    icon: [{ type: Input }],
    color: [{ type: Input }],
    inline: [{ type: Input }, { type: HostBinding, args: ['class.ic-inline',] }],
    box: [{ type: Input }],
    size: [{ type: Input }, { type: HostBinding, args: ['style.font-size',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    align: [{ type: Input }],
    hFlip: [{ type: Input }],
    vFlip: [{ type: Input }],
    flip: [{ type: Input }],
    rotate: [{ type: Input }],
    iconHTML: [{ type: HostBinding, args: ['innerHTML',] }]
};
if (false) {
    /** @type {?} */
    IconDirective.prototype.icIcon;
    /** @type {?} */
    IconDirective.prototype.icon;
    /** @type {?} */
    IconDirective.prototype.color;
    /** @type {?} */
    IconDirective.prototype.inline;
    /** @type {?} */
    IconDirective.prototype.box;
    /** @type {?} */
    IconDirective.prototype.size;
    /** @type {?} */
    IconDirective.prototype.width;
    /** @type {?} */
    IconDirective.prototype.height;
    /** @type {?} */
    IconDirective.prototype.align;
    /** @type {?} */
    IconDirective.prototype.hFlip;
    /** @type {?} */
    IconDirective.prototype.vFlip;
    /** @type {?} */
    IconDirective.prototype.flip;
    /** @type {?} */
    IconDirective.prototype.rotate;
    /** @type {?} */
    IconDirective.prototype.iconHTML;
    /**
     * @type {?}
     * @private
     */
    IconDirective.prototype.domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmlzdXJlbC9pY29uaWZ5LWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvaWNvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBS3ZDLE1BQU0sT0FBTyxhQUFhOzs7O0lBZ0N4QixZQUFvQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQWJyQyxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2QsV0FBTSxHQUFHLEtBQUssQ0FBQztRQU9mLFdBQU0sR0FBRyxDQUFDLENBQUM7SUFLOEIsQ0FBQzs7OztJQUVuRCxRQUFRLEtBQUksQ0FBQzs7Ozs7SUFFYixXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDOzs7O0lBRUQsVUFBVTtRQUNSLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQ3BFLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztTQUNoRDs7O2NBR0ssR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxlQUFlO1FBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDbkUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNwQixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7OztZQWxFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjthQUM3Qjs7OztZQUxRLFlBQVk7OztxQkFRbEIsS0FBSzttQkFDTCxLQUFLO29CQUdMLEtBQUs7cUJBRUwsS0FBSyxZQUNMLFdBQVcsU0FBQyxpQkFBaUI7a0JBRzdCLEtBQUs7bUJBR0wsS0FBSyxZQUNMLFdBQVcsU0FBQyxpQkFBaUI7b0JBRzdCLEtBQUs7cUJBQ0wsS0FBSztvQkFDTCxLQUFLO29CQUdMLEtBQUs7b0JBQ0wsS0FBSzttQkFDTCxLQUFLO3FCQUNMLEtBQUs7dUJBRUwsV0FBVyxTQUFDLFdBQVc7Ozs7SUEzQnhCLCtCQUF3Qjs7SUFDeEIsNkJBQXNCOztJQUd0Qiw4QkFBdUI7O0lBRXZCLCtCQUVnQjs7SUFFaEIsNEJBQXNCOztJQUd0Qiw2QkFFYTs7SUFFYiw4QkFBdUI7O0lBQ3ZCLCtCQUF3Qjs7SUFDeEIsOEJBQXVCOztJQUd2Qiw4QkFBd0I7O0lBQ3hCLDhCQUF3Qjs7SUFDeEIsNkJBQXNCOztJQUN0QiwrQkFBb0I7O0lBRXBCLGlDQUNtQjs7Ozs7SUFFUCxxQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IG5vcm1hbGl6ZSwgU1ZHIH0gZnJvbSAnLi9zdmcnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpYy1pY29uLFtpY0ljb25dJ1xufSlcbmV4cG9ydCBjbGFzcyBJY29uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpIGljSWNvbjogb2JqZWN0O1xuICBASW5wdXQoKSBpY29uOiBvYmplY3Q7XG5cbiAgLy8gT3B0aW9uYWwgUHJvcGVydGllc1xuICBASW5wdXQoKSBjb2xvcjogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnY2xhc3MuaWMtaW5saW5lJylcbiAgaW5saW5lOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpIGJveDogYm9vbGVhbjtcblxuICAvLyBEaW1lbnNpb25zIGFuZCBBbGlnbm1lbnRcbiAgQElucHV0KClcbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5mb250LXNpemUnKVxuICBzaXplOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgd2lkdGggPSAnMWVtJztcbiAgQElucHV0KCkgaGVpZ2h0ID0gJzFlbSc7XG4gIEBJbnB1dCgpIGFsaWduOiBzdHJpbmc7XG5cbiAgLy8gVHJhbnNmb3JtYXRpb25zXG4gIEBJbnB1dCgpIGhGbGlwOiBib29sZWFuO1xuICBASW5wdXQoKSB2RmxpcDogYm9vbGVhbjtcbiAgQElucHV0KCkgZmxpcDogc3RyaW5nO1xuICBASW5wdXQoKSByb3RhdGUgPSAwO1xuXG4gIEBIb3N0QmluZGluZygnaW5uZXJIVE1MJylcbiAgaWNvbkhUTUw6IFNhZmVIdG1sO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHsgfVxuXG4gIG5nT25Jbml0KCkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgIHRoaXMudXBkYXRlSWNvbigpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUljb24oKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmljb24gIT09ICdvYmplY3QnICYmIHR5cGVvZiB0aGlzLmljSWNvbiAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0ljb25pZnldOiBObyBpY29uIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgLy8gR2V0IFNWRyBkYXRhXG4gICAgY29uc3Qgc3ZnID0gbmV3IFNWRyhub3JtYWxpemUodGhpcy5pY29uIHx8IHRoaXMuaWNJY29uKSk7XG5cbiAgICAvLyBHZW5lcmF0ZSBTVkdcbiAgICB0aGlzLmljb25IVE1MID0gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoc3ZnLmdldFNWRyh7XG4gICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICBjb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGlubGluZTogdGhpcy5pbmxpbmUsXG4gICAgICBib3g6IHRoaXMuYm94LFxuICAgICAgYWxpZ246IHRoaXMuYWxpZ24sXG4gICAgICBoRmxpcDogdGhpcy5oRmxpcCxcbiAgICAgIHZGbGlwOiB0aGlzLnZGbGlwLFxuICAgICAgZmxpcDogdGhpcy5mbGlwLFxuICAgICAgcm90YXRlOiB0aGlzLnJvdGF0ZVxuICAgIH0pKTtcbiAgfVxufVxuIl19