import { DomSanitizer } from '@angular/platform-browser';
import { QuillConfig, QuillModules } from './quill-editor.interfaces';
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
export interface CustomOption {
    import: string;
    whitelist: any[];
}
export interface Range {
    index: number;
    length: number;
}
export declare class QuillEditorComponent implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {
    private elementRef;
    private domSanitizer;
    private doc;
    private platformId;
    private renderer;
    private zone;
    private config;
    static normalizeClassNames(classes: string): string[];
    quillEditor: any;
    editorElem: HTMLElement | undefined;
    content: any;
    format?: 'object' | 'html' | 'text' | 'json';
    theme?: string;
    modules?: QuillModules;
    debug?: 'warn' | 'log' | 'error' | false;
    readOnly?: boolean;
    placeholder?: string;
    maxLength?: number;
    minLength?: number;
    required: boolean;
    formats?: string[] | null;
    customToolbarPosition: 'top' | 'bottom';
    sanitize: boolean;
    styles: any;
    strict: boolean;
    scrollingContainer?: HTMLElement | string | null;
    bounds?: HTMLElement | string;
    customOptions: CustomOption[];
    trackChanges?: 'user' | 'all';
    preserveWhitespace: boolean;
    classes?: string;
    onEditorCreated: EventEmitter<any>;
    onEditorChanged: EventEmitter<{
        content: any;
        delta: any;
        editor: any;
        event: 'text-change';
        html: string | null;
        oldDelta: any;
        source: string;
        text: string;
    } | {
        editor: any;
        event: 'selection-change';
        oldRange: Range | null;
        range: Range | null;
        source: string;
    }>;
    onContentChanged: EventEmitter<{
        content: any;
        delta: any;
        editor: any;
        html: string | null;
        oldDelta: any;
        source: string;
        text: string;
    }>;
    onSelectionChanged: EventEmitter<{
        editor: any;
        oldRange: Range | null;
        range: Range | null;
        source: string;
    }>;
    onFocus: EventEmitter<{
        editor: any;
        source: string;
    }>;
    onBlur: EventEmitter<{
        editor: any;
        source: string;
    }>;
    disabled: boolean;
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: any, renderer: Renderer2, zone: NgZone, config: QuillConfig);
    onModelChange(_modelValue?: any): void;
    onModelTouched(): void;
    valueGetter: (quillEditor: any, editorElement: HTMLElement) => any;
    valueSetter: (quillEditor: any, value: any) => any;
    ngAfterViewInit(): void;
    selectionChangeHandler: (range: Range, oldRange: Range, source: string) => void;
    textChangeHandler: (delta: any, oldDelta: any, source: string) => void;
    editorChangeHandler: (event: "text-change" | "selection-change", current: any, old: any, source: string) => void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    addClasses(classList: string): void;
    removeClasses(classList: string): void;
    writeValue(currentValue: any): void;
    setDisabledState(isDisabled?: boolean): void;
    registerOnChange(fn: (modelValue: any) => void): void;
    registerOnTouched(fn: () => void): void;
    validate(): {
        minLengthError?: {
            given: number;
            minLength: number;
        };
        maxLengthError?: {
            given: number;
            maxLength: number;
        };
        requiredError?: {
            empty: boolean;
        };
    };
}
