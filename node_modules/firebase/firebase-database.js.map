{"version":3,"file":"firebase-database.js","sources":["../../node_modules/tslib/tslib.es6.js","../util/src/crypt.ts","../util/src/constants.ts","../util/src/assert.ts","../util/src/deepCopy.ts","../util/src/deferred.ts","../util/src/environment.ts","../util/src/errors.ts","../util/src/json.ts","../util/src/jwt.ts","../util/src/obj.ts","../util/src/sha1.ts","../util/src/validation.ts","../util/src/utf8.ts","../logger/src/logger.ts","../database/src/core/storage/DOMStorageWrapper.ts","../database/src/core/storage/MemoryStorage.ts","../database/src/core/storage/storage.ts","../database/src/core/util/util.ts","../database/src/core/util/Path.ts","../database/src/realtime/Constants.ts","../database/src/core/RepoInfo.ts","../database/src/core/util/libs/parser.ts","../database/src/core/util/validation.ts","../database/src/api/onDisconnect.ts","../database/src/api/TransactionResult.ts","../database/src/core/util/NextPushId.ts","../database/src/core/snap/Node.ts","../database/src/core/snap/indexes/Index.ts","../database/src/core/snap/indexes/KeyIndex.ts","../database/src/core/snap/snap.ts","../database/src/core/snap/LeafNode.ts","../database/src/core/snap/indexes/PriorityIndex.ts","../database/src/core/util/SortedMap.ts","../database/src/core/snap/childSet.ts","../database/src/core/snap/IndexMap.ts","../database/src/core/snap/ChildrenNode.ts","../database/src/core/snap/comparators.ts","../database/src/core/snap/nodeFromJSON.ts","../database/src/core/snap/indexes/ValueIndex.ts","../database/src/core/snap/indexes/PathIndex.ts","../database/src/api/DataSnapshot.ts","../database/src/core/view/Event.ts","../database/src/core/view/EventRegistration.ts","../database/src/api/Query.ts","../database/src/core/SparseSnapshotTree.ts","../database/src/core/util/ServerValues.ts","../database/src/core/operation/Operation.ts","../database/src/core/operation/AckUserWrite.ts","../database/src/core/util/ImmutableTree.ts","../database/src/core/operation/ListenComplete.ts","../database/src/core/operation/Overwrite.ts","../database/src/core/operation/Merge.ts","../database/src/core/view/CacheNode.ts","../database/src/core/view/ViewCache.ts","../database/src/core/view/Change.ts","../database/src/core/view/filter/IndexedFilter.ts","../database/src/core/view/ChildChangeAccumulator.ts","../database/src/core/view/CompleteChildSource.ts","../database/src/core/view/ViewProcessor.ts","../database/src/core/view/EventGenerator.ts","../database/src/core/view/View.ts","../database/src/core/SyncPoint.ts","../database/src/core/CompoundWrite.ts","../database/src/core/WriteTree.ts","../database/src/core/SyncTree.ts","../database/src/core/SnapshotHolder.ts","../database/src/core/AuthTokenProvider.ts","../database/src/core/stats/StatsCollection.ts","../database/src/core/stats/StatsManager.ts","../database/src/core/stats/StatsListener.ts","../database/src/core/stats/StatsReporter.ts","../database/src/core/view/EventQueue.ts","../database/src/core/util/EventEmitter.ts","../database/src/core/util/VisibilityMonitor.ts","../database/src/core/util/OnlineMonitor.ts","../database/src/realtime/polling/PacketReceiver.ts","../database/src/realtime/BrowserPollConnection.ts","../database/src/core/version.ts","../database/src/realtime/WebSocketConnection.ts","../database/src/realtime/TransportManager.ts","../database/src/realtime/Connection.ts","../database/src/core/ServerActions.ts","../database/src/core/PersistentConnection.ts","../database/src/core/ReadonlyRestClient.ts","../util/src/query.ts","../database/src/core/Repo.ts","../database/src/core/view/filter/RangedFilter.ts","../database/src/core/view/filter/LimitedFilter.ts","../database/src/core/view/QueryParams.ts","../database/src/api/Reference.ts","../database/src/core/util/Tree.ts","../database/src/core/Repo_transaction.ts","../database/src/core/RepoManager.ts","../database/src/api/Database.ts","../database/src/api/internal.ts","../database/src/api/test_access.ts","../database/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function(str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function(bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function(str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function(assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function(message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n    (target as { [key: string]: unknown })[prop] = deepExtend(\n      (target as { [key: string]: unknown })[prop],\n      (source as { [key: string]: unknown })[prop]\n    );\n  }\n\n  return target;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: StringLike | undefined;\n}\n\nexport interface FirebaseError extends Error, ErrorData {\n  // Unique code for error - format is service/error-code-string.\n  readonly code: string;\n\n  // Developer-friendly error message.\n  readonly message: string;\n\n  // Always 'FirebaseError'.\n  readonly name: typeof ERROR_NAME;\n\n  // Where available - stack backtrace in a string.\n  readonly stack?: string;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(readonly code: string, message: string) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage);\n\n    // Keys with an underscore at the end of their name are not included in\n    // error.data for some reason.\n    // TODO: Replace with Object.entries when lib is updated to es2017.\n    for (const key of Object.keys(customData)) {\n      if (key.slice(-1) !== '_') {\n        if (key in error) {\n          console.warn(\n            `Overwriting FirebaseError base field \"${key}\" can cause unexpected behavior.`\n          );\n        }\n        error[key] = customData[key];\n      }\n    }\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? value.toString() : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function(token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function(token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function(token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function(token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function(token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: keyof T): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function(\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argumentNumber The index of the argument\n * @param optional Whether or not the argument is optional\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(\n  fnName: string,\n  argumentNumber: number,\n  optional: boolean\n): string {\n  let argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error(\n        'errorPrefix called with argumentNumber > 4.  Need to update it?'\n      );\n  }\n\n  let error = fnName + ' failed: ';\n\n  error += argName + ' argument ';\n  return error;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  argumentNumber: number,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentNumber: number,\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentNumber: number,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function(str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function(str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  switch (logType) {\n    /**\n     * By default, `console.debug` is not displayed in the developer console (in\n     * chrome). To avoid forcing users to have to opt-in to these logs twice\n     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n     * logs to the `console.log` function.\n     */\n    case LogLevel.DEBUG:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.VERBOSE:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.INFO:\n      console.info(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.WARN:\n      console.warn(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.ERROR:\n      console.error(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    default:\n      throw new Error(\n        `Attempted to log a message with an invalid logType (value: ${logType})`\n      );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError('Invalid value assigned to `logLevel`');\n    }\n    this._logLevel = val;\n  }\n\n  /**\n   * The log handler for the Logger instance.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: any | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): any {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: any } = {};\n\n  set(key: string, value: any | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): any {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: any;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function(\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\n\ndeclare const window: any;\ndeclare const Windows: any;\n\nimport { assert } from '@firebase/util';\nimport { base64 } from '@firebase/util';\nimport { Sha1 } from '@firebase/util';\nimport { stringToByteArray } from '@firebase/util';\nimport { stringify } from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { isNodeSdk } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function() {\n  let id = 1;\n  return function() {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} var_args\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function(...var_args: any[]): string {\n  let message = '';\n  for (let i = 0; i < var_args.length; i++) {\n    if (\n      Array.isArray(var_args[i]) ||\n      (var_args[i] &&\n        typeof var_args[i] === 'object' &&\n        typeof var_args[i].length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, var_args[i]);\n    } else if (typeof var_args[i] === 'object') {\n      message += stringify(var_args[i]);\n    } else {\n      message += var_args[i];\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function(\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || (logger_ === true || logger_ === false),\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) SessionStorage.set('logging_enabled', true);\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} var_args\n */\nexport const log = function(...var_args: string[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true)\n      enableLogging(true);\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, var_args);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function(\n  prefix: string\n): (...var_args: any[]) => void {\n  return function(...var_args: any[]) {\n    log(prefix, ...var_args);\n  };\n};\n\n/**\n * @param {...string} var_args\n */\nexport const error = function(...var_args: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...var_args);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} var_args\n */\nexport const fatal = function(...var_args: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...var_args)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} var_args\n */\nexport const warn = function(...var_args: any[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...var_args);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function(methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function(data: any): boolean {\n  return (\n    typeof data === 'number' &&\n    (data != data || // NaN\n      data == Number.POSITIVE_INFINITY ||\n      data == Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function(fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    let wrappedFn = function() {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n    } else if ((document as any).attachEvent) {\n      // IE.\n      (document as any).attachEvent('onreadystatechange', function() {\n        if (document.readyState === 'complete') wrappedFn();\n      });\n      // fallback to onload.\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function(\n  key: string,\n  obj: { [k: string]: any }\n): any {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function(obj: any): string {\n  if (typeof obj !== 'object' || obj === null) return stringify(obj);\n\n  const keys = [];\n  for (let k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) key += ',';\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function(\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: any) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function(\n  callback: (a: any) => void,\n  context?: object | null\n): Function {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function(v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  let bias = (1 << (ebits - 1)) - 1,\n    s,\n    e,\n    f,\n    ln,\n    i,\n    bits,\n    str;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) hexByte = '0' + hexByte;\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function(): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function(): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function(code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code == 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code == 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function(str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function(fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function() {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} var_args Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function(\n  callback?: Function | null,\n  ...var_args: any[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(function() {\n      callback(...var_args);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function(): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function(\n  object: Object,\n  name: string,\n  fnGet: () => any\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function(\n  fn: Function,\n  time: number\n): number | Object {\n  const timeout: number | Object = setTimeout(fn, time);\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length)\n      return this.pieces_[this.pieces_.length - 1];\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '')\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++)\n      pieces.push(this.pieces_[i]);\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++)\n      pieces.push(this.pieces_[i]);\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) pieces.push(childPieces[i]);\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) return cmp;\n    }\n    if (leftKeys.length === rightKeys.length) return 0;\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length == 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public secure: boolean,\n    public namespace: string,\n    public webSocketOnly: boolean,\n    public persistenceKey: string = ''\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return this.host !== this.internalHost || this.isCustomHost();\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  let results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\n/**\n *\n * @param {!string} dataURL\n * @return {{repoInfo: !RepoInfo, path: !Path}}\n */\nexport const parseRepoInfo = function(\n  dataURL: string\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseURL(dataURL),\n    namespace = parsedUrl.subdomain;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace == 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\n */\nexport const parseURL = function(\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    let queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = dataURL.length;\n    }\n\n    const parts = host.split('.');\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase();\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    }\n    // Support `ns` query param if subdomain not already set\n    if (subdomain === '' && 'ns' in queryParams) {\n      subdomain = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport { contains, safeGet } from '@firebase/util';\nimport { isInvalidJSONNumber, each } from './util';\nimport { errorPrefix as errorPrefixFxn } from '@firebase/util';\nimport { stringLength } from '@firebase/util';\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function(key: any): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function(pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function(pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function(priority: any): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority && typeof priority === 'object' && contains(priority, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: any,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) return;\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function(\n  errorPrefix: string,\n  data: any,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, function(key: string, value: any) {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function(\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: any,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) return;\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, function(key: string, value: any) {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function(\n  fnName: string,\n  argumentNumber: number,\n  priority: any,\n  optional: boolean\n) {\n  if (optional && priority === undefined) return;\n  if (isInvalidJSONNumber(priority))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n};\n\nexport const validateEventType = function(\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) return;\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function(\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) return;\n  if (!isValidKey(key))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n};\n\nexport const validatePathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) return;\n\n  if (!isValidPathString(pathString))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n};\n\nexport const validateRootPathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function(fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function(\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function(\n  fnName: string,\n  argumentNumber: number,\n  cred: any,\n  optional: boolean\n) {\n  if (optional && cred === undefined) return;\n  if (!(typeof cred === 'string'))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n};\n\nexport const validateBoolean = function(\n  fnName: string,\n  argumentNumber: number,\n  bool: any,\n  optional: boolean\n) {\n  if (optional && bool === undefined) return;\n  if (typeof bool !== 'boolean')\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n};\n\nexport const validateString = function(\n  fnName: string,\n  argumentNumber: number,\n  string: any,\n  optional: boolean\n) {\n  if (optional && string === undefined) return;\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: any,\n  optional: boolean\n) {\n  if (optional && obj === undefined) return;\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: any,\n  key: string,\n  optional: boolean,\n  opt_type?: string\n) {\n  const objectContainsKey =\n    obj && typeof obj === 'object' && contains(obj, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (opt_type) {\n    const val = safeGet(obj, key);\n    if (\n      (opt_type === 'number' && !(typeof val === 'number')) ||\n      (opt_type === 'string' && !(typeof val === 'string')) ||\n      (opt_type === 'boolean' && !(typeof val === 'boolean')) ||\n      (opt_type === 'function' && !(typeof val === 'function')) ||\n      (opt_type === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            opt_type +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            opt_type +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\nimport { Deferred } from '@firebase/util';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: any, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: any,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function() {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function(now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: String,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): any;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: any, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\nimport { contains } from '@firebase/util';\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function(priority: string | number): string {\n  if (typeof priority === 'number')\n    return 'number:' + doubleToIEEE754String(priority);\n  else return 'string:' + priority;\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function(priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' &&\n          contains(val as { [key: string]: unknown }, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | object,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: String, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): any {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): Object {\n    if (exportFormat && !this.getPriority().isEmpty())\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    else return this.getValue();\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): object | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: any) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: any) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: any, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: (LLRBNode<K, V> | LLRBEmptyNode<K, V>)[] = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) cmp *= -1;\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_)\n      result = this.resultGenerator_(node.key, node.value);\n    else result = { key: node.key, value: node.value } as any;\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as any;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let cmp, n;\n    n = this;\n    cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) n = n.rotateRight_();\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n = this as any;\n    if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();\n    if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();\n    if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    let blackDepth;\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) node = node.right;\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode } from '../util/SortedMap';\nimport { SortedMap } from '../util/SortedMap';\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function<K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function(\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length == 0) {\n      return null;\n    } else if (length == 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as any) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as any) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as any) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as any) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function(base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function(chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as any) as K);\n      attachPennant(\n        new LLRBNode(key, (namedNode.node as any) as V, color, null, childTree)\n      );\n    };\n\n    const attachPennant = function(pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { buildChildSet } from './childSet';\nimport { contains, map, safeGet } from '@firebase/util';\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) throw new Error('No index defined for ' + indexKey);\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name != namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(this.indexes_, function(\n      indexedChildren: SortedMap<NamedNode, Node>\n    ) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(\n            new NamedNode(namedNode.name, existingSnap)\n          );\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) return this;\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap, newPriority;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) return null;\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function(key: string, childNode: Node) {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      for (let key in obj) array[(key as any) as number] = obj[key];\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n\n      this.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        const childHash = childNode.hash();\n        if (childHash !== '') toHash += ':' + key + ':' + childHash;\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(function(wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function(key) {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: any | null,\n  priority: string | number | null = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | object;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj: { [k: string]: any } = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length == 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: any) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty())\n            node = node.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): any {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): any {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): any {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) return false;\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) return false;\n    else return !this.node_.isEmpty();\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType:\n      | 'value'\n      | ' child_added'\n      | ' child_changed'\n      | ' child_moved'\n      | ' child_removed',\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event } from './Event';\nimport { contains } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: Object | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function() {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_:\n      | ({ [k: string]: (d: DataSnapshot, s?: string | null) => void })\n      | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: Object\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as any,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index as any),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function() {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\nimport {\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\nimport { Deferred } from '@firebase/util';\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): any;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName != MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName != MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => any) | Object | null,\n    context?: Object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: Object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => any) | null,\n    context: Object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: Object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | Object | null,\n    context?: Object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) ret.cancel.bind(ret.context)(err);\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): Object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | Object | null,\n    context?: Object | null\n  ): { cancel: ((a: Error) => void) | null; context: Object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: Object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, function(key, tree) {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => any) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function(\n  values: {\n    [k: string]: any;\n  } | null\n): { [k: string]: any } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredValue = function(\n  value: { [k: string]: any } | string | number | boolean,\n  serverValues: { [k: string]: any }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  } else {\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function(\n  tree: SparseSnapshotTree,\n  serverValues: Object\n): SparseSnapshotTree {\n  const resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), function(path, node) {\n    resolvedTree.remember(\n      path,\n      resolveDeferredValueSnapshot(node, serverValues)\n    );\n  });\n  return resolvedTree;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function(\n  node: Node,\n  serverValues: Object\n): Node {\n  const rawPri = node.getPriority().val() as\n    | object\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredValue(rawPri, serverValues);\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredValue(leafNode.getValue(), serverValues);\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {\n      const newChildNode = resolveDeferredValueSnapshot(\n        childNode,\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function(queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /**@inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare, each } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(function(\n      childKey: string,\n      childTree: ImmutableTree<T>\n    ) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal(function(childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /**@inheritDoc */ public source: OperationSource,\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() == newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type == Change.CHILD_ADDED ||\n        type == Change.CHILD_CHANGED ||\n        type == Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childRemovedChange(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childAddedChange(childKey, change.snapshotNode)\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.oldSnap\n          )\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache\n        .getEventCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\n        !eventSnap\n          .getNode()\n          .getPriority()\n          .equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey == '.priority') {\n          assert(\n            changePath.getLength() == 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey == '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach(function(relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function(name, node) {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach(function(mergePath, value) {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (\n          viewCache\n            .getEventCache()\n            .getNode()\n            .hasChild(childKey)\n        ) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(function(registration) {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed: removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (\n        !view\n          .getQuery()\n          .getQueryParams()\n          .loadsAllData()\n      ) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (\n        view\n          .getQuery()\n          .getQueryParams()\n          .loadsAllData()\n      ) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    each(updates, function(childKey: string, node: Node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param path The path to check for\n   * @return Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param path The path to get a complete write\n   * @return The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return A list of all complete children.\n   */\n  getCompleteChildren(): NamedNode[] {\n    const children: NamedNode[] = [];\n    let node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(PRIORITY_INDEX, function(\n          childName,\n          childNode\n        ) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function(childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param node The node to apply this CompoundWrite to\n   * @return The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  }\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal(function(childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { safeGet } from '@firebase/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(function(s) {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function(write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function(\n          childName,\n          childSnap\n        ) {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function(\n        childName,\n        childNode\n      ) {\n        const node = merge\n          .childCompoundWrite(new Path(childName))\n          .apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      });\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(function(namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function(namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          writeRecord.path.child(childName).contains(path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode, each } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: any) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        each(write.children, function(pathString: string, node: Node) {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function(childName, childSyncPoint) {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(function(query) {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(path, function(\n        relativePath,\n        parentSyncPoint\n      ) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n   * it, but as this is only used by transaction code, that should always be the case anyways.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(\n    path: Path,\n    writeIdsToExclude?: number[]\n  ): Node | null {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(path, function(\n      pathSoFar,\n      syncPoint\n    ) {\n      const relativePath = Path.relativePath(pathSoFar, path);\n      const serverCache = syncPoint.getCompleteServerCache(relativePath);\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, function(_key: string, childViews: View[]) {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(function(\n        relativePath,\n        maybeChildSyncPoint,\n        childMap\n      ) {\n        if (\n          !relativePath.isEmpty() &&\n          maybeChildSyncPoint &&\n          maybeChildSyncPoint.hasCompleteView()\n        ) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: Query[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n            );\n          }\n          each(childMap, function(_key: string, childQueries: Query[]) {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      });\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: any): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport { log, warn } from './util/util';\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class AuthTokenProvider {\n  /**\n   * @param {!FirebaseApp} app_\n   */\n  constructor(private app_: FirebaseApp) {}\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return this.app_['INTERNAL']['getToken'](forceRefresh).then(\n      null,\n      // .catch\n      function(error) {\n        // TODO: Need to figure out all the cases this is raised and whether\n        // this makes sense.\n        if (error && error.code === 'auth/token-not-initialized') {\n          log('Got auth/token-not-initialized error.  Treating as null token.');\n          return null;\n        } else {\n          return Promise.reject(error);\n        }\n      }\n    );\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    this.app_['INTERNAL']['addAuthTokenListener'](listener);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void) {\n    this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy } from '@firebase/util';\nimport { contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) this.counters_[name] = 0;\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: any } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: any[]): void;\n      context: any;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: Array<string>) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): any[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} var_args\n   */\n  protected trigger(eventType: string, ...var_args: any[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(function(et) {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: any;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\nimport { isMobileCordova } from '@firebase/util';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: any[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: Object) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: any[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify } from '@firebase/util';\nimport { isNodeSdk } from '@firebase/util';\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: any[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param {string} connId An identifier for this connection, used for logging\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: Object) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) return;\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) return; // we closed the connection.\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command == FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1;\n            this.password = arg2;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN, data);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier)\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (\n        !isNodeSdk() &&\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n    // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n    return (\n      BrowserPollConnection.forceAllow_ ||\n      (!BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp() &&\n        !isNodeSdk())\n    );\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: Object) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) return;\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: any) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: { seg: number; ts: number; d: any }[] = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: any[]) => void;\n  onMessageCB: (...args: any[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: any[]) => void,\n    onMessageCB: (...args: any[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      (window as any)[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      (window as any)[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      (iframe as any).doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      (iframe as any).doc = iframe.contentWindow.document; // Internet Explorer\n    } else if ((iframe as any).document) {\n      (iframe as any).doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    if (isNodeSdk() && this.myID) {\n      const urlParams: { [k: string]: string } = {};\n      urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      const theURL = this.urlFn(urlParams);\n      (FirebaseIFrameScriptHolder as any).nodeRestRequest(theURL);\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: any) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) return;\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          newScript.onload = (newScript as any).onreadystatechange = function() {\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\n\ndeclare const MozWebSocket: any;\n\nimport { assert, CONSTANTS as ENV_CONSTANTS } from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { jsonEval, stringify } from '@firebase/util';\nimport { isNodeSdk } from '@firebase/util';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: Object) => void;\n  mySock: any | null;\n  private log_: (...a: any[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n\n  /**\n   * @param {string} connId identifier for this transport\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: Object) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = ENV_CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') == 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = (m: object) => {\n      this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = (e: any) => {\n      this.log_('WebSocket error.  Closing connection.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: Boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length == this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: any }) {\n    if (this.mySock === null) return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: Object) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn, each } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable)\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: any[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: any[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param {!string} id - an id for this connection\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private onMessage_: (a: Object) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeout_ms = conn['healthyTimeout'] || 0;\n    if (healthyTimeout_ms > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n      }, Math.floor(healthyTimeout_ms)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: object) => {\n      if (this.state_ != RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: any }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: object) {\n    const layer: string = requireKey('t', parsedData);\n    const data: any = requireKey('d', parsedData);\n    if (layer == 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer == 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: any }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData);\n    const data: any = requireKey('d', parsedData);\n    if (layer == 'c') {\n      this.onControl_(data);\n    } else if (layer == 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: any) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: any }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ == RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: any }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, isEmpty, safeGet, CONSTANTS } from '@firebase/util';\nimport { stringify } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { isAdmin, isValidFormat } from '@firebase/util';\nimport { Connection } from '../realtime/Connection';\nimport { isMobileCordova, isReactNative, isNodeSdk } from '@firebase/util';\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: any): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: any;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: Object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: Object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: any) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: Object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: any,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: any) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: Object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: any,\n    onResponse?: (a: any) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: any } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: any }) => {\n      const payload: any = message[/*data*/ 'd'];\n      const status: string = message[/*status*/ 's'];\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: any, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      const warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' +\n          query\n            .getQueryParams()\n            .getIndex()\n            .toString() +\n          '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: any } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, (res: { [k: string]: any }) => {\n        const status: string = res[/*status*/ 's'];\n        const data: string = res[/*data*/ 'd'] || 'error';\n\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: Object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: any } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: any }) => {\n      if (onComplete) {\n        setTimeout(function() {\n          onComplete(response[/*status*/ 's'], response[/* data */ 'd']);\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: any } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) request[/*hash*/ 'h'] = hash;\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: any }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete)\n        onComplete(message[/*status*/ 's'], message[/* data */ 'd']);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: any }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: any }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: any }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd')\n      this.onDataUpdate_(\n        body[/*path*/ 'p'],\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t']\n      );\n    else if (action === 'm')\n      this.onDataUpdate_(\n        body[/*path*/ 'p'],\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t']\n      );\n    else if (action === 'c')\n      this.onListenRevoked_(body[/*path*/ 'p'], body[/*query*/ 'q']);\n    else if (action === 'ac')\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'],\n        body[/* explanation */ 'd']\n      );\n    else if (action === 'sd') this.onSecurityDebugPacket_(body);\n    else\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function() {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function(msg: Object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(function(result) {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ function(reason) {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, function(error) {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (CONSTANTS.NODE_ADMIN) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) put.onComplete('disconnect');\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];\n  }\n\n  private onListenRevoked_(pathString: string, query?: any[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) listen.onComplete('permission_denied');\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: any }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) this.sendPut_(i);\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\nimport { jsonEval } from '@firebase/util';\nimport { safeGet } from '@firebase/util';\nimport { querystring } from '@firebase/util';\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: any }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: any[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: Object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: any,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error == 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: any } = {},\n    callback: ((a: number | null, b?: any) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): object {\n  const obj: { [key: string]: unknown } = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify } from '@firebase/util';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\nimport { map, isEmpty } from '@firebase/util';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactions_init_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: any) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp\n  ) {\n    const authTokenProvider = new AuthTokenProvider(app);\n\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactions_init_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Object {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: any,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(data as { [k: string]: any }, (raw: any) =>\n          nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(data as { [k: string]: any }, (raw: any) =>\n        nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: any) => any) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: Object) {\n    each(updates, (value: any, key: string) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: any) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: any,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: any },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: any) => {\n      empty = false;\n      const newNodeUnresolved = nodeFromJSON(changedValue);\n      changedChildren[changedKey] = resolveDeferredValueSnapshot(\n        newNodeUnresolved,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = resolveDeferredValueTree(\n      this.onDisconnect_,\n      serverValues\n    );\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: any,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: any,\n    priority: any,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: any },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: any) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') return;\n\n    let stats: { [k: string]: any };\n    if (showDelta) {\n      if (!this.statsListener_)\n        this.statsListener_ = new StatsListener(this.stats_);\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: any) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...var_args: any[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...var_args);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(function() {\n        if (status == 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) message += ': ' + errorReason;\n\n          const error = new Error(message);\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          let next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          let inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() == this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { stringify } from '@firebase/util';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: any | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: any | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): any {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): any {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): Object {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: any } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: any } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { Deferred } from '@firebase/util';\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  public then: (a?: any) => Promise<any>;\n  public catch: (a?: Error) => Promise<any>;\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) return null;\n    else return this.path.getBack();\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null)\n        validateRootPathString('Reference.child', 1, pathString, false);\n      else validatePathString('Reference.child', 1, pathString, false);\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref = this as any;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(newVal: any, onComplete?: (a: Error | null) => void): Promise<any> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: Object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: any,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys')\n      throw 'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<any> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: any) => any,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys')\n      throw 'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n\n    if (applyLocally === undefined) applyLocally = true;\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function(\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: any, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { contains, safeGet } from '@firebase/util';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next;\n    while ((next = path.getFront()) !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) action(this);\n\n    this.forEachChild(function(child) {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) action(this);\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(function(child) {\n      if (child.getValue() !== null) action(child);\n      else child.forEachImmediateDescendantWithValue(action);\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) this.parent_.updateChild_(this.name_, this);\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { contains, safeGet } from '@firebase/util';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ntype Transaction = {\n  path: Path;\n  update: (a: any) => any;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n};\n\n/**\n * Setup the transaction data structures\n * @private\n */\n(Repo.prototype as any).transactions_init_ = function() {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: any) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function(\n  path: Path,\n  transactionUpdate: (a: any) => any,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function() {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function() {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n(Repo.prototype as any).getLatestState_ = function(\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n(Repo.prototype as any).sendReadyTransactions_ = function(\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n(Repo.prototype as any).sendTransactionQueue_ = function(\n  path: Path,\n  queue: Array<Transaction>\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(function(txn) {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /**@type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            else queue[i].status = TransactionStatus.RUN;\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n(Repo.prototype as any).rerunTransactions_ = function(changedPath: Path): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n(Repo.prototype as any).rerunTransactionQueue_ = function(\n  queue: Array<Transaction>,\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(function(q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(function(q) {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function(unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n(Repo.prototype as any).getAncestorTransactionNode_ = function(\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  while (\n    (front = path.getFront()) !== null &&\n    transactionNode.getValue() === null\n  ) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n(Repo.prototype as any).buildTransactionQueue_ = function(\n  transactionNode: Tree<Transaction[]>\n): Array<Transaction> {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort(function(a, b) {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function(\n  node: Tree<Transaction[]>,\n  queue: Array<Transaction>\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n(Repo.prototype as any).abortTransactions_ = function(path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n(Repo.prototype as any).abortTransactionsOnNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo, parseURL } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(app: FirebaseApp, url?: string): Database {\n    let dbUrl: string | undefined = url || app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.initializeApp().'\n      );\n    }\n\n    const parsedUrl = parseRepoInfo(dbUrl);\n    const repoInfo = parsedUrl.repoInfo;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    }\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   **/\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== ((this.repo_ as any).repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          ((this.repo_ as any).repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    (this.database as any).checkDeleted_('delete');\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n\n    (this.database as any).repo_ = null;\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function() {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function(): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function(\n  ref: Reference,\n  callback: (a: Object) => void\n) {\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function(ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function(ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function(ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function(\n  ref: Reference,\n  callback: ((a: string, b: any) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n(PersistentConnection.prototype as any).simpleListen = function(\n  pathString: string,\n  onComplete: (a: any) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n(PersistentConnection.prototype as any).echo = function(\n  data: any,\n  onEcho: (a: any) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function(newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function(\n    pathString,\n    data,\n    opt_onComplete,\n    opt_hash\n  ) {\n    if (opt_hash !== undefined) {\n      opt_hash = newHash();\n    }\n    oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n  };\n  return function() {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function(query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function(forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\nimport { setSDKVersion } from './src/core/version';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerService(\n    'database',\n    (app, unused, url) => RepoManager.getInstance().databaseFromApp(app, url),\n    // firebase.database namespace properties\n    {\n      Reference,\n      Query,\n      Database,\n      DataSnapshot,\n      enableLogging,\n      INTERNAL,\n      ServerValue,\n      TEST_ACCESS\n    },\n    null,\n    true\n  );\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","stringToByteArray","str","out","c","charCodeAt","base64Decode","base64","decodeString","console","CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assert","assertion","message","assertionError","Error","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","deepCopy","deepExtend","target","source","Date","dateValue","getTime","undefined","prop","Deferred","callback","_this","reject","resolve","promise","catch","Promise","isMobileCordova","window","test","navigator","isNodeSdk","tslib_1.__extends","code","_super","FirebaseError","captureStackTrace","ErrorFactory","_i","data","customData","fullCode","service","template","errors","replace","PATTERN","key","toString","replaceTemplate","fullMessage","serviceName","_b","keys","_a","slice","warn","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","contains","obj","safeGet","isEmpty","map","fn","contextObj","res","Sha1","chain_","inbuf_","total_","buf","offset","W","W_","k","a","lengthMinusBlock","blockSize","buf_","inbuf","compress_","digest","totalBits","update","pad_","j","reset","validateArgCount","fnName","minCount","maxCount","argCount","argError","errorPrefix","argumentNumber","optional","argName","validateCallback","validateContextObject","context","stringLength","LogLevel","defaultLogHandler","instance","logType","args","logLevel","now","toISOString","DEBUG","VERBOSE","log","name","INFO","info","WARN","ERROR","defaultLogLevel","Logger","_logLevel","val","_logHandler","DOMStorageWrapper","domStorage_","removeItem","prefixedName_","setItem","storedVal","getItem","prefix_","MemoryStorage","cache_","createStoragefor","domStorageName","domStorage","sha1","utf8Bytes","high","sha1Bytes","enableLogging","logger_","persistent","logClient","logger","bind","SessionStorage","set","remove","var_args","firstLog_","get","buildLogMessage_","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","stringCompare","requireKey","splitStringBySize","segsize","len","dataSegs","substring","id","PersistentStorage","LUIDGenerator","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","ObjectToUniqueKey","sort","each","doubleToIEEE754String","ln","bits","Infinity","Math","abs","pow","min","floor","LN2","round","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","INTEGER_REGEXP_","RegExp","intVal","Path","pieceNum_","pieces_","pieceNum","pathString","encodeURIComponent","begin","pieces","childPathObj","childPieces","outerPath","innerPath","outer","getFront","inner","relativePath","popFront","left","right","leftKeys","rightKeys","cmp","other","getLength","pathOrString","copyTo","ValidationPath","child","parts_","byteLength_","checkValid_","last","MAX_PATH_LENGTH_BYTES","errorPrefix_","MAX_PATH_DEPTH","toErrorString","path","max","FORGE_DOMAIN","WEBSOCKET","LONG_POLLING","RepoInfo","host","internalHost","isCustomHost","domain","newHost","isCacheableHost","type","params","connURL","secure","needsQueryParam","namespace","pairs","toURLString","persistenceKey","webSocketOnly","indexOf","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","location","protocol","scheme","repoInfo","isValidKey","INVALID_KEY_REGEX_","isValidPathString","INVALID_PATH_REGEX_","isValidPriority","priority","validateFirebaseDataArg","validateFirebaseData","errorPrefixFxn","validateFirebaseMergeDataArg","mergePaths","curPath","getBack","comparePaths","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryParams","queryString","results","tslib_1.__values","segment","kv","decodeQuery","MAX_LEAF_SIZE_","path_","hasDotValue_1","hasActualChild_1","OnDisconnect","onComplete","deferred","repo_","onDisconnectCancel","wrapCallback","onDisconnectSet","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","PUSH_CHARS","lastPushTime","lastRandChars","nextPushId","duplicateTime","timeStampChars","random","NamedNode","node","__EMPTY_NODE","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","KeyIndex","indexValue","MAX_NODE","KEY_INDEX","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON","LeafNode","priorityNode_","newPriorityNode","value_","childName","EMPTY_NODE","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","index","action","exportFormat",".value","getValue",".priority","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","SortedMapIterator","nodeStack_","result","resultGenerator_","isReverse_","startKey","comparator","LLRBNode","color","count","inorderTraversal","reverseTraversal","min_","maxKey","copy","insert","fixUp_","SortedMap","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","RED","nr","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","LOG_2","Base12Num","bits_","current_","num","mask","_defaultIndexMap","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","fallbackObject","IndexMap","indexKey","sortedMap","indexes_","indexDefinition","indexSet_","existingChildren","newIndex","sawIndexedValue","iter","getIterator","Wrap","getNext","isDefinedOn","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","Default","children_","indexMap_","getImmediateChild","getChild","newPriority","newIndexMap","removeFromIndexes","addToIndexes","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","toHash_1","childHash","hash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","json","node_1","childData","children_1","childrenHavePriority_1","childSet","sortedChildSet","VALUE_INDEX","ValueIndex","valueNode","PathIndex","snap","indexPath_","aChild","extractChild","bChild","DataSnapshot","node_","exportVal","childPathString","childPath","childRef","ref_","index_","getKey","numChildren","getRef","DataEvent","ref","getParent","eventRegistration","getEventRunner","getPath","prevName","CancelEvent","ValueEventRegistration","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","context_","getEventType","cancelCallback_","cancelCB_1","cb_1","callback_","__referenceConstructor","ChildEventRegistration","eventToCheck","callbacks_","cancelCB_2","cb_2","otherKeys","thisKeys","otherCount","every","otherKey","thisKey","Query","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","hasLimit","hasAnchoredLimit","orderByCalled_","queryParams_","repo","cancelCallbackOrContext","ret","getCancelAndContextArgs_","onValueEvent","cancel","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","removeEventCallbackForQuery","userCallback","failureCallbackOrContext","firstCall","onceCallback","off","on","err","limit","limitToFirst","limitToLast","validateNoPreviousOrderByCall_","parsedPath","newParams","orderBy","validateQueryEndpoints_","startAt","validateLimit_","endAt","toUrlEncodedString","getQueryObject","queryObject","sameRepo","samePath","sameQueryIdentifier","queryIdentifier","cancelOrContext","SparseSnapshotTree","children","size","childKey","has","find","clear","remember","self_1","tree","forget","delete","prefixPath","func","forEachTree","forEach","Map","resolveDeferredValue","serverValues","OperationType","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","OperationSource","queryId","fromUser","fromServer","tagged","emptyChildrenSingleton","AckUserWrite","affectedTree","subtree","Empty","revert","ACK_USER_WRITE","User","ImmutableTree","childSnap","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","toSet","newChild","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","nextChild","foreachOnPath_","currentRelativePath","foreach_","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","hasChild","ViewCache","eventSnap","complete","filtered","serverCache_","serverSnap","eventCache_","getNode","Change","VALUE","CHILD_ADDED","CHILD_REMOVED","newSnapshot","oldSnapshot","CHILD_CHANGED","CHILD_MOVED","oldSnap","IndexedFilter","affectedPath","optChangeAccumulator","isIndexed","oldChild","trackChildChange","childRemovedChange","childAddedChange","childChangedChange","withIndex","newSnap","ChildChangeAccumulator","oldChange","changeMap","oldType","from","values","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","WriteTreeCompleteChildSource","viewCache_","getEventCache","serverNode","optCompleteServerCache_","getServerCache","writes_","calcCompleteChild","completeServerData","getCompleteServerSnap","nodes","calcIndexedSlice","viewCache","changes","ViewProcessor","filter_","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","isFiltered","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","getChanges","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","getCompleteEventSnap","valueChange","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","updateFullNode","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","updateEventSnap","filtersNodes","changedSnap","newServerCache","oldServerSnap","serverFilter","getIndexedFilter","newServerNode","isCompleteForPath","updateServerSnap","generateEventCacheAfterServerEvent_","getCompleteChild","parent","newEventSnap","changedChildren","curViewCache","foreach","writePath","cacheHasChild_","viewMergeTree","serverChild","applyMerge_","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","eventCache","eventRegistrations","events","moves","indexedValueChanged","childMovedChange","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","query_","getPredecessorChildName","aWrapped","bWrapped","View","cache","loadsAllData","eventRegistrations_","cancelError","cancelEvents","path_1","maybeEvent","createCancelEvent","remaining","existing","matches","hasAnyCallback","processor_","applyOperation","assertIndexed","generateEventsForChanges_","initialChanges","eventGenerator_","generateEventsForChanges","initialViewCache","indexFilter","getNodeFilter","initialServerCache","initialEventCache","SyncPoint","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","addEventRegistration","getInitialEvents","removed","hadCompleteView","hasCompleteView","entries","_d","viewQueryId","removeEventRegistration","getQuery","getCompleteServerCache","getCompleteView","viewForQuery","CompoundWrite","rootmost","writeTree_","findRootMostValueAndPath","rootMostPath","updates","newWrite","addWrite","getCompleteNode","shadowingNode","applySubtreeWrite","writeTree","priorityWrite_1","WriteTree","WriteTreeRef","writeId","visible","lastWriteId_","allWrites_","visibleWrites_","addWrites","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","removeWrite","treePath","writeIdsToExclude","includeHiddenWrites","childCompoundWrite","hasCompleteWrite","mergeAtPath","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","getCompleteChildren","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","newData","pendingWriteTree_","addOverwrite","applyOperationToSyncPoints_","addMerge","changeTree","fromObject","getWrite","affectedTree_1","Server","tag","queryKey","queryKeyForTag_","parseQueryKey_","queryPath","forServerTaggedQuery","applyTaggedOperation_","foundAncestorDefaultView","syncPointTree_","foreachOnPath","pathToSyncPoint","sp","syncPoint","foreachChild","childSyncPoint","viewAlreadyExists","viewExistsForQuery","makeQueryKey_","queryToTagMap","getNextQueryTag_","tagToQueryMap","childWrites","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","listenProvider_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","fold","maybeChildSyncPoint","childMap","views_1","getQueryViews","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","applyTaggedListenComplete","applyListenComplete","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","SnapshotHolder","rootNode_","newSnapshotNode","AuthTokenProvider","forceRefresh","app_","then","errorMessage","options","StatsCollection","amount","counters_","StatsManager","hashString","collections_","creatorFunction","reporters_","StatsListener","newStats","collection_","delta","last_","stat","StatsReporter","statsToReport_","stats","statsListener_","reportedStats","haveStatsToReport","server_","reportStats","reportStats_","collection","EventQueue","eventDataList","currList","eventPath","eventLists_","EventList","add","queueEvents","raiseQueuedEventsMatchingPredicate_","changedPath","recursionDepth_","sentAll","eventList","raise","events_","eventFn","EventEmitter","listeners_","listeners","validateEventType_","getInitialEvent","allowedEvents_","et","VisibilityMonitor","visible_","hidden","visibilityChange","document","addEventListener","trigger","OnlineMonitor","online_","PacketReceiver","responseNum","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","this_1","onMessage_","BrowserPollConnection","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","log_","onClosed_","readyState","called_1","wrappedFn_1","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlFn","urlParams","start","uniqueCallbackIdentifier","transportSessionId","lastSessionId","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","Windows","UI","close","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","stats_","incrementCounter","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","src","style","display","appendChild","bytesReceived","connId","getCollection","connectionURL","iframe","contentWindow","contentDocument","doc","alive","myIFrame","innerHTML","myID","myPW","newRequest_","outstandingRequests","pendingSegs","currentSerial","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","commandCB","onMessageCB","Set","createIFrame_","script","iframeContents","open","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","device","ENV_CONSTANTS","headers","User-Agent","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidMatch","match","parseFloat","isInMemoryStorage","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","keepaliveTimer","clearInterval","setInterval","send","connectionURL_","TransportManager","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","transport","initTransports_","Connection","conn","transportManager_","initialTransport","conn_","nextTransportId_","repoInfo_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","markConnectionHealthy","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","updateHost","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","start_","onReady_","onKill_","ServerActions","PersistentConnection","onResponse","curReqNum","requestNumber_","connected_","realtime_","sendRequest","requestCBHash_","currentHashFn","listens","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","authToken_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","maxReconnectDelay_","token_1","authMethod","isValidFormat","requestData","cred","authOverride_","invalidAuthTokenCount_","onAuthRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","request","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","errorReason","reqNum","onDataPush_","onDataUpdate_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","onConnectStatus_","establishConnectionTimer_","establishConnection_","reconnectDelay_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","onRealtimeDisconnect_","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","forceTokenRefresh_","authTokenProvider_","getToken","accessToken","interrupt","interruptReasons_","onServerInfoUpdate_","serverTimeOffset","put","q","listen","normalizedPathString","statusCode","explanation","notifyForInvalidToken","securityDebugCallback_","_c","_e","getInstance","currentlyOnline","nextPersistentConnectionId_","onVisible_","onOnline_","ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","querystringParams","arrayVal","querystring","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","Repo","infoData_","generateWithValues","serverTime","isMerge","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","serverSyncTree_","applyTaggedQueryMerge","taggedSnap","applyTaggedQueryOverwrite","applyServerMerge","applyServerOverwrite","rerunTransactions_","eventQueue_","raiseEventsForChangedPath","connectStatus","updateInfo_","runOnDisconnectEvents_","updateSnapshot","infoSyncTree_","nextWriteId_","newVal","generateServerValues","newNodeUnresolved","getNextWriteId_","applyUserOverwrite","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","applyUserMerge","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","onDisconnectPut","onDisconnectMerge","raiseEventsAtPath","persistentConnection_","resume","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","metric","statsReporter_","includeStat","__database","Database","forceRestClient","app","authTokenProvider","search","authOverride","addTokenChangeListener","refreshAuthToken","getOrCreateReporter","transactions_init_","infoEvents","unlisten","RangedFilter","startPost_","endPost_","getStartPost","getEndPost","indexedFilter_","self","startName","makePost","endName","getStartPost_","getEndPost_","LimitedFilter","rangedFilter_","limit_","fullLimitUpdateChild_","reverse_","hasNext","getReverseIterator","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","inRange","oldChildSnap","getChildAfterChild","compareNext","getLimit","isViewFromLeft","QueryParams","startSet_","viewFrom_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","newLimit","copy_","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","Reference","validateRootPathString","parentPath","database","setWithPriority","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","thennablePushRef","pushRef","databaseProp","getRoot","DEFAULT","TransactionStatus","Tree","pathObj","TreeNode","updateParents_","childCount","hasChildren","includeSelf","childrenFirst","forEachDescendant","forEachImmediateDescendantWithValue","parent_","name_","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","transaction","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","subTree","nodeQueue","setValue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","forEachAncestor","abortTransactionsOnNode_","lastSent","_staticInstance","DATABASE_URL_OPTION","RepoManager","appName","repos_","dbUrl","dbEmulatorHost","createRepo","appRepos","useRestClient_","checkDeleted_","refFromURL","apiName","parsedURL","TIMESTAMP",".sv","INTERNAL","DatabaseInternals","_arguments","P","generator","fulfilled","rejected","deleteRepo","forceDisallow","forceAllow","statsIncrementCounter","interceptServerData_","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","opt_onComplete","opt_hash","ServerValue","firebase","registerService","unused","databaseFromApp","TEST_ACCESS"],"mappings":"4RAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAuCzB,SAASI,EAAYC,EAASC,GACjC,IAAsGC,EAAGC,EAAGZ,EAAGa,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPhB,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOiB,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEM,KAAMC,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BV,EAAEU,OAAOC,UAAY,WAAa,OAAO9B,OAAUmB,EACvJ,SAASO,EAAKjB,GAAK,OAAO,SAAUsB,GAAK,OACzC,SAAcC,GACV,GAAIf,EAAG,MAAM,IAAIgB,UAAU,mCAC3B,KAAOb,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAMZ,EAAY,EAAR0B,EAAG,GAASd,EAAU,OAAIc,EAAG,GAAKd,EAAS,SAAOZ,EAAIY,EAAU,SAAMZ,EAAEM,KAAKM,GAAI,GAAKA,EAAEO,SAAWnB,EAAIA,EAAEM,KAAKM,EAAGc,EAAG,KAAKE,KAAM,OAAO5B,EAE3J,OADIY,EAAI,EAAGZ,IAAG0B,EAAK,CAAS,EAARA,EAAG,GAAQ1B,EAAE6B,QACzBH,EAAG,IACP,KAAK,EAAG,KAAK,EAAG1B,EAAI0B,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEc,MAAOH,EAAG,GAAIE,MAAM,GAChD,KAAK,EAAGd,EAAEC,QAASH,EAAIc,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIY,MAAOhB,EAAEG,KAAKa,MAAO,SACxC,QACI,KAAkB9B,EAAe,GAA3BA,EAAIc,EAAEG,MAAYZ,QAAcL,EAAEA,EAAEK,OAAS,MAAkB,IAAVqB,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAc1B,GAAM0B,EAAG,GAAK1B,EAAE,IAAM0B,EAAG,GAAK1B,EAAE,IAAM,CAAEc,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQf,EAAE,GAAI,CAAEc,EAAEC,MAAQf,EAAE,GAAIA,EAAI0B,EAAI,MAC7D,GAAI1B,GAAKc,EAAEC,MAAQf,EAAE,GAAI,CAAEc,EAAEC,MAAQf,EAAE,GAAIc,EAAEI,IAAIa,KAAKL,GAAK,MACvD1B,EAAE,IAAIc,EAAEI,IAAIY,MAChBhB,EAAEG,KAAKa,MAAO,SAEtBJ,EAAKhB,EAAKJ,KAAKG,EAASK,GAC1B,MAAOkB,GAAKN,EAAK,CAAC,EAAGM,GAAIpB,EAAI,UAAeD,EAAIX,EAAI,EACtD,GAAY,EAAR0B,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEG,MAAOH,EAAG,GAAKA,EAAG,QAAK,EAAQE,MAAM,GArB9BK,CAAK,CAAC9B,EAAGsB,MA6BtD,SAASS,EAASC,GACrB,IAAIC,EAAsB,mBAAXb,QAAyBY,EAAEZ,OAAOC,UAAWtB,EAAI,EAChE,OAAIkC,EAAUA,EAAE9B,KAAK6B,GACd,CACHhB,KAAM,WAEF,OADIgB,GAAKjC,GAAKiC,EAAE9B,SAAQ8B,OAAI,GACrB,CAAEN,MAAOM,GAAKA,EAAEjC,KAAM0B,MAAOO,KAKzC,SAASE,EAAOF,EAAGhC,GACtB,IAAIiC,EAAsB,mBAAXb,QAAyBY,EAAEZ,OAAOC,UACjD,IAAKY,EAAG,OAAOD,EACf,IAAmBG,EAAYN,EAA3B9B,EAAIkC,EAAE9B,KAAK6B,GAAOI,EAAK,GAC3B,IACI,WAAc,IAANpC,GAAsB,EAANA,QAAcmC,EAAIpC,EAAEiB,QAAQS,MAAMW,EAAGR,KAAKO,EAAET,OAExE,MAAOW,GAASR,EAAI,CAAEQ,MAAOA,WAEzB,IACQF,IAAMA,EAAEV,OAASQ,EAAIlC,EAAU,SAAIkC,EAAE9B,KAAKJ,WAExC,GAAI8B,EAAG,MAAMA,EAAEQ,OAE7B,OAAOD,EAGJ,SAASE,IACZ,IAAK,IAAIF,EAAK,GAAIrC,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CqC,EAAKA,EAAGG,OAAOL,EAAOjC,UAAUF,KACpC,OAAOqC,EC1He,SAApBI,EAA6BC,GAIjC,IAFA,IAAMC,EAAgB,GAClBvD,EAAI,EACCY,EAAI,EAAGA,EAAI0C,EAAIvC,OAAQH,IAAK,CACnC,IAAI4C,EAAIF,EAAIG,WAAW7C,GACnB4C,EAAI,IACND,EAAIvD,KAAOwD,GACFA,EAAI,KACbD,EAAIvD,KAAQwD,GAAK,EAAK,KAGL,QAAZ,MAAJA,IACD5C,EAAI,EAAI0C,EAAIvC,QACyB,QAAZ,MAAxBuC,EAAIG,WAAW7C,EAAI,KAGpB4C,EAAI,QAAgB,KAAJA,IAAe,KAA6B,KAAtBF,EAAIG,aAAa7C,IACvD2C,EAAIvD,KAAQwD,GAAK,GAAM,IACvBD,EAAIvD,KAASwD,GAAK,GAAM,GAAM,KAI9BD,EAAIvD,KAAQwD,GAAK,GAAM,IAHvBD,EAAIvD,KAASwD,GAAK,EAAK,GAAM,KAV7BD,EAAIvD,KAAY,GAAJwD,EAAU,KAkB1B,OAAOD,EAmTmB,SAAfG,EAAwBJ,GACnC,IACE,OAAOK,EAAOC,aAAaN,GAAK,GAChC,MAAOZ,GACPmB,QAAQX,MAAM,wBAAyBR,GAEzC,OAAO,KCjVT,IAAaoB,EAAY,CAIvBC,aAAa,EAIbC,YAAY,EAKZC,YAAa,qBCZFC,EAAS,SAASC,EAAoBC,GACjD,IAAKD,EACH,MAAME,EAAeD,IAOZC,EAAiB,SAASD,GACrC,OAAO,IAAIE,MACT,sBACER,EAAUG,YACV,6BACAG,IFsEOT,EAAiB,CAI5BY,eAAgB,KAKhBC,eAAgB,KAMhBC,sBAAuB,KAMvBC,sBAAuB,KAMvBC,kBACE,iEAKFC,mBACE,OAAOxE,KAAKuE,kBAAoB,OAMlCE,2BACE,OAAOzE,KAAKuE,kBAAoB,OAUlCG,mBAAoC,mBAATC,KAW3BC,gBAAA,SAAgBC,EAA8BC,GAC5C,IAAKnF,MAAMoF,QAAQF,GACjB,MAAMX,MAAM,iDAGdlE,KAAKgF,QAQL,IANA,IAAMC,EAAgBH,EAClB9E,KAAKqE,sBACLrE,KAAKmE,eAEHe,EAAS,GAEN1E,EAAI,EAAGA,EAAIqE,EAAMlE,OAAQH,GAAK,EAAG,CACxC,IAAM2E,EAAQN,EAAMrE,GACd4E,EAAY5E,EAAI,EAAIqE,EAAMlE,OAC1B0E,EAAQD,EAAYP,EAAMrE,EAAI,GAAK,EACnC8E,EAAY9E,EAAI,EAAIqE,EAAMlE,OAC1B4E,EAAQD,EAAYT,EAAMrE,EAAI,GAAK,EAEnCgF,EAAWL,GAAS,EACpBM,GAAqB,EAARN,IAAiB,EAAME,GAAS,EAC/CK,GAAqB,GAARL,IAAiB,EAAME,GAAS,EAC7CI,EAAmB,GAARJ,EAEVD,IACHK,EAAW,GAENP,IACHM,EAAW,KAIfR,EAAO7C,KACL4C,EAAcO,GACdP,EAAcQ,GACdR,EAAcS,GACdT,EAAcU,IAIlB,OAAOT,EAAOU,KAAK,KAWrBC,aAAA,SAAahB,EAAeC,GAG1B,OAAI9E,KAAK0E,qBAAuBI,EACvBgB,KAAKjB,GAEP7E,KAAK4E,gBAAgB3B,EAAkB4B,GAAQC,IAWxDtB,aAAA,SAAaqB,EAAeC,GAG1B,OAAI9E,KAAK0E,qBAAuBI,EACvBH,KAAKE,GA3LQ,SAASkB,GAKjC,IAHA,IAAM5C,EAAgB,GAClB6C,EAAM,EACR5C,EAAI,EACC4C,EAAMD,EAAMpF,QAAQ,CACzB,IAAMsF,EAAKF,EAAMC,KACjB,GAAIC,EAAK,IACP9C,EAAIC,KAAO8C,OAAOC,aAAaF,QAC1B,GAAS,IAALA,GAAYA,EAAK,IAAK,CAC/B,IAAMG,EAAKL,EAAMC,KACjB7C,EAAIC,KAAO8C,OAAOC,cAAoB,GAALF,IAAY,EAAW,GAALG,QAC9C,GAAS,IAALH,GAAYA,EAAK,IAAK,CAE/B,IAGMI,IACI,EAALJ,IAAW,IAAa,IAJvBG,EAAKL,EAAMC,QAImB,IAAa,IAH3CM,EAAKP,EAAMC,QAGuC,EAAW,GAFxDD,EAAMC,MAGf,MACF7C,EAAIC,KAAO8C,OAAOC,aAAa,OAAUE,GAAK,KAC9ClD,EAAIC,KAAO8C,OAAOC,aAAa,OAAc,KAAJE,QACpC,CACCD,EAAKL,EAAMC,KAAjB,IACMM,EAAKP,EAAMC,KACjB7C,EAAIC,KAAO8C,OAAOC,cACT,GAALF,IAAY,IAAa,GAALG,IAAY,EAAW,GAALE,IAI9C,OAAOnD,EAAIyC,KAAK,IA+JPW,CAAkBvG,KAAKwG,wBAAwB3B,EAAOC,KAkB/D0B,wBAAA,SAAwB3B,EAAeC,GACrC9E,KAAKgF,QAQL,IANA,IAAMyB,EAAgB3B,EAClB9E,KAAKsE,sBACLtE,KAAKoE,eAEHc,EAAmB,GAEhB1E,EAAI,EAAGA,EAAIqE,EAAMlE,QAAU,CAClC,IAAMwE,EAAQsB,EAAc5B,EAAM6B,OAAOlG,MAGnC6E,EADY7E,EAAIqE,EAAMlE,OACF8F,EAAc5B,EAAM6B,OAAOlG,IAAM,EAIrD+E,IAHJ/E,EAEoBqE,EAAMlE,OACF8F,EAAc5B,EAAM6B,OAAOlG,IAAM,GAIrDmG,IAHJnG,EAEoBqE,EAAMlE,OACF8F,EAAc5B,EAAM6B,OAAOlG,IAAM,GAG3D,KAFEA,EAEW,MAAT2E,GAA0B,MAATE,GAA0B,MAATE,GAA0B,MAAToB,EACrD,MAAMzC,QAGR,IAAMsB,EAAYL,GAAS,EAAME,GAAS,EAG1C,GAFAH,EAAO7C,KAAKmD,GAEE,KAAVD,EAAc,CAChB,IAAME,EAAaJ,GAAS,EAAK,IAASE,GAAS,EAGnD,GAFAL,EAAO7C,KAAKoD,GAEE,KAAVkB,EAAc,CAChB,IAAMjB,EAAaH,GAAS,EAAK,IAAQoB,EACzCzB,EAAO7C,KAAKqD,KAKlB,OAAOR,GAQTF,iBACE,IAAKhF,KAAKmE,eAAgB,CACxBnE,KAAKmE,eAAiB,GACtBnE,KAAKoE,eAAiB,GACtBpE,KAAKqE,sBAAwB,GAC7BrE,KAAKsE,sBAAwB,GAG7B,IAAK,IAAI9D,EAAI,EAAGA,EAAIR,KAAKwE,aAAa7D,OAAQH,IAC5CR,KAAKmE,eAAe3D,GAAKR,KAAKwE,aAAakC,OAAOlG,GAClDR,KAAKoE,eAAepE,KAAKmE,eAAe3D,IAAMA,EAC9CR,KAAKqE,sBAAsB7D,GAAKR,KAAKyE,qBAAqBiC,OAAOlG,IACjER,KAAKsE,sBAAsBtE,KAAKqE,sBAAsB7D,IAAMA,IAGnDR,KAAKuE,kBAAkB5D,SAC9BX,KAAKoE,eAAepE,KAAKyE,qBAAqBiC,OAAOlG,IAAMA,EAC3DR,KAAKsE,sBAAsBtE,KAAKwE,aAAakC,OAAOlG,IAAMA,MGpTpE,SAAgBoG,EAAYzE,GAC1B,OAeF,SAAgB0E,EAAWC,EAAiBC,GAC1C,KAAMA,aAAkBvH,QACtB,OAAOuH,EAGT,OAAQA,EAAO9G,aACb,KAAK+G,KAGH,IAAMC,EAAYF,EAClB,OAAO,IAAIC,KAAKC,EAAUC,WAE5B,KAAK1H,YACY2H,IAAXL,IACFA,EAAS,IAEX,MAEF,KAAKnH,MAEHmH,EAAS,GACT,MAEF,QAEE,OAAOC,EAGX,IAAK,IAAMK,KAAQL,EACZA,EAAOlH,eAAeuH,KAG1BN,EAAsCM,GAAQP,EAC5CC,EAAsCM,GACtCL,EAAsCK,KAI3C,OAAON,EArDAD,MAAWM,EAAWhF,GCJ/B,OAgBEkF,yBAAA,SACEC,GADF,WAGE,OAAO,SAACxE,EAAOX,GACTW,EACFyE,EAAKC,OAAO1E,GAEZyE,EAAKE,QAAQtF,GAES,mBAAbmF,IAGTC,EAAKG,QAAQC,MAAM,cAIK,IAApBL,EAAS3G,OACX2G,EAASxE,GAETwE,EAASxE,EAAOX,SA/BxB,aAAA,WAFAnC,YAAoC,aACpCA,aAAqC,aAEnCA,KAAK0H,QAAU,IAAIE,QAAQ,SAACH,EAASD,GACnCD,EAAKE,QAAUA,EACfF,EAAKC,OAASA,ICiBpB,SAAgBK,IACd,MACoB,oBAAXC,WAGJA,OAAgB,SAAKA,OAAiB,UAAKA,OAAiB,WAC/D,oDAAoDC,KAtB/B,oBAAdC,WAC2B,iBAA3BA,UAAqB,UAErBA,UAAqB,UAErB,IA4DX,SAAgBC,IACd,OAAkE,IAAzBvE,EAAUE,WC9BrD,SA0BmCsE,MAAAhE,UAGjC,WAAqBiE,EAAcnE,GAAnC,MACEoE,YAAMpE,gBADauD,OAAAY,EAFZZ,OA3BQ,gBAkCf/H,OAAOC,eAAe8H,EAAMc,EAAcnI,WAItCgE,MAAMoE,mBACRpE,MAAMoE,kBAAkBf,EAAMgB,EAAarI,UAAUC,iBAezDoI,mBAAA,SACEJ,OACA,aAAAK,mBAAAA,IAAAC,oBAeA,IAbA,IAAMC,EAAcD,EAAK,IAAoB,GACvCE,EAAc3I,KAAK4I,YAAWT,EAC9BU,EAAW7I,KAAK8I,OAAOX,GAEvBnE,EAAU6E,EAwBpB,SAAyBA,EAAkBJ,GACzC,OAAOI,EAASE,QAAQC,EAAS,SAAC5H,EAAG6H,GACnC,IAAM9G,EAAQsG,EAAKQ,GACnB,OAAgB,MAAT9G,EAAgBA,EAAM+G,WAAa,IAAID,SA3BnBE,CAAgBN,EAAUH,GAAc,QAE7DU,EAAiBpJ,KAAKqJ,iBAAgBrF,OAAY2E,OAElD7F,EAAQ,IAAIuF,EAAcM,EAAUS,OAKxBE,EAAA9J,OAAO+J,KAAKb,GAAZc,WAAAA,IAAyB,CAAtC,IAAMP,OACa,MAAlBA,EAAIQ,OAAO,KACTR,KAAOnG,GACTW,QAAQiG,KACN,yCAAyCT,sCAG7CnG,EAAMmG,GAAOP,EAAWO,IAI5B,OAAOnG,MAlCT,WACmB8F,EACAS,EACAP,GAFA9I,aAAA4I,EACA5I,iBAAAqJ,EACArJ,YAAA8I,EA0CrB,IAAME,EAAU,gBCnIhB,SAAgBW,EAASzG,GACvB,OAAO0G,KAAKC,MAAM3G,GAQpB,SAAgB4G,EAAUrB,GACxB,OAAOmB,KAAKE,UAAUrB,GCKF,SAATsB,EAAkBC,GAC7B,IAAIC,EAAS,GACXC,EAAiB,GACjBzB,EAAO,GACP0B,EAAY,GAEd,IACE,IAAMC,EAAQJ,EAAMK,MAAM,KAC1BJ,EAASN,EAASrG,EAAa8G,EAAM,KAAO,IAC5CF,EAASP,EAASrG,EAAa8G,EAAM,KAAO,IAC5CD,EAAYC,EAAM,GAClB3B,EAAOyB,EAAU,GAAK,UACfA,EAAU,EACjB,MAAO5H,IAET,MAAO,CACL2H,SACAC,SACAzB,OACA0B,aCxCJ,SAAgBG,EAA2BC,EAAQtB,GACjD,OAAOzJ,OAAOU,UAAUL,eAAee,KAAK2J,EAAKtB,GAGnD,SAAgBuB,EACdD,EACAtB,GAEA,OAAIzJ,OAAOU,UAAUL,eAAee,KAAK2J,EAAKtB,GACrCsB,EAAItB,QAEX,EAIJ,SAAgBwB,EAAQF,GACtB,IAAK,IAAMtB,KAAOsB,EAChB,GAAI/K,OAAOU,UAAUL,eAAee,KAAK2J,EAAKtB,GAC5C,OAAO,EAGX,OAAO,EAGT,SAAgByB,EACdH,EACAI,EACAC,GAEA,IAAMC,EAAkC,GACxC,IAAK,IAAM5B,KAAOsB,EACZ/K,OAAOU,UAAUL,eAAee,KAAK2J,EAAKtB,KAC5C4B,EAAI5B,GAAO0B,EAAG/J,KAAKgK,EAAYL,EAAItB,GAAMA,EAAKsB,IAGlD,OAAOM,ECXT,OAkDEC,kBAAA,WACE9K,KAAK+K,OAAO,GAAK,WACjB/K,KAAK+K,OAAO,GAAK,WACjB/K,KAAK+K,OAAO,GAAK,WACjB/K,KAAK+K,OAAO,GAAK,UACjB/K,KAAK+K,OAAO,GAAK,WAEjB/K,KAAKgL,OAAS,EACdhL,KAAKiL,OAAS,GAShBH,sBAAA,SAAUI,EAAqCC,GAE3CA,EADGA,GACM,EAGX,IAAMC,EAAIpL,KAAKqL,GAGf,GAAmB,iBAARH,EACT,IAAK,IAAI1K,EAAI,EAAGA,EAAI,GAAIA,IAStB4K,EAAE5K,GACC0K,EAAI7H,WAAW8H,IAAW,GAC1BD,EAAI7H,WAAW8H,EAAS,IAAM,GAC9BD,EAAI7H,WAAW8H,EAAS,IAAM,EAC/BD,EAAI7H,WAAW8H,EAAS,GAC1BA,GAAU,OAGZ,IAAS3K,EAAI,EAAGA,EAAI,GAAIA,IACtB4K,EAAE5K,GACC0K,EAAIC,IAAW,GACfD,EAAIC,EAAS,IAAM,GACnBD,EAAIC,EAAS,IAAM,EACpBD,EAAIC,EAAS,GACfA,GAAU,EAKd,IAAS3K,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAC5B,IAAMF,EAAI8K,EAAE5K,EAAI,GAAK4K,EAAE5K,EAAI,GAAK4K,EAAE5K,EAAI,IAAM4K,EAAE5K,EAAI,IAClD4K,EAAE5K,GAA+B,YAAxBF,GAAK,EAAMA,IAAM,IAG5B,IAKIW,EAAGqK,EALHC,EAAIvL,KAAK+K,OAAO,GAChBxL,EAAIS,KAAK+K,OAAO,GAChB3H,EAAIpD,KAAK+K,OAAO,GAChBzL,EAAIU,KAAK+K,OAAO,GAChBzI,EAAItC,KAAK+K,OAAO,GAIpB,IAASvK,EAAI,EAAGA,EAAI,GAAIA,IAIlB8K,EAHA9K,EAAI,GACFA,EAAI,IACNS,EAAI3B,EAAKC,GAAK6D,EAAI9D,GACd,aAEJ2B,EAAI1B,EAAI6D,EAAI9D,EACR,YAGFkB,EAAI,IACNS,EAAK1B,EAAI6D,EAAM9D,GAAKC,EAAI6D,GACpB,aAEJnC,EAAI1B,EAAI6D,EAAI9D,EACR,YAIFgB,GAAOiL,GAAK,EAAMA,IAAM,IAAOtK,EAAIqB,EAAIgJ,EAAIF,EAAE5K,GAAM,WACzD8B,EAAIhD,EACJA,EAAI8D,EACJA,EAA8B,YAAxB7D,GAAK,GAAOA,IAAM,GACxBA,EAAIgM,EACJA,EAAIjL,EAGNN,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAKQ,EAAK,WACxCvL,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAKxL,EAAK,WACxCS,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAK3H,EAAK,WACxCpD,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAKzL,EAAK,WACxCU,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAKzI,EAAK,YAG1CwI,mBAAA,SAAO/E,EAAwCpF,GAE7C,GAAa,MAAToF,EAAJ,MAIeoB,IAAXxG,IACFA,EAASoF,EAAMpF,QAUjB,IAPA,IAAM6K,EAAmB7K,EAASX,KAAKyL,UACnChL,EAAI,EAEFyK,EAAMlL,KAAK0L,KACbC,EAAQ3L,KAAKgL,OAGVvK,EAAIE,GAAQ,CAKjB,GAAc,IAAVgL,EACF,KAAOlL,GAAK+K,GACVxL,KAAK4L,UAAU7F,EAAOtF,GACtBA,GAAKT,KAAKyL,UAId,GAAqB,iBAAV1F,GACT,KAAOtF,EAAIE,GAIT,GAHAuK,EAAIS,GAAS5F,EAAM1C,WAAW5C,KAE5BA,IADAkL,IAEY3L,KAAKyL,UAAW,CAC5BzL,KAAK4L,UAAUV,GACfS,EAAQ,EAER,YAIJ,KAAOlL,EAAIE,GAIT,GAHAuK,EAAIS,GAAS5F,EAAMtF,KAEjBA,IADAkL,IAEY3L,KAAKyL,UAAW,CAC5BzL,KAAK4L,UAAUV,GACfS,EAAQ,EAER,OAMR3L,KAAKgL,OAASW,EACd3L,KAAKiL,QAAUtK,IAIjBmK,mBAAA,WACE,IAAMe,EAAmB,GACrBC,EAA0B,EAAd9L,KAAKiL,OAGjBjL,KAAKgL,OAAS,GAChBhL,KAAK+L,OAAO/L,KAAKgM,KAAM,GAAKhM,KAAKgL,QAEjChL,KAAK+L,OAAO/L,KAAKgM,KAAMhM,KAAKyL,WAAazL,KAAKgL,OAAS,KAIzD,IAAK,IAAIxK,EAAIR,KAAKyL,UAAY,EAAQ,IAALjL,EAASA,IACxCR,KAAK0L,KAAKlL,GAAiB,IAAZsL,EACfA,GAAa,IAGf9L,KAAK4L,UAAU5L,KAAK0L,MAEpB,IAAIjL,EAAI,EACR,IAASD,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIyL,EAAI,GAAS,GAALA,EAAQA,GAAK,EAC5BJ,EAAOpL,GAAMT,KAAK+K,OAAOvK,IAAMyL,EAAK,MAClCxL,EAGN,OAAOoL,MAvMT,aAjCQ7L,YAAmB,GAMnBA,UAAiB,GAOjBA,QAAe,GAMfA,UAAiB,GAKjBA,YAAiB,EAKjBA,YAAiB,EAKvBA,KAAKyL,UAAY,GAEjBzL,KAAKgM,KAAK,GAAK,IACf,IAAK,IAAIxL,EAAI,EAAGA,EAAIR,KAAKyL,YAAajL,EACpCR,KAAKgM,KAAKxL,GAAK,EAGjBR,KAAKkM,QC9DuB,SAAnBC,EACXC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAMJ,GALID,EAAWF,EACbG,EAAW,YAAcH,EACLC,EAAXC,IACTC,EAAwB,IAAbF,EAAiB,OAAS,gBAAkBA,GAErDE,EASF,MAAM,IAAItI,MAPRkI,EACA,4BACAG,GACc,IAAbA,EAAiB,aAAe,eACjC,YACAC,EACA,KAaN,SAAgBC,EACdL,EACAM,EACAC,GAEA,IAAIC,EAAU,GACd,OAAQF,GACN,KAAK,EACHE,EAAUD,EAAW,QAAU,QAC/B,MACF,KAAK,EACHC,EAAUD,EAAW,SAAW,SAChC,MACF,KAAK,EACHC,EAAUD,EAAW,QAAU,QAC/B,MACF,KAAK,EACHC,EAAUD,EAAW,SAAW,SAChC,MACF,QACE,MAAM,IAAIzI,MACR,mEAIN,IAAIpB,EAAQsJ,EAAS,YAGrB,OADAtJ,GAAS8J,EAAU,aA4BrB,SAAgBC,EACdT,EACAM,EACApF,EACAqF,GAEA,KAAIA,GAAarF,IAGO,mBAAbA,EACT,MAAM,IAAIpD,MACRuI,EAAYL,EAAQM,EAAgBC,GAClC,6BAKR,SAAgBG,EACdV,EACAM,EACAK,EACAJ,GAEA,KAAIA,GAAaI,KAGM,iBAAZA,GAAoC,OAAZA,GACjC,MAAM,IAAI7I,MACRuI,EAAYL,EAAQM,EAAgBC,GAClC,mCCtEoB,SAAfK,EAAwB9J,GAEnC,IADA,IAAItD,EAAI,EACCY,EAAI,EAAGA,EAAI0C,EAAIvC,OAAQH,IAAK,CACnC,IAAM4C,EAAIF,EAAIG,WAAW7C,GACrB4C,EAAI,IACNxD,IACSwD,EAAI,KACbxD,GAAK,EACS,OAALwD,GAAeA,GAAK,OAE7BxD,GAAK,EACLY,KAEAZ,GAAK,EAGT,OAAOA,EAvDT,ICDYqN,EAAAA,GAAAA,EAAAA,EAAAA,0BAEVA,yBACAA,mBACAA,mBACAA,qBACAA,uBAwBoC,SAAhCC,EAAiCC,EAAUC,OAAS,aAAA5E,mBAAAA,IAAA6E,oBACxD,KAAID,EAAUD,EAASG,UAAvB,CAGA,IAAMC,GAAM,IAAIvG,MAAOwG,cACvB,OAAQJ,GAON,KAAKH,EAASQ,MAGd,KAAKR,EAASS,QACZjK,QAAQkK,UAARlK,SAAY,IAAI8J,QAASJ,EAASS,iBAAYP,IAC9C,MACF,KAAKJ,EAASY,KACZpK,QAAQqK,WAARrK,SAAa,IAAI8J,QAASJ,EAASS,iBAAYP,IAC/C,MACF,KAAKJ,EAASc,KACZtK,QAAQiG,WAARjG,SAAa,IAAI8J,QAASJ,EAASS,iBAAYP,IAC/C,MACF,KAAKJ,EAASe,MACZvK,QAAQX,YAARW,SAAc,IAAI8J,QAASJ,EAASS,iBAAYP,IAChD,MACF,QACE,MAAM,IAAInJ,MACR,8DAA8DkJ,SA/CtE,IAAMa,EAA4BhB,EAASY,QAsEzCrO,sBAAI0O,4BAAJ,WACE,OAAOlO,KAAKmO,eAEd,SAAaC,GACX,KAAMA,KAAOnB,GACX,MAAM,IAAIhL,UAAU,wCAEtBjC,KAAKmO,UAAYC,mCAOnB5O,sBAAI0O,8BAAJ,WACE,OAAOlO,KAAKqO,iBAEd,SAAeD,GACb,GAAmB,mBAARA,EACT,MAAM,IAAInM,UAAU,qDAEtBjC,KAAKqO,YAAcD,mCAOrBF,kBAAA,eAAM,aAAA1F,mBAAAA,IAAA6E,kBACJrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASQ,cAAUJ,KAE5Ca,gBAAA,eAAI,aAAA1F,mBAAAA,IAAA6E,kBACFrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASS,gBAAYL,KAE9Ca,iBAAA,eAAK,aAAA1F,mBAAAA,IAAA6E,kBACHrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASY,aAASR,KAE3Ca,iBAAA,eAAK,aAAA1F,mBAAAA,IAAA6E,kBACHrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASc,aAASV,KAE3Ca,kBAAA,eAAM,aAAA1F,mBAAAA,IAAA6E,kBACJrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASe,cAAUX,QApD5C,WAAmBO,GAAA5N,UAAA4N,EAUX5N,eAAYiO,EAcZjO,iBAA0BkN,ECnGpC,OAaEoB,gBAAA,SAAIrF,EAAa9G,GACF,MAATA,EACFnC,KAAKuO,YAAYC,WAAWxO,KAAKyO,cAAcxF,IAE/CjJ,KAAKuO,YAAYG,QAAQ1O,KAAKyO,cAAcxF,GAAMa,EAAU3H,KAQhEmM,gBAAA,SAAIrF,GACF,IAAM0F,EAAY3O,KAAKuO,YAAYK,QAAQ5O,KAAKyO,cAAcxF,IAC9D,OAAiB,MAAb0F,EACK,KAEAhF,EAASgF,IAOpBL,mBAAA,SAAOrF,GACLjJ,KAAKuO,YAAYC,WAAWxO,KAAKyO,cAAcxF,KASjDqF,0BAAA,SAAcV,GACZ,OAAO5N,KAAK6O,QAAUjB,GAGxBU,qBAAA,WACE,OAAOtO,KAAKuO,YAAYrF,eA7C1B,WAAoBqF,GAAAvO,iBAAAuO,EALZvO,aAAU,YCNpB,OAGE8O,gBAAA,SAAI7F,EAAa9G,GACF,MAATA,SACKnC,KAAK+O,OAAO9F,GAEnBjJ,KAAK+O,OAAO9F,GAAO9G,GAIvB2M,gBAAA,SAAI7F,GACF,OAAIqB,EAAStK,KAAK+O,OAAQ9F,GACjBjJ,KAAK+O,OAAO9F,GAEd,MAGT6F,mBAAA,SAAO7F,UACEjJ,KAAK+O,OAAO9F,OAnBvB,aACUjJ,YAA+B,GAqBvCA,wBAAoB,EChBG,SAAnBgP,EACJC,GAEA,IAGE,GACoB,oBAAXnH,aAC2B,IAA3BA,OAAOmH,GACd,CAEA,IAAMC,EAAapH,OAAOmH,GAG1B,OAFAC,EAAWR,QAAQ,oBAAqB,SACxCQ,EAAWV,WAAW,qBACf,IAAIF,EAAkBY,IAE/B,MAAO5M,IAIT,OAAO,IAAIwM,ECFO,SAAPK,EAAgBjM,GAC3B,IAAMkM,ELhByB,SAASlM,GAGxC,IAFA,IAAMC,EAAgB,GAClBvD,EAAI,EACCY,EAAI,EAAGA,EAAI0C,EAAIvC,OAAQH,IAAK,CACnC,IAAI4C,EAAIF,EAAIG,WAAW7C,GAGvB,GAAS,OAAL4C,GAAeA,GAAK,MAAQ,CAC9B,IAAMiM,EAAOjM,EAAI,MAEjBU,IADAtD,EACW0C,EAAIvC,OAAQ,2CAEvByC,EAAI,OAAWiM,GAAQ,KADXnM,EAAIG,WAAW7C,GAAK,OAI9B4C,EAAI,IACND,EAAIvD,KAAOwD,GACFA,EAAI,KACbD,EAAIvD,KAAQwD,GAAK,EAAK,KAEbA,EAAI,MACbD,EAAIvD,KAAQwD,GAAK,GAAM,KAIvBD,EAAIvD,KAAQwD,GAAK,GAAM,IACvBD,EAAIvD,KAASwD,GAAK,GAAM,GAAM,KAJ9BD,EAAIvD,KAASwD,GAAK,EAAK,GAAM,KAH7BD,EAAIvD,KAAY,GAAJwD,EAAU,KAY1B,OAAOD,EKfWF,CAAkBC,GAC9BiM,EAAO,IAAIrE,EACjBqE,EAAKpD,OAAOqD,GACZ,IAAME,EAAYH,EAAKtD,SACvB,OAAOtI,EAAOqB,gBAAgB0K,GA+CH,SAAhBC,EACXC,EACAC,GAEA3L,GACG2L,IAA2B,IAAZD,IAAgC,IAAZA,EACpC,+CAEc,IAAZA,GACFE,GAAUpC,SAAWL,EAASS,QAC9BiC,GAASD,GAAU/B,IAAIiC,KAAKF,IACxBD,GAAYI,GAAeC,IAAI,mBAAmB,IAC1B,mBAAZN,EAChBG,GAASH,GAETG,GAAS,KACTE,GAAeE,OAAO,oBAQP,SAANpC,QAAe,aAAAnF,mBAAAA,IAAAwH,kBAO1B,IANkB,IAAdC,KACFA,IAAY,EACG,OAAXN,KAA6D,IAA1CE,GAAeK,IAAI,oBACxCX,GAAc,IAGdI,GAAQ,CACV,IAAM3L,EAAUmM,GAAiBtP,MAAM,KAAMmP,GAC7CL,GAAO3L,IAQe,SAAboM,EACXC,GAEA,OAAO,eAAS,aAAA7H,mBAAAA,IAAAwH,kBACdrC,kBAAI0C,GAAWL,KAOE,SAARlN,QAAiB,aAAA0F,mBAAAA,IAAAwH,kBAC5B,IAAMhM,EAAU,4BAA8BmM,kBAAoBH,IAClEN,GAAU5M,MAAMkB,GAMG,SAARsM,SAAiB,aAAA9H,mBAAAA,IAAAwH,kBAC5B,IAAMhM,EAAU,yBAAyBmM,kBAAoBH,IAE7D,MADAN,GAAU5M,MAAMkB,GACV,IAAIE,MAAMF,GAME,SAAP0F,SAAgB,aAAAlB,mBAAAA,IAAAwH,kBAC3B,IAAMhM,EAAU,qBAAuBmM,kBAAoBH,IAC3DN,GAAUhG,KAAK1F,GAsCkB,SAAtBuM,GAA+B9H,GAC1C,MACkB,iBAATA,IACNA,GAAQA,GACPA,GAAQ+H,OAAOC,mBACfhI,GAAQ+H,OAAOE,mBA8FQ,SAAhBC,GAAyBpF,EAAWhM,GAC/C,OAAIgM,IAAMhM,EACD,EACEgM,EAAIhM,GACL,EAED,EASe,SAAbqR,GACX3H,EACAsB,GAEA,GAAIA,GAAOtB,KAAOsB,EAChB,OAAOA,EAAItB,GAEX,MAAM,IAAI/E,MACR,yBAA2B+E,EAAM,gBAAkBa,EAAUS,IAqClC,SAApBsG,GACX3N,EACA4N,GAEA,IAAMC,EAAM7N,EAAIvC,OAEhB,GAAIoQ,GAAOD,EACT,MAAO,CAAC5N,GAIV,IADA,IAAM8N,EAAW,GACR5N,EAAI,EAAGA,EAAI2N,EAAK3N,GAAK0N,EACVC,EAAd3N,EAAI0N,EACNE,EAAS3O,KAAKa,EAAI+N,UAAU7N,EAAG2N,IAE/BC,EAAS3O,KAAKa,EAAI+N,UAAU7N,EAAGA,EAAI0N,IAGvC,OAAOE,EDpWT,ICOME,GDiBOC,GAAoBnC,EAAiB,gBAGrCa,GAAiBb,EAAiB,kBC3BzCU,GAAY,IAAIxB,EAAO,sBAMhBkD,IACPF,GAAK,EACF,WACL,OAAOA,OAsBLf,GAAmB,eAAS,aAAA3H,mBAAAA,IAAAwH,kBAEhC,IADA,IAAIhM,EAAU,GACLxD,EAAI,EAAGA,EAAIwP,EAASrP,OAAQH,IAEjCb,MAAMoF,QAAQiL,EAASxP,KACtBwP,EAASxP,IACe,iBAAhBwP,EAASxP,IACc,iBAAvBwP,EAASxP,GAAGG,OAErBqD,GAAWmM,GAAiBtP,MAAM,KAAMmP,EAASxP,IACjB,iBAAhBwP,EAASxP,GACzBwD,GAAW8F,EAAUkG,EAASxP,IAE9BwD,GAAWgM,EAASxP,GAEtBwD,GAAW,IAGb,OAAOA,GAOE2L,GAAuC,KAO9CM,IAAY,EA2KHoB,GAAW,aAMXC,GAAW,aAQXC,GAAc,SAAShG,EAAWhM,GAC7C,GAAIgM,IAAMhM,EACR,OAAO,EACF,GAAIgM,IAAM8F,IAAY9R,IAAM+R,GACjC,OAAQ,EACH,GAAI/R,IAAM8R,IAAY9F,IAAM+F,GACjC,OAAO,EAEP,IAAME,EAASC,GAAYlG,GACzBmG,EAASD,GAAYlS,GAEvB,OAAe,OAAXiS,EACa,OAAXE,EACKF,EAASE,GAAU,EAAInG,EAAE5K,OAASpB,EAAEoB,OAAS6Q,EAASE,GAErD,EAEU,OAAXA,EACF,EAEAnG,EAAIhM,GAAK,EAAI,GA0CboS,GAAoB,SAASpH,GACxC,GAAmB,iBAARA,GAA4B,OAARA,EAAc,OAAOT,EAAUS,GAE9D,IAAMhB,EAAO,GACb,IAAK,IAAI+B,KAAKf,EACZhB,EAAKlH,KAAKiJ,GAIZ/B,EAAKqI,OAEL,IADA,IAAI3I,EAAM,IACDzI,EAAI,EAAGA,EAAI+I,EAAK5I,OAAQH,IACrB,IAANA,IAASyI,GAAO,KACpBA,GAAOa,EAAUP,EAAK/I,IACtByI,GAAO,IACPA,GAAO0I,GAAkBpH,EAAIhB,EAAK/I,KAIpC,OADAyI,GAAO,KAqCT,SAAgB4I,GAAKtH,EAAaI,GAChC,IAAK,IAAM1B,KAAOsB,EACZA,EAAI1K,eAAeoJ,IACrB0B,EAAG1B,EAAKsB,EAAItB,IAyBmB,SAAxB6I,GAAiC/P,GAG5C,IAGExB,EACA+B,EACArB,EACA8Q,EACAvR,EACAwR,EACA9O,EA0BF,IArCAY,GAAQyM,GAAoBxO,GAAI,uBAetB,IAANA,EAGFxB,EAAI,EAAIwB,IAAOkQ,GADfhR,EADAqB,EAAI,GAEsB,EAAI,GAE9B/B,EAAIwB,EAAI,EAONd,GANFc,EAAImQ,KAAKC,IAAIpQ,KAEJmQ,KAAKE,IAAI,GAAG,OAGnB9P,GADAyP,EAAKG,KAAKG,IAAIH,KAAKI,MAAMJ,KAAKvE,IAAI5L,GAAKmQ,KAAKK,KArBrC,OAAA,KAuBHL,KAAKM,MAAMzQ,EAAImQ,KAAKE,IAAI,EAxBtB,GAwBiCL,GAAMG,KAAKE,IAAI,EAxBhD,OA2BN9P,EAAI,EACA4P,KAAKM,MAAMzQ,EAAImQ,KAAKE,IAAI,GAAG,SAKnCJ,EAAO,GACFxR,EAlCK,GAkCMA,EAAGA,GAAK,EACtBwR,EAAK3P,KAAKpB,EAAI,EAAI,EAAI,GACtBA,EAAIiR,KAAKI,MAAMrR,EAAI,GAErB,IAAKT,EAvCS,GAuCEA,EAAGA,GAAK,EACtBwR,EAAK3P,KAAKC,EAAI,EAAI,EAAI,GACtBA,EAAI4P,KAAKI,MAAMhQ,EAAI,GAErB0P,EAAK3P,KAAK9B,EAAI,EAAI,GAClByR,EAAKS,UACLvP,EAAM8O,EAAKpM,KAAK,IAGhB,IAAI8M,EAAgB,GACpB,IAAKlS,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC1B,IAAImS,EAAUC,SAAS1P,EAAI2P,OAAOrS,EAAG,GAAI,GAAG0I,SAAS,IAC9B,IAAnByJ,EAAQhS,SAAcgS,EAAU,IAAMA,GAC1CD,GAAgCC,EAElC,OAAOD,EAAcI,cA0FO,SAAjBC,GAA0BpI,GACrC,IACEA,IACA,MAAOrI,GAEP0Q,WAAW,WAKT,IAAMC,EAAQ3Q,EAAE2Q,OAAS,GAEzB,MADAvJ,GAAK,yCAA0CuJ,GACzC3Q,GACL4P,KAAKI,MAAM,KAoEmB,SAAxBY,GACXvI,EACAwI,GAEA,IAAMC,EAA2BJ,WAAWrI,EAAIwI,GAIhD,MAHuB,iBAAZC,GAAyBA,EAAuB,OACxDA,EAAuB,QAEnBA,EA5OF,IAiHMC,GAAkB,IAAIC,OAAO,iBAO7B7B,GAAc,SAASvO,GAClC,GAAImQ,GAAgBtL,KAAK7E,GAAM,CAC7B,IAAMqQ,EAAS/C,OAAOtN,GACtB,IAAe,YAAXqQ,GAAyBA,GAAU,WACrC,OAAOA,EAGX,OAAO,UCrgBP/T,sBAAWgU,gBAAX,WACE,OAAO,IAAIA,GAAK,qCA6BlBA,sBAAA,WACE,OAAIxT,KAAKyT,WAAazT,KAAK0T,QAAQ/S,OAAe,KAE3CX,KAAK0T,QAAQ1T,KAAKyT,YAM3BD,uBAAA,WACE,OAAOxT,KAAK0T,QAAQ/S,OAASX,KAAKyT,WAMpCD,sBAAA,WACE,IAAIG,EAAW3T,KAAKyT,UAIpB,OAHIE,EAAW3T,KAAK0T,QAAQ/S,QAC1BgT,IAEK,IAAIH,GAAKxT,KAAK0T,QAASC,IAMhCH,qBAAA,WACE,OAAIxT,KAAKyT,UAAYzT,KAAK0T,QAAQ/S,OACzBX,KAAK0T,QAAQ1T,KAAK0T,QAAQ/S,OAAS,GAErC,MAGT6S,sBAAA,WAEE,IADA,IAAII,EAAa,GACRpT,EAAIR,KAAKyT,UAAWjT,EAAIR,KAAK0T,QAAQ/S,OAAQH,IAC5B,KAApBR,KAAK0T,QAAQlT,KAAWoT,GAAc,IAAM5T,KAAK0T,QAAQlT,IAG/D,OAAOoT,GAAc,KAGvBJ,gCAAA,WAEE,IADA,IAAII,EAAa,GACRpT,EAAIR,KAAKyT,UAAWjT,EAAIR,KAAK0T,QAAQ/S,OAAQH,IAC5B,KAApBR,KAAK0T,QAAQlT,KACfoT,GAAc,IAAMC,mBAAmB3N,OAAOlG,KAAK0T,QAAQlT,MAG/D,OAAOoT,GAAc,KASvBJ,mBAAA,SAAMM,GACJ,oBADIA,KACG9T,KAAK0T,QAAQjK,MAAMzJ,KAAKyT,UAAYK,IAM7CN,oBAAA,WACE,GAAIxT,KAAKyT,WAAazT,KAAK0T,QAAQ/S,OAAQ,OAAO,KAGlD,IADA,IAAMoT,EAAS,GACNvT,EAAIR,KAAKyT,UAAWjT,EAAIR,KAAK0T,QAAQ/S,OAAS,EAAGH,IACxDuT,EAAO1R,KAAKrC,KAAK0T,QAAQlT,IAE3B,OAAO,IAAIgT,GAAKO,EAAQ,IAO1BP,mBAAA,SAAMQ,GAEJ,IADA,IAAMD,EAAS,GACNvT,EAAIR,KAAKyT,UAAWjT,EAAIR,KAAK0T,QAAQ/S,OAAQH,IACpDuT,EAAO1R,KAAKrC,KAAK0T,QAAQlT,IAE3B,GAAIwT,aAAwBR,GAC1B,IACMhT,EAAIwT,EAAaP,UACrBjT,EAAIwT,EAAaN,QAAQ/S,OACzBH,IAEAuT,EAAO1R,KAAK2R,EAAaN,QAAQlT,QAGnC,CAAA,IAAMyT,EAAcD,EAAa3J,MAAM,KACvC,IAAS7J,EAAI,EAAGA,EAAIyT,EAAYtT,OAAQH,IACV,EAAxByT,EAAYzT,GAAGG,QAAYoT,EAAO1R,KAAK4R,EAAYzT,IAI3D,OAAO,IAAIgT,GAAKO,EAAQ,IAM1BP,qBAAA,WACE,OAAOxT,KAAKyT,WAAazT,KAAK0T,QAAQ/S,QAQjC6S,gBAAP,SAAoBU,EAAiBC,GACnC,IAAMC,EAAQF,EAAUG,WACtBC,EAAQH,EAAUE,WACpB,GAAc,OAAVD,EACF,OAAOD,EACF,GAAIC,IAAUE,EACnB,OAAOd,GAAKe,aAAaL,EAAUM,WAAYL,EAAUK,YAEzD,MAAM,IAAItQ,MACR,8BACEiQ,EACA,8BAEAD,EACA,MAUDV,gBAAP,SAAoBiB,EAAYC,GAG9B,IAFA,IAAMC,EAAWF,EAAKhL,QAChBmL,EAAYF,EAAMjL,QACfjJ,EAAI,EAAGA,EAAImU,EAAShU,QAAUH,EAAIoU,EAAUjU,OAAQH,IAAK,CAChE,IAAMqU,EAAMtD,GAAYoD,EAASnU,GAAIoU,EAAUpU,IAC/C,GAAY,IAARqU,EAAW,OAAOA,EAExB,OAAIF,EAAShU,SAAWiU,EAAUjU,OAAe,EAC1CgU,EAAShU,OAASiU,EAAUjU,QAAU,EAAI,GAQnD6S,oBAAA,SAAOsB,GACL,GAAI9U,KAAK+U,cAAgBD,EAAMC,YAC7B,OAAO,EAGT,IACE,IAAIvU,EAAIR,KAAKyT,UAAWxH,EAAI6I,EAAMrB,UAClCjT,GAAKR,KAAK0T,QAAQ/S,OAClBH,IAAKyL,IAEL,GAAIjM,KAAK0T,QAAQlT,KAAOsU,EAAMpB,QAAQzH,GACpC,OAAO,EAIX,OAAO,GAQTuH,sBAAA,SAASsB,GACP,IAAItU,EAAIR,KAAKyT,UACTxH,EAAI6I,EAAMrB,UACd,GAAIzT,KAAK+U,YAAcD,EAAMC,YAC3B,OAAO,EAET,KAAOvU,EAAIR,KAAK0T,QAAQ/S,QAAQ,CAC9B,GAAIX,KAAK0T,QAAQlT,KAAOsU,EAAMpB,QAAQzH,GACpC,OAAO,IAEPzL,IACAyL,EAEJ,OAAO,OApNT,YAAY+I,EAAiCrB,GAC3C,QAAiB,IAAbA,EAAqB,CACvB3T,KAAK0T,QAAWsB,EAAwB3K,MAAM,KAI9C,IADA,IAAI4K,EAAS,EACJzU,EAAI,EAAGA,EAAIR,KAAK0T,QAAQ/S,OAAQH,IACV,EAAzBR,KAAK0T,QAAQlT,GAAGG,SAClBX,KAAK0T,QAAQuB,GAAUjV,KAAK0T,QAAQlT,GACpCyU,KAGJjV,KAAK0T,QAAQ/S,OAASsU,EAEtBjV,KAAKyT,UAAY,OAEjBzT,KAAK0T,QAAUsB,EACfhV,KAAKyT,UAAYE,EAiNvB,QAuBEnU,sBAAW0V,yBAAX,WACE,OAAO,oCAIT1V,sBAAW0V,gCAAX,WACE,OAAO,qCAITA,kBAAA,SAAKC,GAEsB,EAArBnV,KAAKoV,OAAOzU,SACdX,KAAKqV,aAAe,GAEtBrV,KAAKoV,OAAO/S,KAAK8S,GACjBnV,KAAKqV,aAAerI,EAAamI,GACjCnV,KAAKsV,eAGPJ,iBAAA,WACE,IAAMK,EAAOvV,KAAKoV,OAAOhT,MACzBpC,KAAKqV,aAAerI,EAAauI,GAER,EAArBvV,KAAKoV,OAAOzU,SACdX,KAAKqV,aAAe,IAIhBH,yBAAR,WACE,GAAIlV,KAAKqV,YAAcH,GAAeM,sBACpC,MAAM,IAAItR,MACRlE,KAAKyV,aACH,8BACAP,GAAeM,sBACf,WACAxV,KAAKqV,YACL,MAGN,GAAIrV,KAAKoV,OAAOzU,OAASuU,GAAeQ,eACtC,MAAM,IAAIxR,MACRlE,KAAKyV,aACH,iEACAP,GAAeQ,eACf,gCACA1V,KAAK2V,kBAUbT,2BAAA,WACE,OAA0B,GAAtBlV,KAAKoV,OAAOzU,OACP,GAEF,gBAAkBX,KAAKoV,OAAOxP,KAAK,KAAO,SAzEnD,YAAYgQ,EAAoBH,GAAAzV,kBAAAyV,EAE9BzV,KAAKoV,OAASQ,EAAKnM,QAEnBzJ,KAAKqV,YAAcnD,KAAK2D,IAAI,EAAG7V,KAAKoV,OAAOzU,QAE3C,IAAK,IAAIH,EAAI,EAAGA,EAAIR,KAAKoV,OAAOzU,OAAQH,IACtCR,KAAKqV,aAAerI,EAAahN,KAAKoV,OAAO5U,IAE/CR,KAAKsV,cC/QF,IAUMQ,GAAe,iBAIfC,GAAY,YAEZC,GAAe,mBCkB1BC,6BAAA,WACE,OAAOjW,KAAKkW,OAASlW,KAAKmW,cAAgBnW,KAAKoW,gBAGjDH,6BAAA,WACE,MAA0C,OAAnCjW,KAAKmW,aAAatD,OAAO,EAAG,IAGrCoD,wBAAA,WACE,MAAuB,wBAAhBjW,KAAKqW,QAGdJ,0BAAA,WACE,MACkB,mBAAhBjW,KAAKqW,QAA+C,wBAAhBrW,KAAKqW,QAI7CJ,wBAAA,SAAWK,GACLA,IAAYtW,KAAKmW,eACnBnW,KAAKmW,aAAeG,EAChBtW,KAAKuW,mBACPpF,GAAkBrB,IAAI,QAAU9P,KAAKkW,KAAMlW,KAAKmW,gBAWtDF,2BAAA,SAAcO,EAAcC,GAI1B,IAAIC,EACJ,GAJA5S,EAAuB,iBAAT0S,EAAmB,8BACjC1S,EAAyB,iBAAX2S,EAAqB,gCAG/BD,IAAST,GACXW,GACG1W,KAAK2W,OAAS,SAAW,SAAW3W,KAAKmW,aAAe,YACtD,CAAA,GAAIK,IAASR,GAIlB,MAAM,IAAI9R,MAAM,4BAA8BsS,GAH9CE,GACG1W,KAAK2W,OAAS,WAAa,WAAa3W,KAAKmW,aAAe,QAI7DnW,KAAK4W,oBACPH,EAAW,GAAIzW,KAAK6W,WAGtB,IAAMC,EAAkB,GAMxB,OAJAjF,GAAK4E,EAAQ,SAACxN,EAAa9G,GACzB2U,EAAMzU,KAAK4G,EAAM,IAAM9G,KAGlBuU,EAAUI,EAAMlR,KAAK,MAI9BqQ,sBAAA,WACE,IAAI/S,EAAMlD,KAAK+W,cAIf,OAHI/W,KAAKgX,iBACP9T,GAAO,IAAMlD,KAAKgX,eAAiB,KAE9B9T,GAIT+S,yBAAA,WACE,OAAQjW,KAAK2W,OAAS,WAAa,WAAa3W,KAAKkW,UAnFvD,YACEA,EACOS,EACAE,EACAI,EACAD,gBAAAA,MAHAhX,YAAA2W,EACA3W,eAAA6W,EACA7W,mBAAAiX,EACAjX,oBAAAgX,EAEPhX,KAAKkW,KAAOA,EAAKpD,cACjB9S,KAAKqW,OAASrW,KAAKkW,KAAKrD,OAAO7S,KAAKkW,KAAKgB,QAAQ,KAAO,GACxDlX,KAAKmW,aAAehF,GAAkBjB,IAAI,QAAUgG,IAASlW,KAAKkW,KCoBzC,SAAhBiB,GACXC,GAEA,IAAMC,EAAYC,GAASF,GACzBP,EAAYQ,EAAUE,UAEC,aAArBF,EAAUhB,QACZ/F,GACE+G,EAAUnB,KACR,8EAOFW,GAA0B,aAAbA,GACM,cAArBQ,EAAUhB,QAEV/F,GACE,gFAIC+G,EAAUV,QJ0FK,oBAAX7O,QACPA,OAAO0P,UACP1P,OAAO0P,SAASC,WACgC,IAAhD3P,OAAO0P,SAASC,SAASP,QAAQ,WAEjCxN,GACE,6FI5FJ,IAAMuN,EAAqC,OAArBI,EAAUK,QAAwC,QAArBL,EAAUK,OAE7D,MAAO,CACLC,SAAU,IAAI1B,GACZoB,EAAUnB,KACVmB,EAAUV,OACVE,EACAI,GAEFrB,KAAM,IAAIpC,GAAK6D,EAAUzD,aCvDH,SAAbgE,GAAsB3O,GACjC,MACiB,iBAARA,GAAmC,IAAfA,EAAItI,SAAiBkX,GAAmB9P,KAAKkB,GAQ3C,SAApB6O,GAA6BlE,GACxC,MACwB,iBAAfA,GACe,IAAtBA,EAAWjT,SACVoX,GAAoBhQ,KAAK6L,GAqBC,SAAlBoE,GAA2BC,GACtC,OACe,OAAbA,GACoB,iBAAbA,GACc,iBAAbA,IAA0B1H,GAAoB0H,IACrDA,GAAgC,iBAAbA,GAAyB3N,EAAS2N,EAAU,OAa7B,SAA1BC,GACX9L,EACAM,EACAjE,EACAmN,EACAjJ,GAEIA,QAAqBxF,IAATsB,GAEhB0P,GACEC,EAAehM,EAAQM,EAAgBC,GACvClE,EACAmN,GA2JwC,SAA/ByC,GACXjM,EACAM,EACAjE,EACAmN,EACAjJ,GAEA,IAAIA,QAAqBxF,IAATsB,EAAhB,CAEA,IAAMgE,EAAc2L,EAAehM,EAAQM,EAAgBC,GAE3D,IAAMlE,GAAwB,iBAATA,GAAsB9I,MAAMoF,QAAQ0D,GACvD,MAAM,IAAIvE,MACRuI,EAAc,0DAIlB,IAAM6L,EAAqB,GAC3BzG,GAAKpJ,EAAM,SAASQ,EAAa9G,GAC/B,IAAMoW,EAAU,IAAI/E,GAAKvK,GAEzB,GADAkP,GAAqB1L,EAAatK,EAAOyT,EAAKT,MAAMoD,IAC1B,cAAtBA,EAAQC,YACLR,GAAgB7V,GACnB,MAAM,IAAI+B,MACRuI,EACE,kCACA8L,EAAQrP,WACR,gGAKRoP,EAAWjW,KAAKkW,KAvFsB,SACxC9L,EACA6L,GAEA,IAAI9X,EAAG+X,EACP,IAAK/X,EAAI,EAAGA,EAAI8X,EAAW3X,OAAQH,IAGjC,IADA,IAAM+I,GADNgP,EAAUD,EAAW9X,IACAiJ,QACZwC,EAAI,EAAGA,EAAI1C,EAAK5I,OAAQsL,IAC/B,GAAgB,cAAZ1C,EAAK0C,IAAsBA,IAAM1C,EAAK5I,OAAS,QAE5C,IAAKiX,GAAWrO,EAAK0C,IAC1B,MAAM,IAAI/H,MACRuI,EACE,4BACAlD,EAAK0C,GACL,aACAsM,EAAQrP,WACR,uFAUVoP,EAAW1G,KAAK4B,GAAKiF,cACrB,IAAIC,EAAwB,KAC5B,IAAKlY,EAAI,EAAGA,EAAI8X,EAAW3X,OAAQH,IAAK,CAEtC,GADA+X,EAAUD,EAAW9X,GACJ,OAAbkY,GAAqBA,EAASpO,SAASiO,GACzC,MAAM,IAAIrU,MACRuI,EACE,mBACAiM,EAASxP,WACT,qCACAqP,EAAQrP,YAGdwP,EAAWH,GAgDbI,CAA2BlM,EAAa6L,IAGV,SAAnBM,GACXxM,EACAM,EACAuL,EACAtL,GAEA,IAAIA,QAAyBxF,IAAb8Q,EAAhB,CACA,GAAI1H,GAAoB0H,GACtB,MAAM,IAAI/T,MACRkU,EAAehM,EAAQM,EAAgBC,GACrC,MACAsL,EAAS/O,WACT,6FAIN,IAAK8O,GAAgBC,GACnB,MAAM,IAAI/T,MACRkU,EAAehM,EAAQM,EAAgBC,GACrC,wFAKyB,SAApBkM,GACXzM,EACAM,EACAoM,EACAnM,GAEA,IAAIA,QAA0BxF,IAAd2R,EAEhB,OAAQA,GACN,IAAK,QACL,IAAK,cACL,IAAK,gBACL,IAAK,gBACL,IAAK,cACH,MACF,QACE,MAAM,IAAI5U,MACRkU,EAAehM,EAAQM,EAAgBC,GACrC,6GAMiB,SAAdoM,GACX3M,EACAM,EACAzD,EACA0D,GAEA,KAAIA,QAAoBxF,IAAR8B,GACX2O,GAAW3O,IACd,MAAM,IAAI/E,MACRkU,EAAehM,EAAQM,EAAgBC,GACrC,yBACA1D,EACA,oGAK0B,SAArB+P,GACX5M,EACAM,EACAkH,EACAjH,GAEA,KAAIA,QAA2BxF,IAAfyM,GAEXkE,GAAkBlE,IACrB,MAAM,IAAI1P,MACRkU,EAAehM,EAAQM,EAAgBC,GACrC,0BACAiH,EACA,oFAmB4B,SAAvBqF,GAAgC7M,EAAgBwJ,GAC3D,GAAwB,UAApBA,EAAKvB,WACP,MAAM,IAAInQ,MAAMkI,EAAS,6CAIF,SAAd8M,GACX9M,EACAM,EACA2K,GAGA,IAAMzD,EAAayD,EAAUzB,KAAK1M,WAClC,GACuC,iBAA5BmO,EAAUM,SAASzB,MACO,IAAnCmB,EAAUM,SAASzB,KAAKvV,SACtBiX,GAAWP,EAAUM,SAASd,YACY,cAA1CQ,EAAUM,SAASzB,KAAK7L,MAAM,KAAK,IACd,IAAtBuJ,EAAWjT,SA9VqB,SAASiT,GAM5C,OAHEA,EAFEA,GAEWA,EAAW7K,QAAQ,mBAAoB,KAG/C+O,GAAkBlE,GAwVMuF,CAAsBvF,GAEnD,MAAM,IAAI1P,MACRkU,EAAehM,EAAQM,GAAgB,GACrC,wFDtWD,IA8CM4K,GAAW,SACtBF,GAWA,IAAIlB,EAAO,GACTG,EAAS,GACTkB,EAAY,GACZ3D,EAAa,GAGX+C,GAAS,EACXe,EAAS,QACT0B,EAAO,IAGT,GAAuB,iBAAZhC,EAAsB,CAE/B,IAAIiC,EAAWjC,EAAQF,QAAQ,MACf,GAAZmC,IACF3B,EAASN,EAAQnG,UAAU,EAAGoI,EAAW,GACzCjC,EAAUA,EAAQnG,UAAUoI,EAAW,IAIzC,IAAIC,EAAWlC,EAAQF,QAAQ,MACb,IAAdoC,IACFA,EAAWlC,EAAQzW,QAErB,IAAI4Y,EAAkBnC,EAAQF,QAAQ,MACb,IAArBqC,IACFA,EAAkBnC,EAAQzW,QAE5BuV,EAAOkB,EAAQnG,UAAU,EAAGiB,KAAKG,IAAIiH,EAAUC,IAC3CD,EAAWC,IAEb3F,EApIN,SAAoBA,GAGlB,IAFA,IAAI4F,EAAoB,GAClBzF,EAASH,EAAWvJ,MAAM,KACvB7J,EAAI,EAAGA,EAAIuT,EAAOpT,OAAQH,IACjC,GAAuB,EAAnBuT,EAAOvT,GAAGG,OAAY,CACxB,IAAI8Y,EAAQ1F,EAAOvT,GACnB,IACEiZ,EAAQC,mBAAmBD,EAAM1Q,QAAQ,MAAO,MAChD,MAAOzG,IACTkX,GAAqB,IAAMC,EAG/B,OAAOD,EAwHUG,CAAWvC,EAAQnG,UAAUqI,EAAUC,KAEtD,IAAIK,EAnHR,SAAqBC,WACfC,EAAU,GACgB,MAA1BD,EAAYnT,OAAO,KACrBmT,EAAcA,EAAY5I,UAAU,QAEtC,IAAsB,IAAA3H,EAAAyQ,EAAAF,EAAYxP,MAAM,oCAAM,CAAzC,IAAM2P,UACT,GAAuB,IAAnBA,EAAQrZ,OAAZ,CAGA,IAAMsZ,EAAKD,EAAQ3P,MAAM,KACP,IAAd4P,EAAGtZ,OACLmZ,EAAQJ,mBAAmBO,EAAG,KAAOP,mBAAmBO,EAAG,IAE3DvQ,GAAK,0BAA0BsQ,iBAAsBH,0GAGzD,OAAOC,EAmGaI,CAChB9C,EAAQnG,UAAUiB,KAAKG,IAAI+E,EAAQzW,OAAQ4Y,KAK7B,IADhBF,EAAWnD,EAAKgB,QAAQ,OAEtBP,EAAoB,UAAXe,GAAiC,QAAXA,EAC/B0B,EAAOxG,SAASsD,EAAKjF,UAAUoI,EAAW,GAAI,KAE9CA,EAAWjC,EAAQzW,OAGrB,IAAMyJ,EAAQ8L,EAAK7L,MAAM,KACJ,IAAjBD,EAAMzJ,QAER0V,EAASjM,EAAM,GACfmN,EAAYnN,EAAM,GAAG0I,eACK,IAAjB1I,EAAMzJ,OACf0V,EAASjM,EAAM,GACwC,cAA9CA,EAAM,GAAGX,MAAM,EAAG4P,GAAUvG,gBACrCuD,EAAS,aAGO,KAAdkB,GAAoB,OAAQqC,IAC9BrC,EAAYqC,EAAgB,IAIhC,MAAO,CACL1D,OACAkD,OACA/C,SACAkB,YACAZ,SACAe,SACA9D,eCtKSiE,GAAqB,iCAQrBE,GAAsB,+BAOtBoC,GAAiB,SAkFjBhC,GAAuB,SAClC1L,EACAhE,EACA2R,GAEA,IAAMxE,EACJwE,aAAiB5G,GAAO,IAAI0B,GAAekF,EAAO3N,GAAe2N,EAEnE,QAAajT,IAATsB,EACF,MAAM,IAAIvE,MAAMuI,EAAc,sBAAwBmJ,EAAKD,iBAE7D,GAAoB,mBAATlN,EACT,MAAM,IAAIvE,MACRuI,EACE,uBACAmJ,EAAKD,gBACL,oBACAlN,EAAKS,YAGX,GAAIqH,GAAoB9H,GACtB,MAAM,IAAIvE,MACRuI,EAAc,YAAchE,EAAKS,WAAa,IAAM0M,EAAKD,iBAK7D,GACkB,iBAATlN,GACPA,EAAK9H,OAASwZ,GAAiB,GAC/BnN,EAAavE,GAAQ0R,GAErB,MAAM,IAAIjW,MACRuI,EACE,kCACA0N,GACA,eACAvE,EAAKD,gBACL,MACAlN,EAAKwI,UAAU,EAAG,IAClB,SAMN,GAAIxI,GAAwB,iBAATA,EAAmB,CACpC,IAAI4R,GAAc,EACdC,GAAiB,EAwBrB,GAvBAzI,GAAKpJ,EAAM,SAASQ,EAAa9G,GAC/B,GAAY,WAAR8G,EACFoR,GAAc,OACT,GAAY,cAARpR,GAA+B,QAARA,IAChCqR,GAAiB,GACZ1C,GAAW3O,IACd,MAAM,IAAI/E,MACRuI,EACE,6BACAxD,EACA,KACA2M,EAAKD,gBACL,wFAMRC,EAAKvT,KAAK4G,GACVkP,GAAqB1L,EAAatK,EAAOyT,GACzCA,EAAKxT,QAGHiY,GAAeC,EACjB,MAAM,IAAIpW,MACRuI,EACE,4BACAmJ,EAAKD,gBACL,0CChKR4E,oBAAA,SAAOC,GACLrO,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,QACxDkM,EAAiB,sBAAuB,EAAG2N,GAAY,GACvD,IAAMC,EAAW,IAAIpT,EAKrB,OAJArH,KAAK0a,MAAMC,mBACT3a,KAAKoa,MACLK,EAASG,aAAaJ,IAEjBC,EAAS/S,SAOlB6S,oBAAA,SAAOC,GACLrO,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,QACxDsY,GAAqB,sBAAuBjZ,KAAKoa,OACjDvN,EAAiB,sBAAuB,EAAG2N,GAAY,GACvD,IAAMC,EAAW,IAAIpT,EAMrB,OALArH,KAAK0a,MAAMG,gBACT7a,KAAKoa,MACL,KACAK,EAASG,aAAaJ,IAEjBC,EAAS/S,SAQlB6S,iBAAA,SAAIpY,EAAYqY,GACdrO,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QACrDsY,GAAqB,mBAAoBjZ,KAAKoa,OAC9ClC,GAAwB,mBAAoB,EAAG/V,EAAOnC,KAAKoa,OAAO,GAClEvN,EAAiB,mBAAoB,EAAG2N,GAAY,GACpD,IAAMC,EAAW,IAAIpT,EAMrB,OALArH,KAAK0a,MAAMG,gBACT7a,KAAKoa,MACLjY,EACAsY,EAASG,aAAaJ,IAEjBC,EAAS/S,SASlB6S,6BAAA,SACEpY,EACA8V,EACAuC,GAEArO,EAAiB,+BAAgC,EAAG,EAAGzL,UAAUC,QACjEsY,GAAqB,+BAAgCjZ,KAAKoa,OAC1DlC,GACE,+BACA,EACA/V,EACAnC,KAAKoa,OACL,GAEFxB,GAAiB,+BAAgC,EAAGX,GAAU,GAC9DpL,EAAiB,+BAAgC,EAAG2N,GAAY,GAEhE,IAAMC,EAAW,IAAIpT,EAOrB,OANArH,KAAK0a,MAAMI,4BACT9a,KAAKoa,MACLjY,EACA8V,EACAwC,EAASG,aAAaJ,IAEjBC,EAAS/S,SAQlB6S,oBAAA,SACEQ,EACAP,GAIA,GAFArO,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,QACxDsY,GAAqB,sBAAuBjZ,KAAKoa,OAC7Cza,MAAMoF,QAAQgW,GAAgB,CAEhC,IADA,IAAMC,EAAyC,GACtCxa,EAAI,EAAGA,EAAIua,EAAcpa,SAAUH,EAC1Cwa,EAAiB,GAAKxa,GAAKua,EAAcva,GAE3Cua,EAAgBC,EAChBtR,GACE,gOAIJ2O,GACE,sBACA,EACA0C,EACA/a,KAAKoa,OACL,GAEFvN,EAAiB,sBAAuB,EAAG2N,GAAY,GACvD,IAAMC,EAAW,IAAIpT,EAMrB,OALArH,KAAK0a,MAAMO,mBACTjb,KAAKoa,MACLW,EACAN,EAASG,aAAaJ,IAEjBC,EAAS/S,aA1HlB,YAAoBgT,EAAqBN,GAArBpa,WAAA0a,EAAqB1a,WAAAoa,ECnB3C,QAcEc,oBAAA,WAEE,OADA/O,EAAiB,2BAA4B,EAAG,EAAGzL,UAAUC,QACtD,CAAEwa,UAAWnb,KAAKmb,UAAWC,SAAUpb,KAAKob,SAASC,eAN9D,YAAmBF,EAA2BC,GAA3Bpb,eAAAmb,EAA2Bnb,cAAAob,ECKhD,IAEQE,GAKFC,GAMEC,GAbKC,IAELH,GACJ,mEAIEC,GAAe,EAMbC,GAA0B,GAEzB,SAASjO,GACd,IAGI/M,EAHEkb,EAAgBnO,IAAQgO,GAC9BA,GAAehO,EAGf,IAAMoO,EAAiB,IAAIhc,MAAM,GACjC,IAAKa,EAAI,EAAQ,GAALA,EAAQA,IAClBmb,EAAenb,GAAK8a,GAAW5U,OAAO6G,EAAM,IAG5CA,EAAM2E,KAAKI,MAAM/E,EAAM,IAEzBzJ,EAAe,IAARyJ,EAAW,4BAElB,IAAI2D,EAAKyK,EAAe/V,KAAK,IAE7B,GAAK8V,EAIE,CAGL,IAAKlb,EAAI,GAAS,GAALA,GAA+B,KAArBgb,GAAchb,GAAWA,IAC9Cgb,GAAchb,GAAK,EAErBgb,GAAchb,UATd,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAClBgb,GAAchb,GAAK0R,KAAKI,MAAsB,GAAhBJ,KAAK0J,UAUvC,IAAKpb,EAAI,EAAGA,EAAI,GAAIA,IAClB0Q,GAAMoK,GAAW5U,OAAO8U,GAAchb,IAIxC,OAFAsD,EAAqB,KAAdoN,EAAGvQ,OAAe,oCAElBuQ,QCwFF2K,QAAP,SAAYjO,EAAckO,GACxB,OAAO,IAAID,GAAUjO,EAAMkO,QAT7B,YAAmBlO,EAAqBkO,GAArB9b,UAAA4N,EAAqB5N,UAAA8b,ECxI1C,ICFIC,ODoBFC,wBAAA,WACE,OAAOhc,KAAKic,QAAQrM,KAAK5P,OAW3Bgc,iCAAA,SAAoBE,EAAeC,GACjC,IAAMC,EAAa,IAAIP,GAAUxK,GAAU6K,GACrCG,EAAa,IAAIR,GAAUxK,GAAU8K,GAC3C,OAAgD,IAAzCnc,KAAKic,QAAQG,EAAYC,IAOlCL,qBAAA,WACE,OAAQH,GAAkBS,SAzC9B,eCAA,WAA8BpU,QAAA8T,IAC5Bxc,sBAAW+c,uBAAX,WACE,OAAOR,QAGT,SAAwB3N,GACtB2N,GAAe3N,mCAMjBmO,qBAAA,SAAQhR,EAAchM,GACpB,OAAOgS,GAAYhG,EAAEqC,KAAMrO,EAAEqO,OAM/B2O,yBAAA,SAAYT,GAGV,MAAM7X,EAAe,oDAMvBsY,iCAAA,SAAoBL,EAAeC,GACjC,OAAO,GAMTI,qBAAA,WACE,OAAQV,GAAkBS,KAM5BC,qBAAA,WAGE,OAAO,IAAIV,GAAUvK,GAAUyK,KAQjCQ,sBAAA,SAASC,EAAoB5O,GAM3B,OALA9J,EACwB,iBAAf0Y,EACP,gDAGK,IAAIX,GAAUW,EAAYT,KAMnCQ,sBAAA,WACE,MAAO,YAlEX,+DAsEO,ICzEHE,GDyESC,GAAY,IAAIH,GC/DG,SAAnBI,GAA4B1E,GACvC,MAAwB,iBAAbA,EACF,UAAYnG,GAAsBmG,GAC/B,UAAYA,EAQU,SAAvB2E,GAAgCC,GAC3C,GAAIA,EAAaC,aAAc,CAC7B,IAAM1O,EAAMyO,EAAazO,MACzBtK,EACiB,iBAARsK,GACU,iBAARA,GACS,iBAARA,GACN9D,EAAS8D,EAAmC,OAChD,6CAGFtK,EACE+Y,IAAiBJ,IAAYI,EAAapS,UAC1C,gCAIJ3G,EACE+Y,IAAiBJ,IAAYI,EAAaE,cAActS,UACxD,sDA9BG,ICPHuS,GCHAC,GACAR,UDUFjd,sBAAW0d,oCAIX,WACE,OAAOF,QALT,SAAqC5O,GACnC4O,GAA4B5O,mCAoC9B8O,wBAAA,WACE,OAAO,GAITA,yBAAA,WACE,OAAOld,KAAKmd,eAIdD,4BAAA,SAAeE,GACb,OAAO,IAAIF,GAASld,KAAKqd,OAAQD,IAInCF,+BAAA,SAAkBI,GAEhB,MAAkB,cAAdA,EACKtd,KAAKmd,cAELD,GAASF,0BAA0BO,YAK9CL,sBAAA,SAAStH,GACP,OAAIA,EAAKnL,UACAzK,KACsB,cAApB4V,EAAKvB,WACPrU,KAAKmd,cAELD,GAASF,0BAA0BO,YAO9CL,sBAAA,WACE,OAAO,GAITA,qCAAA,SAAwBI,EAAmBE,GACzC,OAAO,MAITN,kCAAA,SAAqBI,EAAmBG,GACtC,MAAkB,cAAdH,EACKtd,KAAK0d,eAAeD,GAClBA,EAAahT,WAA2B,cAAd6S,EAC5Btd,KAEAkd,GAASF,0BAA0BO,WAAWI,qBACnDL,EACAG,GACAC,eAAe1d,KAAKmd,gBAK1BD,yBAAA,SAAYtH,EAAY6H,GACtB,IAAMG,EAAQhI,EAAKvB,WACnB,OAAc,OAAVuJ,EACKH,EACEA,EAAahT,WAAuB,cAAVmT,EAC5B5d,MAEP8D,EACY,cAAV8Z,GAA8C,IAArBhI,EAAKb,YAC9B,8CAGK/U,KAAK2d,qBACVC,EACAV,GAASF,0BAA0BO,WAAWM,YAC5CjI,EAAKpB,WACLiJ,MAORP,qBAAA,WACE,OAAO,GAITA,yBAAA,WACE,OAAO,GAITA,0BAAA,SAAaY,EAAcC,GACzB,OAAO,GAMTb,iBAAA,SAAIc,GACF,OAAIA,IAAiBhe,KAAK+c,cAActS,UAC/B,CACLwT,SAAUje,KAAKke,WACfC,YAAane,KAAK+c,cAAc3O,OAExBpO,KAAKke,YAInBhB,kBAAA,WACE,GAAuB,OAAnBld,KAAKoe,UAAoB,CAC3B,IAAIC,EAAS,GACRre,KAAKmd,cAAc1S,YACtB4T,GACE,YACA1B,GAAiB3c,KAAKmd,cAAc/O,OACpC,KAEJ,IAAMoI,SAAcxW,KAAKqd,OACzBgB,GAAU7H,EAAO,IAEf6H,GADW,UAAT7H,EACQ1E,GAAsB9R,KAAKqd,QAE3Brd,KAAKqd,OAEjBrd,KAAKoe,UAAYjP,EAAKkP,GAExB,OAAOre,KAAKoe,WAOdlB,sBAAA,WACE,OAAOld,KAAKqd,QAMdH,uBAAA,SAAUpI,GACR,OAAIA,IAAUoI,GAASF,0BAA0BO,WACxC,EACEzI,aAAiBoI,GAASF,2BAC3B,GAERlZ,EAAOgR,EAAMgI,aAAc,qBACpB9c,KAAKse,mBAAmBxJ,KAU3BoI,gCAAR,SAA2BqB,GACzB,IAAMC,SAAuBD,EAAUlB,OACjCoB,SAAsBze,KAAKqd,OAC3BqB,EAAaxB,GAASyB,iBAAiBzH,QAAQsH,GAC/CI,EAAY1B,GAASyB,iBAAiBzH,QAAQuH,GAGpD,OAFA3a,EAAqB,GAAd4a,EAAiB,sBAAwBF,GAChD1a,EAAoB,GAAb8a,EAAgB,sBAAwBH,GAC3CC,IAAeE,EAEI,UAAjBH,EAEK,EAGHze,KAAKqd,OAASkB,EAAUlB,QAClB,EACCrd,KAAKqd,SAAWkB,EAAUlB,OAC5B,EAEA,EAIJuB,EAAYF,GAOvBxB,uBAAA,WACE,OAAOld,MAMTkd,uBAAA,WACE,OAAO,GAMTA,oBAAA,SAAOpI,GAIL,GAAIA,IAAU9U,KACZ,OAAO,EACF,GAAI8U,EAAMgI,aAAc,CAC7B,IAAMyB,EAAYzJ,EAClB,OACE9U,KAAKqd,SAAWkB,EAAUlB,QAC1Brd,KAAKmd,cAAc0B,OAAON,EAAUpB,eAGtC,OAAO,GAjPJD,oBAAmB,CAAC,SAAU,UAAW,SAAU,cAU1D,YACmBG,EACTF,gBAAAA,EAAsBD,GAASF,0BAA0BO,YADhDvd,YAAAqd,EACTrd,mBAAAmd,EAVFnd,eAA2B,KAYjC8D,OACkBqD,IAAhBnH,KAAKqd,QAAwC,OAAhBrd,KAAKqd,OAClC,4DAGFT,GAAqB5c,KAAKmd,eC5B9B,+DA6DO,IAAM2B,GAAiB,IA7DK5W,QAAA8T,IAIjC+C,qBAAA,SAAQxT,EAAchM,GACpB,IAAMyf,EAAYzT,EAAEuQ,KAAKiB,cACnBkC,EAAY1f,EAAEuc,KAAKiB,cACnBmC,EAAWF,EAAUG,UAAUF,GACrC,OAAiB,IAAbC,EACK3N,GAAYhG,EAAEqC,KAAMrO,EAAEqO,MAEtBsR,GAOXH,yBAAA,SAAYjD,GACV,OAAQA,EAAKiB,cAActS,WAM7BsU,iCAAA,SAAoB7C,EAAeC,GACjC,OAAQD,EAAQa,cAAc8B,OAAO1C,EAAQY,gBAM/CgC,qBAAA,WACE,OAAQlD,GAAkBS,KAM5ByC,qBAAA,WACE,OAAO,IAAIlD,GAAUvK,GAAU,IAAI4L,GAAS,kBAAmBT,MAQjEsC,sBAAA,SAASvC,EAAiB5O,GACxB,IAAMiP,EAAeI,GAAaT,GAClC,OAAO,IAAIX,GAAUjO,EAAM,IAAIsP,GAAS,kBAAmBL,KAM7DkC,sBAAA,WACE,MAAO,qBCFTK,qBAAA,WACE,GAA+B,IAA3Bpf,KAAKqf,WAAW1e,OAAc,OAAO,KAEzC,IACI2e,EADAxD,EAAO9b,KAAKqf,WAAWjd,MAM3B,GAHEkd,EADEtf,KAAKuf,iBACEvf,KAAKuf,iBAAiBzD,EAAK7S,IAAK6S,EAAK3Z,OAClC,CAAE8G,IAAK6S,EAAK7S,IAAK9G,MAAO2Z,EAAK3Z,OAEvCnC,KAAKwf,WAEP,IADA1D,EAAOA,EAAKrH,MACJqH,EAAKrR,WACXzK,KAAKqf,WAAWhd,KAAKyZ,GACrBA,EAAOA,EAAKpH,WAId,IADAoH,EAAOA,EAAKpH,OACJoH,EAAKrR,WACXzK,KAAKqf,WAAWhd,KAAKyZ,GACrBA,EAAOA,EAAKrH,KAIhB,OAAO6K,GAGTF,qBAAA,WACE,OAAgC,EAAzBpf,KAAKqf,WAAW1e,QAGzBye,kBAAA,WACE,GAA+B,IAA3Bpf,KAAKqf,WAAW1e,OAAc,OAAO,KAEzC,IAAMmb,EAAO9b,KAAKqf,WAAWrf,KAAKqf,WAAW1e,OAAS,GACtD,OAAIX,KAAKuf,iBACAvf,KAAKuf,iBAAiBzD,EAAK7S,IAAK6S,EAAK3Z,OAErC,CAAE8G,IAAK6S,EAAK7S,IAAK9G,MAAO2Z,EAAK3Z,YA1ExC,YACE2Z,EACA2D,EACAC,EACQF,EACAD,gBAAAA,QADAvf,gBAAAwf,EACAxf,sBAAAuf,EAfFvf,gBAAuD,GAkB7D,IADA,IAAI6U,EAAM,GACFiH,EAAKrR,WAMX,GALAqR,EAAOA,EACPjH,EAAM4K,EAAWC,EAAW5D,EAAK7S,IAAKwW,GAAY,EAE9CD,IAAY3K,IAAQ,GAEpBA,EAAM,EAGNiH,EADE9b,KAAKwf,WACA1D,EAAKrH,KAELqH,EAAKpH,UAET,CAAA,GAAY,IAARG,EAAW,CAEpB7U,KAAKqf,WAAWhd,KAAKyZ,GACrB,MAGA9b,KAAKqf,WAAWhd,KAAKyZ,GAEnBA,EADE9b,KAAKwf,WACA1D,EAAKpH,MAELoH,EAAKrH,MAmDtB,QAwCEkL,kBAAA,SACE1W,EACA9G,EACAyd,EACAnL,EACAC,GAEA,OAAO,IAAIiL,GACF,MAAP1W,EAAcA,EAAMjJ,KAAKiJ,IAChB,MAAT9G,EAAgBA,EAAQnC,KAAKmC,MACpB,MAATyd,EAAgBA,EAAQ5f,KAAK4f,MACrB,MAARnL,EAAeA,EAAOzU,KAAKyU,KAClB,MAATC,EAAgBA,EAAQ1U,KAAK0U,QAOjCiL,mBAAA,WACE,OAAO3f,KAAKyU,KAAKoL,QAAU,EAAI7f,KAAK0U,MAAMmL,SAM5CF,qBAAA,WACE,OAAO,GAYTA,8BAAA,SAAiB5B,GACf,OACE/d,KAAKyU,KAAKqL,iBAAiB/B,IAC3BA,EAAO/d,KAAKiJ,IAAKjJ,KAAKmC,QACtBnC,KAAK0U,MAAMoL,iBAAiB/B,IAYhC4B,8BAAA,SAAiB5B,GACf,OACE/d,KAAK0U,MAAMqL,iBAAiBhC,IAC5BA,EAAO/d,KAAKiJ,IAAKjJ,KAAKmC,QACtBnC,KAAKyU,KAAKsL,iBAAiBhC,IAQvB4B,kBAAR,WACE,OAAI3f,KAAKyU,KAAKhK,UACLzK,KAECA,KAAKyU,KAAwBuL,QAOzCL,oBAAA,WACE,OAAO3f,KAAKggB,OAAO/W,KAMrB0W,oBAAA,WACE,OAAI3f,KAAK0U,MAAMjK,UACNzK,KAAKiJ,IAELjJ,KAAK0U,MAAMuL,UAWtBN,oBAAA,SAAO1W,EAAQ9G,EAAUud,GACvB,IAAI7K,EAAKpU,EAgBT,OAZEA,GAFFoU,EAAM6K,EAAWzW,GADjBxI,EAAIT,MACoBiJ,MACd,EACJxI,EAAEyf,KAAK,KAAM,KAAM,KAAMzf,EAAEgU,KAAK0L,OAAOlX,EAAK9G,EAAOud,GAAa,MACnD,IAAR7K,EACLpU,EAAEyf,KAAK,KAAM/d,EAAO,KAAM,KAAM,MAEhC1B,EAAEyf,KACJ,KACA,KACA,KACA,KACAzf,EAAEiU,MAAMyL,OAAOlX,EAAK9G,EAAOud,KAGtBU,UAOHT,wBAAR,WACE,GAAI3f,KAAKyU,KAAKhK,UACZ,OAAO4V,GAAU9C,WAEnB,IAAI9c,EAAoBT,KAGxB,OAFKS,EAAEgU,KAAK6L,UAAa7f,EAAEgU,KAAKA,KAAK6L,WAAU7f,EAAIA,EAAE8f,iBACrD9f,EAAIA,EAAEyf,KAAK,KAAM,KAAM,KAAOzf,EAAEgU,KAAwB+L,aAAc,OAC7DJ,UAQXT,oBAAA,SACE1W,EACAyW,GAEA,IAAIjf,EAAGggB,EAEP,GAAIf,EAAWzW,GADfxI,EAAIT,MACkBiJ,KAAO,EACtBxI,EAAEgU,KAAKhK,WAAchK,EAAEgU,KAAK6L,UAAa7f,EAAEgU,KAAKA,KAAK6L,WACxD7f,EAAIA,EAAE8f,gBAER9f,EAAIA,EAAEyf,KAAK,KAAM,KAAM,KAAMzf,EAAEgU,KAAK1E,OAAO9G,EAAKyW,GAAa,UACxD,CAKL,GAJIjf,EAAEgU,KAAK6L,WAAU7f,EAAIA,EAAEigB,gBACtBjgB,EAAEiU,MAAMjK,WAAchK,EAAEiU,MAAM4L,UAAa7f,EAAEiU,MAAMD,KAAK6L,WAC3D7f,EAAIA,EAAEkgB,iBAEuB,IAA3BjB,EAAWzW,EAAKxI,EAAEwI,KAAY,CAChC,GAAIxI,EAAEiU,MAAMjK,UACV,OAAO4V,GAAU9C,WAEjBkD,EAAYhgB,EAAEiU,MAAyBsL,OACvCvf,EAAIA,EAAEyf,KACJO,EAASxX,IACTwX,EAASte,MACT,KACA,KACC1B,EAAEiU,MAAyB8L,cAIlC/f,EAAIA,EAAEyf,KAAK,KAAM,KAAM,KAAM,KAAMzf,EAAEiU,MAAM3E,OAAO9G,EAAKyW,IAEzD,OAAOjf,EAAE2f,UAOXT,oBAAA,WACE,OAAO3f,KAAK4f,OAOND,oBAAR,WACE,IAAIlf,EAAIT,KAIR,OAHIS,EAAEiU,MAAM4L,WAAa7f,EAAEgU,KAAK6L,WAAU7f,EAAIA,EAAEmgB,eAC5CngB,EAAEgU,KAAK6L,UAAY7f,EAAEgU,KAAKA,KAAK6L,WAAU7f,EAAIA,EAAEigB,gBAC/CjgB,EAAEgU,KAAK6L,UAAY7f,EAAEiU,MAAM4L,WAAU7f,EAAIA,EAAEogB,cACxCpgB,GAODkf,0BAAR,WACE,IAAIlf,EAAIT,KAAK6gB,aAYb,OAXIpgB,EAAEiU,MAAMD,KAAK6L,WASf7f,GADAA,GAPAA,EAAIA,EAAEyf,KACJ,KACA,KACA,KACA,KACCzf,EAAEiU,MAAyBgM,iBAExBE,eACAC,cAEDpgB,GAODkf,2BAAR,WACE,IAAIlf,EAAIT,KAAK6gB,aAKb,OAJIpgB,EAAEgU,KAAKA,KAAK6L,WAEd7f,GADAA,EAAIA,EAAEigB,gBACAG,cAEDpgB,GAODkf,yBAAR,WACE,IAAMmB,EAAK9gB,KAAKkgB,KAAK,KAAM,KAAMP,GAASoB,IAAK,KAAM/gB,KAAK0U,MAAMD,MAChE,OAAOzU,KAAK0U,MAAMwL,KAAK,KAAM,KAAMlgB,KAAK4f,MAAOkB,EAAI,OAO7CnB,0BAAR,WACE,IAAMqB,EAAKhhB,KAAKkgB,KAAK,KAAM,KAAMP,GAASoB,IAAK/gB,KAAKyU,KAAKC,MAAO,MAChE,OAAO1U,KAAKyU,KAAKyL,KAAK,KAAM,KAAMlgB,KAAK4f,MAAO,KAAMoB,IAO9CrB,wBAAR,WACE,IAAMlL,EAAOzU,KAAKyU,KAAKyL,KAAK,KAAM,MAAOlgB,KAAKyU,KAAKmL,MAAO,KAAM,MAC1DlL,EAAQ1U,KAAK0U,MAAMwL,KAAK,KAAM,MAAOlgB,KAAK0U,MAAMkL,MAAO,KAAM,MACnE,OAAO5f,KAAKkgB,KAAK,KAAM,MAAOlgB,KAAK4f,MAAOnL,EAAMC,IAS1CiL,4BAAR,WACE,IAAMsB,EAAajhB,KAAKkhB,SACxB,OAAOhP,KAAKE,IAAI,EAAK6O,IAAejhB,KAAK6f,QAAU,GAOrDF,oBAAA,WACE,IAAIsB,EACJ,GAAIjhB,KAAKsgB,UAAYtgB,KAAKyU,KAAK6L,SAC7B,MAAM,IAAIpc,MACR,0BAA4BlE,KAAKiJ,IAAM,IAAMjJ,KAAKmC,MAAQ,KAG9D,GAAInC,KAAK0U,MAAM4L,SACb,MAAM,IAAIpc,MACR,mBAAqBlE,KAAKiJ,IAAM,IAAMjJ,KAAKmC,MAAQ,YAIvD,IADA8e,EAAajhB,KAAKyU,KAAKyM,YACJlhB,KAAK0U,MAAMwM,SAC5B,MAAM,IAAIhd,MAAM,uBAEhB,OAAO+c,GAAcjhB,KAAKsgB,SAAW,EAAI,IA3StCX,QAAM,EACNA,UAAQ,MAff,YACS1W,EACA9G,EACPyd,EACAnL,EACAC,GAJO1U,SAAAiJ,EACAjJ,WAAAmC,EAKPnC,KAAK4f,MAAiB,MAATA,EAAgBA,EAAQD,GAASoB,IAC9C/gB,KAAKyU,KACK,MAARA,EAAeA,EAAQ4L,GAAU9C,WACnCvd,KAAK0U,MACM,MAATA,EAAgBA,EAAS2L,GAAU9C,WAsTzC,QAYE4D,kBAAA,SACElY,EACA9G,EACAyd,EACAnL,EACAC,GAEA,OAAO1U,MAWTmhB,oBAAA,SAAOlY,EAAQ9G,EAAUud,GACvB,OAAO,IAAIC,GAAS1W,EAAK9G,EAAO,OAUlCgf,oBAAA,SAAOlY,EAAQyW,GACb,OAAO1f,MAMTmhB,mBAAA,WACE,OAAO,GAMTA,qBAAA,WACE,OAAO,GAWTA,8BAAA,SAAiBpD,GACf,OAAO,GAWToD,8BAAA,SAAiBpD,GACf,OAAO,GAMToD,oBAAA,WACE,OAAO,MAMTA,oBAAA,WACE,OAAO,MAOTA,oBAAA,WACE,OAAO,GAOTA,oBAAA,WACE,OAAO,OA9GX,eAsHA,QA2BEd,oBAAA,SAAOpX,EAAQ9G,GACb,OAAO,IAAIke,GACTrgB,KAAKohB,YACLphB,KAAKqhB,MACFlB,OAAOlX,EAAK9G,EAAOnC,KAAKohB,aACxBlB,KAAK,KAAM,KAAMP,GAAS2B,MAAO,KAAM,QAU9CjB,oBAAA,SAAOpX,GACL,OAAO,IAAIoX,GACTrgB,KAAKohB,YACLphB,KAAKqhB,MACFtR,OAAO9G,EAAKjJ,KAAKohB,aACjBlB,KAAK,KAAM,KAAMP,GAAS2B,MAAO,KAAM,QAW9CjB,iBAAA,SAAIpX,GAGF,IAFA,IAAI4L,EACAiH,EAAO9b,KAAKqhB,OACRvF,EAAKrR,WAAW,CAEtB,GAAY,KADZoK,EAAM7U,KAAKohB,YAAYnY,EAAK6S,EAAK7S,MAE/B,OAAO6S,EAAK3Z,MACH0S,EAAM,EACfiH,EAAOA,EAAKrH,KACG,EAANI,IACTiH,EAAOA,EAAKpH,OAGhB,OAAO,MAQT2L,+BAAA,SAAkBpX,GAIhB,IAHA,IAAI4L,EACFiH,EAAO9b,KAAKqhB,MACZE,EAAc,MACRzF,EAAKrR,WAAW,CAEtB,GAAY,KADZoK,EAAM7U,KAAKohB,YAAYnY,EAAK6S,EAAK7S,MAClB,CACb,GAAK6S,EAAKrH,KAAKhK,UAIR,OAAI8W,EACFA,EAAYtY,IAEZ,KALP,IADA6S,EAAOA,EAAKrH,MACJqH,EAAKpH,MAAMjK,WAAWqR,EAAOA,EAAKpH,MAC1C,OAAOoH,EAAK7S,IAML4L,EAAM,EACfiH,EAAOA,EAAKrH,KACG,EAANI,IAETiH,GADAyF,EAAczF,GACFpH,OAIhB,MAAM,IAAIxQ,MACR,0EAOJmc,qBAAA,WACE,OAAOrgB,KAAKqhB,MAAM5W,WAMpB4V,mBAAA,WACE,OAAOrgB,KAAKqhB,MAAMxB,SAMpBQ,oBAAA,WACE,OAAOrgB,KAAKqhB,MAAMG,UAMpBnB,oBAAA,WACE,OAAOrgB,KAAKqhB,MAAMpB,UAYpBI,8BAAA,SAAiBtC,GACf,OAAO/d,KAAKqhB,MAAMvB,iBAAiB/B,IAWrCsC,8BAAA,SAAiBtC,GACf,OAAO/d,KAAKqhB,MAAMtB,iBAAiBhC,IASrCsC,yBAAA,SACEoB,GAEA,OAAO,IAAIrC,GACTpf,KAAKqhB,MACL,KACArhB,KAAKohB,aACL,EACAK,IAIJpB,6BAAA,SACEpX,EACAwY,GAEA,OAAO,IAAIrC,GACTpf,KAAKqhB,MACLpY,EACAjJ,KAAKohB,aACL,EACAK,IAIJpB,oCAAA,SACEpX,EACAwY,GAEA,OAAO,IAAIrC,GACTpf,KAAKqhB,MACLpY,EACAjJ,KAAKohB,aACL,EACAK,IAIJpB,gCAAA,SACEoB,GAEA,OAAO,IAAIrC,GACTpf,KAAKqhB,MACL,KACArhB,KAAKohB,aACL,EACAK,IAhNGpB,cAAa,IAAIc,OAOxB,YACUC,EACAC,gBAAAA,EAEkBhB,GAAU9C,YAH5Bvd,iBAAAohB,EACAphB,WAAAqhB,EC3kBZ,IAIMK,GAAQxP,KAAKvE,IAAI,OA0BrBgU,0BAAA,WAEE,IAAMrC,IAAWtf,KAAK4hB,MAAS,GAAO5hB,KAAK6hB,UAE3C,OADA7hB,KAAK6hB,WACEvC,OAjBT,YAAY3e,GACV,IAAkBmhB,EAGlB9hB,KAAK6f,OAHaiC,EAGInhB,EAAS,EAF7BiS,SAAUV,KAAKvE,IAAImU,GAAOJ,GAAe,KAG3C1hB,KAAK6hB,SAAW7hB,KAAK6f,MAAQ,EAC7B,IAHiB7N,EAGX+P,GAHW/P,EAGIhS,KAAK6f,MAHQjN,SAASjT,MAAMqS,EAAO,GAAGpM,KAAK,KAAM,IAItE5F,KAAK4hB,MAASjhB,EAAS,EAAKohB,EA6BhC,IC5CIC,GCkBAzE,GF0BS0E,GAAgB,SAC3BC,EACArN,EACAsN,EACAC,GAEAF,EAAUtQ,KAAKiD,GAEf,IAAMwN,EAAoB,SACxBC,EACAjT,GAEA,IACIkT,EACAtZ,EAFEtI,EAAS0O,EAAOiT,EAGtB,GAAc,GAAV3hB,EACF,OAAO,KACF,GAAc,GAAVA,EAGT,OAFA4hB,EAAYL,EAAUI,GACtBrZ,EAAMkZ,EAAQA,EAAMI,GAAeA,EAC5B,IAAI5C,GACT1W,EACCsZ,EAAUzG,KACX6D,GAAS2B,MACT,KACA,MAGF,IAAMkB,EAAS5P,SAAUjS,EAAS,EAAW,IAAM2hB,EAC7C7N,EAAO4N,EAAkBC,EAAKE,GAC9B9N,EAAQ2N,EAAkBG,EAAS,EAAGnT,GAG5C,OAFAkT,EAAYL,EAAUM,GACtBvZ,EAAMkZ,EAAQA,EAAMI,GAAeA,EAC5B,IAAI5C,GACT1W,EACCsZ,EAAUzG,KACX6D,GAAS2B,MACT7M,EACAC,IAgDA+N,EA3CmB,SAASC,GA2BhC,IA1BA,IAAI5G,EAAuB,KACvB2G,EAAO,KACP3E,EAAQoE,EAAUvhB,OAEhBgiB,EAAe,SAASC,EAAmBhD,GAC/C,IAAM0C,EAAMxE,EAAQ8E,EACdvT,EAAOyO,EACbA,GAAS8E,EACT,IAAMC,EAAYR,EAAwB,EAANC,EAASjT,GACvCkT,EAAYL,EAAUI,GACtBrZ,EAASkZ,EAAQA,EAAMI,GAAeA,EAC5CO,EACE,IAAInD,GAAS1W,EAAMsZ,EAAUzG,KAAmB8D,EAAO,KAAMiD,KAI3DC,EAAgB,SAASC,GAG3BjH,EAFEA,EACFA,EAAKrH,KAAOsO,EAGZN,EAAOM,GAKFviB,EAAI,EAAGA,EAAIkiB,EAAO7C,QAASrf,EAAG,CACrC,IAAMwiB,EAAQN,EAAOO,eAEfL,EAAY1Q,KAAKE,IAAI,EAAGsQ,EAAO7C,OAASrf,EAAI,IAC9CwiB,EACFL,EAAaC,EAAWjD,GAAS2B,QAGjCqB,EAAaC,EAAWjD,GAAS2B,OACjCqB,EAAaC,EAAWjD,GAASoB,MAGrC,OAAO0B,EAIIS,CADE,IAAIvB,GAAUO,EAAUvhB,SAGvC,OAAO,IAAI0f,GAAgB+B,GAAcvN,EAAa4N,IClIlDU,GAAiB,OAMrB3jB,sBAAW4jB,kBAAX,WAWE,OAVAtf,EACoBgb,GAClB,uCAEFkD,GACEA,IACA,IAAIoB,GACF,CAAEjF,YAAagF,IACf,CAAEhF,YAAaW,sCAYrBsE,iBAAA,SAAIC,GACF,IAAMC,EAAY9Y,EAAQxK,KAAKujB,SAAUF,GACzC,IAAKC,EAAW,MAAM,IAAIpf,MAAM,wBAA0Bmf,GAE1D,OAAIC,aAAqBjD,GAChBiD,EAIA,MAIXF,sBAAA,SAASI,GACP,OAAOlZ,EAAStK,KAAKyjB,UAAWD,EAAgBta,aAGlDka,sBAAA,SACEI,EACAE,GAEA5f,EACE0f,IAAoB9G,GACpB,uEAMF,IAJA,IAUIiH,EAVEzB,EAAY,GACd0B,GAAkB,EAChBC,EAAOH,EAAiBI,YAAYjI,GAAUkI,MAChDtiB,EAAOoiB,EAAKG,UACTviB,GACLmiB,EACEA,GAAmBJ,EAAgBS,YAAYxiB,EAAKqa,MACtDoG,EAAU7f,KAAKZ,GACfA,EAAOoiB,EAAKG,UAIZL,EADEC,EACS3B,GAAcC,EAAWsB,EAAgBU,cAEzCf,GAEb,IAAMgB,EAAYX,EAAgBta,WAC5Bkb,OAAmBpkB,KAAKyjB,WAC9BW,EAAYD,GAAaX,EACzB,IAAMa,OAAkBrkB,KAAKujB,UAE7B,OADAc,EAAWF,GAAaR,EACjB,IAAIP,GAASiB,EAAYD,IAMlChB,0BAAA,SACEb,EACAmB,GAFF,WAwCE,OAAO,IAAIN,GApCQ1Y,EACjB1K,KAAKujB,SACL,SAACe,EAA6CH,GAC5C,IAAMrG,EAAQtT,EAAQjD,EAAKkc,UAAWU,GAEtC,GADArgB,EAAOga,EAAO,oCAAsCqG,GAChDG,IAAoBnB,GAAgB,CAEtC,GAAIrF,EAAMmG,YAAY1B,EAAUzG,MAAO,CAKrC,IAHA,IAAMoG,EAAY,GACZ2B,EAAOH,EAAiBI,YAAYjI,GAAUkI,MAChDtiB,EAAOoiB,EAAKG,UACTviB,GACDA,EAAKmM,MAAQ2U,EAAU3U,MACzBsU,EAAU7f,KAAKZ,GAEjBA,EAAOoiB,EAAKG,UAGd,OADA9B,EAAU7f,KAAKkgB,GACRN,GAAcC,EAAWpE,EAAMoG,cAGtC,OAAOf,GAGT,IAAMoB,EAAeb,EAAiBxT,IAAIqS,EAAU3U,MAChD4W,EAAcF,EAMlB,OALIC,IACFC,EAAcA,EAAYzU,OACxB,IAAI8L,GAAU0G,EAAU3U,KAAM2W,KAG3BC,EAAYrE,OAAOoC,EAAWA,EAAUzG,QAIrB9b,KAAKyjB,YAMvCL,+BAAA,SACEb,EACAmB,GAoBA,OAAO,IAAIN,GAlBQ1Y,EAAI1K,KAAKujB,SAAU,SACpCe,GAEA,GAAIA,IAAoBnB,GAEtB,OAAOmB,EAEP,IAAMC,EAAeb,EAAiBxT,IAAIqS,EAAU3U,MACpD,OAAI2W,EACKD,EAAgBvU,OACrB,IAAI8L,GAAU0G,EAAU3U,KAAM2W,IAIzBD,IAImBtkB,KAAKyjB,gBA/HvC,YACUF,EAGAE,GAHAzjB,cAAAujB,EAGAvjB,eAAAyjB,EEnCZ,SAGgBgB,GAAqBhQ,EAAiBC,GACpD,OAAOnD,GAAYkD,EAAK7G,KAAM8G,EAAM9G,MAGtC,SAAgB8W,GAAgBjQ,EAAcC,GAC5C,OAAOnD,GAAYkD,EAAMC,GD6B3B,WAGElV,sBAAWmlB,qBAAX,WACE,OAEGpH,GADDA,IACc,IAAIoH,GAChB,IAAItE,GAAwBqE,IAC5B,KACAtB,GAASwB,0CAmCfD,wBAAA,WACE,OAAO,GAITA,yBAAA,WACE,OAAO3kB,KAAKmd,eAAiBI,IAI/BoH,4BAAA,SAAevH,GACb,OAAIpd,KAAK6kB,UAAUpa,UAEVzK,KAEA,IAAI2kB,GAAa3kB,KAAK6kB,UAAWzH,EAAiBpd,KAAK8kB,YAKlEH,+BAAA,SAAkBrH,GAEhB,GAAkB,cAAdA,EACF,OAAOtd,KAAK+c,cAEZ,IAAM5H,EAAQnV,KAAK6kB,UAAU3U,IAAIoN,GACjC,OAAiB,OAAVnI,EAAiBoI,GAAapI,GAKzCwP,sBAAA,SAAS/O,GACP,IAAMgI,EAAQhI,EAAKvB,WACnB,OAAc,OAAVuJ,EAAuB5d,KAEpBA,KAAK+kB,kBAAkBnH,GAAOoH,SAASpP,EAAKpB,aAIrDmQ,sBAAA,SAASrH,GACP,OAAyC,OAAlCtd,KAAK6kB,UAAU3U,IAAIoN,IAI5BqH,kCAAA,SAAqBrH,EAAmBG,GAEtC,GADA3Z,EAAO2Z,EAAc,8CACH,cAAdH,EACF,OAAOtd,KAAK0d,eAAeD,GAE3B,IAC8BwH,EADxB1C,EAAY,IAAI1G,GAAUyB,EAAWG,GACvC+G,SAAaU,SAajB,OAVEA,EAFEzH,EAAahT,WACf+Z,EAAcxkB,KAAK6kB,UAAU9U,OAAOuN,GACtBtd,KAAK8kB,UAAUK,kBAC3B5C,EACAviB,KAAK6kB,aAGPL,EAAcxkB,KAAK6kB,UAAU1E,OAAO7C,EAAWG,GACjCzd,KAAK8kB,UAAUM,aAAa7C,EAAWviB,KAAK6kB,YAG5DI,EAAcT,EAAY/Z,UAAY8S,GAAavd,KAAKmd,cACjD,IAAIwH,GAAaH,EAAaS,EAAaC,IAKtDP,yBAAA,SAAY/O,EAAY6H,GACtB,IAAMG,EAAQhI,EAAKvB,WACnB,GAAc,OAAVuJ,EACF,OAAOH,EAEP3Z,EACsB,cAApB8R,EAAKvB,YAAmD,IAArBuB,EAAKb,YACxC,8CAEF,IAAMsQ,EAAoBrlB,KAAK+kB,kBAAkBnH,GAAOC,YACtDjI,EAAKpB,WACLiJ,GAEF,OAAOzd,KAAK2d,qBAAqBC,EAAOyH,IAK5CV,qBAAA,WACE,OAAO3kB,KAAK6kB,UAAUpa,WAIxBka,yBAAA,WACE,OAAO3kB,KAAK6kB,UAAUhF,SAUxB8E,iBAAA,SAAI3G,GACF,GAAIhe,KAAKyK,UAAW,OAAO,KAE3B,IAAMF,EAAgC,GAClC+a,EAAU,EACZrF,EAAS,EACTsF,GAAiB,EAYnB,GAXAvlB,KAAKwlB,aAAa1G,GAAgB,SAAS7V,EAAauU,GACtDjT,EAAItB,GAAOuU,EAAUpP,IAAI4P,GAEzBsH,IACIC,GAAkBZ,GAAatR,gBAAgBtL,KAAKkB,GACtDgX,EAAS/N,KAAK2D,IAAIoK,EAAQzP,OAAOvH,IAEjCsc,GAAiB,KAIhBvH,GAAgBuH,GAAkBtF,EAAS,EAAIqF,EAAS,CAE3D,IAAMG,EAAmB,GACzB,IAAK,IAAIxc,KAAOsB,EAAKkb,EAAOxc,GAAyBsB,EAAItB,GAEzD,OAAOwc,EAKP,OAHIzH,IAAiBhe,KAAK+c,cAActS,YACtCF,EAAI,aAAevK,KAAK+c,cAAc3O,OAEjC7D,GAKXoa,kBAAA,WACE,GAAuB,OAAnB3kB,KAAKoe,UAAoB,CAC3B,IAAIsH,EAAS,GACR1lB,KAAK+c,cAActS,YACtBib,GACE,YACA/I,GAAiB3c,KAAK+c,cAAc3O,OACpC,KAEJpO,KAAKwlB,aAAa1G,GAAgB,SAAS7V,EAAKuU,GAC9C,IAAMmI,EAAYnI,EAAUoI,OACV,KAAdD,IAAkBD,GAAU,IAAMzc,EAAM,IAAM0c,KAGpD3lB,KAAKoe,UAAuB,KAAXsH,EAAgB,GAAKvW,EAAKuW,GAE7C,OAAO1lB,KAAKoe,WAIduG,qCAAA,SACErH,EACAE,EACAM,GAEA,IAAM+H,EAAM7lB,KAAK8lB,cAAchI,GAC/B,GAAI+H,EAAK,CACP,IAAME,EAAcF,EAAIG,kBACtB,IAAInK,GAAUyB,EAAWE,IAE3B,OAAOuI,EAAcA,EAAYnY,KAAO,KAExC,OAAO5N,KAAK6kB,UAAUmB,kBAAkB1I,IAQ5CqH,+BAAA,SAAkBnB,GAChB,IAAMqC,EAAM7lB,KAAK8lB,cAActC,GAC/B,GAAIqC,EAAK,CACP,IAAMrE,EAASqE,EAAIrE,SACnB,OAAOA,GAAUA,EAAO5T,KAExB,OAAO5N,KAAK6kB,UAAUrD,UAQ1BmD,2BAAA,SAAcnB,GACZ,IAAMhC,EAASxhB,KAAKimB,kBAAkBzC,GACtC,OAAIhC,EACK,IAAI3F,GAAU2F,EAAQxhB,KAAK6kB,UAAU3U,IAAIsR,IAEzC,MASXmD,8BAAA,SAAiBnB,GACf,IAAMqC,EAAM7lB,KAAK8lB,cAActC,GAC/B,GAAIqC,EAAK,CACP,IAAM5F,EAAS4F,EAAI5F,SACnB,OAAOA,GAAUA,EAAOrS,KAExB,OAAO5N,KAAK6kB,UAAU5E,UAQ1B0E,0BAAA,SAAanB,GACX,IAAMvD,EAASjgB,KAAKkmB,iBAAiB1C,GACrC,OAAIvD,EACK,IAAIpE,GAAUoE,EAAQjgB,KAAK6kB,UAAU3U,IAAI+P,IAEzC,MAOX0E,0BAAA,SACE7G,EACAC,GAEA,IAAM8H,EAAM7lB,KAAK8lB,cAAchI,GAC/B,OAAI+H,EACKA,EAAI/F,iBAAiB,SAASqG,GACnC,OAAOpI,EAAOoI,EAAYvY,KAAMuY,EAAYrK,QAGvC9b,KAAK6kB,UAAU/E,iBAAiB/B,IAQ3C4G,yBAAA,SACEnB,GAEA,OAAOxjB,KAAKomB,gBAAgB5C,EAAgB6C,UAAW7C,IASzDmB,6BAAA,SACE2B,EACA9C,GAEA,IAAMqC,EAAM7lB,KAAK8lB,cAActC,GAC/B,GAAIqC,EACF,OAAOA,EAAIO,gBAAgBE,EAAW,SAAArd,GAAO,OAAAA,IAO7C,IALA,IAAMnH,EAAW9B,KAAK6kB,UAAUuB,gBAC9BE,EAAU1Y,KACViO,GAAUkI,MAERtiB,EAAOK,EAASykB,OACL,MAAR9kB,GAAgB+hB,EAAgBvH,QAAQxa,EAAM6kB,GAAa,GAChExkB,EAASkiB,UACTviB,EAAOK,EAASykB,OAElB,OAAOzkB,GAQX6iB,gCAAA,SACEnB,GAEA,OAAOxjB,KAAKwmB,uBACVhD,EAAgBiD,UAChBjD,IASJmB,oCAAA,SACE+B,EACAlD,GAEA,IAAMqC,EAAM7lB,KAAK8lB,cAActC,GAC/B,GAAIqC,EACF,OAAOA,EAAIW,uBAAuBE,EAAS,SAASzd,GAClD,OAAOA,IAQT,IALA,IAAMnH,EAAW9B,KAAK6kB,UAAU2B,uBAC9BE,EAAQ9Y,KACRiO,GAAUkI,MAERtiB,EAAOK,EAASykB,OACL,MAAR9kB,GAAyD,EAAzC+hB,EAAgBvH,QAAQxa,EAAMilB,IACnD5kB,EAASkiB,UACTviB,EAAOK,EAASykB,OAElB,OAAOzkB,GAOX6iB,uBAAA,SAAU7P,GACR,OAAI9U,KAAKyK,UACHqK,EAAMrK,UACD,GAEC,EAEDqK,EAAMgI,cAAgBhI,EAAMrK,UAC9B,EACEqK,IAAU2H,IACX,EAGD,GAOXkI,uBAAA,SAAUnB,GACR,GACEA,IAAoB9G,IACpB1c,KAAK8kB,UAAU6B,SAASnD,GAExB,OAAOxjB,KAEP,IAAMklB,EAAcllB,KAAK8kB,UAAU8B,SACjCpD,EACAxjB,KAAK6kB,WAEP,OAAO,IAAIF,GAAa3kB,KAAK6kB,UAAW7kB,KAAKmd,cAAe+H,IAOhEP,uBAAA,SAAU7G,GACR,OAAOA,IAAUpB,IAAa1c,KAAK8kB,UAAU6B,SAAS7I,IAMxD6G,oBAAA,SAAO7P,GACL,GAAIA,IAAU9U,KACZ,OAAO,EACF,GAAI8U,EAAMgI,aACf,OAAO,EAEP,IAAM+J,EAAoB/R,EAC1B,GAAK9U,KAAK+c,cAAc8B,OAAOgI,EAAkB9J,eAE1C,CAAA,GACL/c,KAAK6kB,UAAUhF,UAAYgH,EAAkBhC,UAAUhF,QAkBvD,OAAO,EAZP,IAJA,IAAMiH,EAAW9mB,KAAK8jB,YAAYhF,IAC5BiI,EAAYF,EAAkB/C,YAAYhF,IAC5CkI,EAAcF,EAAS9C,UACvBiD,EAAeF,EAAU/C,UACtBgD,GAAeC,GAAc,CAClC,GACED,EAAYpZ,OAASqZ,EAAarZ,OACjCoZ,EAAYlL,KAAK+C,OAAOoI,EAAanL,MAEtC,OAAO,EAETkL,EAAcF,EAAS9C,UACvBiD,EAAeF,EAAU/C,UAE3B,OAAuB,OAAhBgD,GAAyC,OAAjBC,EAlB/B,OAAO,GAiCLtC,2BAAR,SACEnB,GAEA,OAAIA,IAAoB9G,GACf,KAEA1c,KAAK8kB,UAAU5U,IAAIsT,EAAgBta,aA7T/Byb,mBAAkB,qBA1HjC,YACmBE,EACA1H,EACT2H,GAFS9kB,eAAA6kB,EACA7kB,mBAAAmd,EACTnd,eAAA8kB,EAvBF9kB,eAA2B,KA8B7BA,KAAKmd,eACPP,GAAqB5c,KAAKmd,eAGxBnd,KAAK6kB,UAAUpa,WACjB3G,GACG9D,KAAKmd,eAAiBnd,KAAKmd,cAAc1S,UAC1C,wCAibN,qBACErC,aACE,IAAIiY,GAAwBqE,IAC5BC,GAAapH,WACb6F,GAASwB,eAmCR,IAAMnI,GAAW,IAxCKvU,QAAAyc,IAS3BuC,uBAAA,SAAUpS,GACR,OAAIA,IAAU9U,KACL,EAEA,GAIXknB,oBAAA,SAAOpS,GAEL,OAAOA,IAAU9U,MAGnBknB,yBAAA,WACE,OAAOlnB,MAGTknB,+BAAA,SAAkB5J,GAChB,OAAOqH,GAAapH,YAGtB2J,qBAAA,WACE,OAAO,OAqBX1nB,OAAO2nB,iBAAiBtL,GAAW,CACjCS,IAAK,CACHna,MAAO,IAAI0Z,GAAUxK,GAAUsT,GAAapH,aAE9C6J,IAAK,CACHjlB,MAAO,IAAI0Z,GAAUvK,GAAUmL,OAOnCF,GAASR,aAAe4I,GAAapH,WACrCL,GAASF,0BAA4B2H,GNpjBnClI,GMqjBSA,GJhjBTA,GIijBiBA,GEljBnB,OAAM4K,IAAY,EASlB,SAAgBpK,GACdqK,EACArP,GAEA,gBAFAA,QAEa,OAATqP,EACF,OAAO3C,GAAapH,WAoBtB,GAjBoB,iBAAT+J,GAAqB,cAAeA,IAC7CrP,EAAWqP,EAAK,cAGlBxjB,EACe,OAAbmU,GACsB,iBAAbA,GACa,iBAAbA,GACc,iBAAbA,GAAyB,QAAUA,EAC7C,uCAAyCA,GAGvB,iBAATqP,GAAqB,WAAYA,GAA2B,OAAnBA,EAAK,YACvDA,EAAOA,EAAK,WAIM,iBAATA,GAAqB,QAASA,EAEvC,OAAO,IAAIpK,GADMoK,EACarK,GAAahF,IAG7C,GAAMqP,aAAgB3nB,QAAU0nB,GA8CzB,CACL,IAAIE,EAAa5C,GAAapH,WAY9B,OAXA1L,GAAKyV,EAAM,SAACre,EAAaue,GACvB,GAAIld,EAASgd,EAAMre,IACW,MAAxBA,EAAIgI,UAAU,EAAG,GAAY,CAE/B,IAAMuM,EAAYP,GAAauK,IAC3BhK,EAAUV,cAAiBU,EAAU/S,YACvC8c,EAAOA,EAAK5J,qBAAqB1U,EAAKuU,OAKvC+J,EAAK7J,eAAeT,GAAahF,IA1DxC,IAAMwP,EAAwB,GAC1BC,GAAuB,EAc3B,GAZA7V,GAD2CyV,EACxB,SAACre,EAAKkM,GACvB,GAA4B,MAAxBlM,EAAIgI,UAAU,EAAG,GAAY,CAE/B,IAAMuM,EAAYP,GAAa9H,GAC1BqI,EAAU/S,YACbid,EACEA,IAAyBlK,EAAUT,cAActS,UACnDgd,EAASplB,KAAK,IAAIwZ,GAAU5S,EAAKuU,QAKhB,GAAnBiK,EAAS9mB,OACX,OAAOgkB,GAAapH,WAGtB,IAAMoK,EAAW1F,GACfwF,EACAhD,GACA,SAAAlC,GAAa,OAAAA,EAAU3U,MACvB8W,IAEF,GAAIgD,EAAsB,CACxB,IAAME,EAAiB3F,GACrBwF,EACA3I,GAAeoF,cAEjB,OAAO,IAAIS,GACTgD,EACA1K,GAAahF,GACb,IAAImL,GACF,CAAEjF,YAAayJ,GACf,CAAEzJ,YAAaW,MAInB,OAAO,IAAI6F,GACTgD,EACA1K,GAAahF,GACbmL,GAASwB,SCpFjB,+DPDE3H,GMyGcA,GC7CT,OAAM4K,GAAc,IA3DK3f,QAAA8T,IAI9B8L,qBAAA,SAAQvc,EAAchM,GACpB,IAAM2f,EAAW3T,EAAEuQ,KAAKqD,UAAU5f,EAAEuc,MACpC,OAAiB,IAAboD,EACK3N,GAAYhG,EAAEqC,KAAMrO,EAAEqO,MAEtBsR,GAOX4I,yBAAA,SAAYhM,GACV,OAAO,GAMTgM,iCAAA,SAAoB5L,EAAeC,GACjC,OAAQD,EAAQ2C,OAAO1C,IAMzB2L,qBAAA,WACE,OAAQjM,GAAkBS,KAM5BwL,qBAAA,WACE,OAAQjM,GAAkBuL,KAQ5BU,sBAAA,SAAStL,EAAoB5O,GAC3B,IAAMma,EAAY9K,GAAaT,GAC/B,OAAO,IAAIX,GAAUjO,EAAMma,IAM7BD,sBAAA,WACE,MAAO,kBCpDoB5f,QAAA8T,IAenBgM,0BAAV,SAAuBC,GACrB,OAAOA,EAAKjD,SAAShlB,KAAKkoB,aAM5BF,yBAAA,SAAYlM,GACV,OAAQA,EAAKkJ,SAAShlB,KAAKkoB,YAAYzd,WAMzCud,qBAAA,SAAQzc,EAAchM,GACpB,IAAM4oB,EAASnoB,KAAKooB,aAAa7c,EAAEuQ,MAC7BuM,EAASroB,KAAKooB,aAAa7oB,EAAEuc,MAC7BoD,EAAWiJ,EAAOhJ,UAAUkJ,GAClC,OAAiB,IAAbnJ,EACK3N,GAAYhG,EAAEqC,KAAMrO,EAAEqO,MAEtBsR,GAOX8I,sBAAA,SAASxL,EAAoB5O,GAC3B,IAAMma,EAAY9K,GAAaT,GACzBV,EAAO6I,GAAapH,WAAWM,YACnC7d,KAAKkoB,WACLH,GAEF,OAAO,IAAIlM,GAAUjO,EAAMkO,IAM7BkM,qBAAA,WACE,IAAMlM,EAAO6I,GAAapH,WAAWM,YAAY7d,KAAKkoB,WAAYzL,IAClE,OAAO,IAAIZ,GAAUvK,GAAUwK,IAMjCkM,sBAAA,WACE,OAAOhoB,KAAKkoB,WAAWze,QAAQ7D,KAAK,UA/DtC,YAAoBsiB,GAApB,MACE9f,2BADkBb,aAAA2gB,EAGlBpkB,GACGokB,EAAWzd,WAAuC,cAA1Byd,EAAW7T,WACpC,6DCNN,QAkBEiU,iBAAA,WAEE,OADAnc,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QAC9CX,KAAKuoB,MAAMna,OAQpBka,uBAAA,WAEE,OADAnc,EAAiB,yBAA0B,EAAG,EAAGzL,UAAUC,QACpDX,KAAKuoB,MAAMna,KAAI,IAKxBka,oBAAA,WAGE,OADAnc,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,QACjDX,KAAKwoB,aAQdF,oBAAA,WAEE,OADAnc,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,SAChDX,KAAKuoB,MAAM9d,WASrB6d,mBAAA,SAAMG,GACJtc,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QAEvD8nB,EAAkBviB,OAAOuiB,GACzBzP,GAAmB,qBAAsB,EAAGyP,GAAiB,GAE7D,IAAMC,EAAY,IAAIlV,GAAKiV,GACrBE,EAAW3oB,KAAK4oB,KAAKzT,MAAMuT,GACjC,OAAO,IAAIJ,GACTtoB,KAAKuoB,MAAMvD,SAAS0D,GACpBC,EACA7J,KAUJwJ,sBAAA,SAASG,GACPtc,EAAiB,wBAAyB,EAAG,EAAGzL,UAAUC,QAC1DqY,GAAmB,wBAAyB,EAAGyP,GAAiB,GAEhE,IAAMC,EAAY,IAAIlV,GAAKiV,GAC3B,OAAQzoB,KAAKuoB,MAAMvD,SAAS0D,GAAWje,WAQzC6d,yBAAA,WAIE,OAHAnc,EAAiB,2BAA4B,EAAG,EAAGzL,UAAUC,QAGtDX,KAAKuoB,MAAMxL,cAAc3O,OAWlCka,qBAAA,SAAQvK,GAAR,WAIE,OAHA5R,EAAiB,uBAAwB,EAAG,EAAGzL,UAAUC,QACzDkM,EAAiB,uBAAwB,EAAGkR,GAAQ,IAEhD/d,KAAKuoB,MAAMzL,gBAEM9c,KAAKuoB,MAEJ/C,aAAaxlB,KAAK6oB,OAAQ,SAAC5f,EAAK6S,GACpD,OAAOiC,EACL,IAAIuK,GAAaxM,EAAMvU,EAAKqhB,KAAKzT,MAAMlM,GAAM6V,QASnDwJ,yBAAA,WAGE,OAFAnc,EAAiB,2BAA4B,EAAG,EAAGzL,UAAUC,SAEzDX,KAAKuoB,MAAMzL,eACF9c,KAAKuoB,MAAM9d,WAG1BjL,sBAAI8oB,wBAAJ,WACE,OAAOtoB,KAAK4oB,KAAKE,0CAOnBR,yBAAA,WAGE,OAFAnc,EAAiB,2BAA4B,EAAG,EAAGzL,UAAUC,QAEtDX,KAAKuoB,MAAMQ,eAMpBT,oBAAA,WAGE,OAFAnc,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QAE9CX,KAAK4oB,MAGdppB,sBAAI8oB,wBAAJ,WACE,OAAOtoB,KAAKgpB,8CAtJd,YACmBT,EACAK,EACAC,GAFA7oB,WAAAuoB,EACAvoB,UAAA4oB,EACA5oB,YAAA6oB,ECarB,QAsBEI,qBAAA,WACE,IAAMC,EAAMlpB,KAAKob,SAAS4N,SAC1B,MAAuB,UAAnBhpB,KAAK8Y,UACAoQ,EAAItT,KAEJsT,EAAIC,YAAYvT,MAO3BqT,0BAAA,WACE,OAAOjpB,KAAK8Y,WAMdmQ,4BAAA,WACE,OAAOjpB,KAAKopB,kBAAkBC,eAAerpB,OAM/CipB,sBAAA,WACE,OACEjpB,KAAKspB,UAAUpgB,WACf,IACAlJ,KAAK8Y,UACL,IACAhP,EAAU9J,KAAKob,SAASoN,kBA/C5B,YACS1P,EAMAsQ,EACAhO,EACAmO,GARAvpB,eAAA8Y,EAMA9Y,uBAAAopB,EACAppB,cAAAob,EACApb,cAAAupB,EA2CX,QAeEC,qBAAA,WACE,OAAOxpB,KAAK4V,MAMd4T,0BAAA,WACE,MAAO,UAMTA,4BAAA,WACE,OAAOxpB,KAAKopB,kBAAkBC,eAAerpB,OAM/CwpB,sBAAA,WACE,OAAOxpB,KAAK4V,KAAK1M,WAAa,eA/BhC,YACSkgB,EACAtmB,EACA8S,GAFA5V,uBAAAopB,EACAppB,WAAA8C,EACA9C,UAAA4V,ECrCX,QAeE6T,wBAAA,SAAW3Q,GACT,MAAqB,UAAdA,GAMT2Q,yBAAA,SAAYC,EAAgBC,GAC1B,IAAM7L,EAAQ6L,EAAMC,iBAAiBC,WACrC,OAAO,IAAIZ,GACT,QACAjpB,KACA,IAAIsoB,GAAaoB,EAAOI,aAAcH,EAAMX,SAAUlL,KAO1D2L,4BAAA,SAAeM,GACb,IAAMC,EAAMhqB,KAAKiqB,SACjB,GAAiC,WAA7BF,EAAUG,eAA6B,CACzCpmB,EACE9D,KAAKmqB,gBACL,gEAEF,IAAMC,EAAWpqB,KAAKmqB,gBACtB,OAAO,WAELC,EAASxpB,KAAKopB,EAAMD,EAA0BjnB,QAGhD,IAAMunB,EAAKrqB,KAAKsqB,UAChB,OAAO,WACLD,EAAGzpB,KAAKopB,EAAMD,EAAwB3O,YAQ5CqO,+BAAA,SAAkB3mB,EAAc8S,GAC9B,OAAI5V,KAAKmqB,gBACA,IAAIX,GAAYxpB,KAAM8C,EAAO8S,GAE7B,MAOX6T,qBAAA,SAAQ3U,GACN,OAAMA,aAAiB2U,MAEX3U,EAAMwV,YAActqB,KAAKsqB,WAKjCxV,EAAMwV,YAActqB,KAAKsqB,WAAaxV,EAAMmV,WAAajqB,KAAKiqB,WAQpER,4BAAA,WACE,OAA0B,OAAnBzpB,KAAKsqB,eA/Ed,YACUA,EACAH,EACAF,GAFAjqB,eAAAsqB,EACAtqB,qBAAAmqB,EACAnqB,cAAAiqB,EAyFZ,ICrIIM,ODsJFC,wBAAA,SAAW1R,GACT,IAAI2R,EACY,mBAAd3R,EAAiC,cAAgBA,EAGnD,OAFA2R,EACmB,qBAAjBA,EAAsC,gBAAkBA,EACnDngB,EAAStK,KAAK0qB,WAAYD,IAMnCD,+BAAA,SAAkB1nB,EAAc8S,GAC9B,OAAI5V,KAAKmqB,gBACA,IAAIX,GAAYxpB,KAAM8C,EAAO8S,GAE7B,MAOX4U,yBAAA,SAAYd,EAAgBC,GAC1B7lB,EAA2B,MAApB4lB,EAAOpM,UAAmB,yCACjC,IAAM4L,EAAMS,EAAMX,SAAS7T,MAA6BuU,EAAOpM,WACzDQ,EAAQ6L,EAAMC,iBAAiBC,WACrC,OAAO,IAAIZ,GACTS,EAAOlT,KACPxW,KACA,IAAIsoB,GAAaoB,EAAOI,aAAcZ,EAAKpL,GAC3C4L,EAAOH,WAOXiB,4BAAA,SAAeT,GACb,IAAMC,EAAMhqB,KAAKiqB,SACjB,GAAiC,WAA7BF,EAAUG,eAA6B,CACzCpmB,EACE9D,KAAKmqB,gBACL,gEAEF,IAAMQ,EAAW3qB,KAAKmqB,gBACtB,OAAO,WAELQ,EAAS/pB,KAAKopB,EAAMD,EAA0BjnB,QAGhD,IAAM8nB,EAAK5qB,KAAK0qB,WAAYX,EAAwBjR,WACpD,OAAO,WACL8R,EAAGhqB,KACDopB,EACCD,EAAwB3O,SACxB2O,EAAwBR,YASjCiB,qBAAA,SAAQ1V,GAAR,WACE,GAAIA,aAAiB0V,GAAwB,CAC3C,IAAKxqB,KAAK0qB,aAAe5V,EAAM4V,WAC7B,OAAO,EACF,GAAI1qB,KAAKiqB,WAAanV,EAAMmV,SAAU,CAC3C,IAAMY,EAAYrrB,OAAO+J,KAAKuL,EAAM4V,YAC9BI,EAAWtrB,OAAO+J,KAAKvJ,KAAK0qB,YAC5BK,EAAaF,EAAUlqB,OAE7B,GAAIoqB,IADcD,EAASnqB,OACG,CAK5B,GAAmB,IAAfoqB,EAWF,OAAOD,EAASE,MACd,SAAAlS,GACE,OAAAhE,EAAM4V,WAAW5R,KAAevR,EAAKmjB,WAAW5R,KAZpD,IAAMmS,EAAWJ,EAAU,GACrBK,EAAUJ,EAAS,GACzB,QACEI,IAAYD,GACVnW,EAAM4V,WAAWO,IAChBjrB,KAAK0qB,WAAWQ,IACjBpW,EAAM4V,WAAWO,KAAcjrB,KAAK0qB,WAAWQ,MAa3D,OAAO,GAMTV,4BAAA,WACE,OAA2B,OAApBxqB,KAAK0qB,gBApHd,YACUA,EAGAP,EACAF,GAJAjqB,gBAAA0qB,EAGA1qB,qBAAAmqB,EACAnqB,cAAAiqB,ECpIZ,QACEzqB,sBAAW2rB,iCAIX,WAEE,OADArnB,EAAOymB,GAAwB,oCACxBA,QANT,SAAkCnc,GAChCmc,GAAyBnc,mCAoBZ+c,2BAAf,SAAuC1U,GACrC,IAAI2U,EAAY,KACZC,EAAU,KAQd,GAPI5U,EAAO6U,aACTF,EAAY3U,EAAO8U,sBAEjB9U,EAAO+U,WACTH,EAAU5U,EAAOgV,oBAGfhV,EAAOoT,aAAenN,GAAW,CACnC,IAAMgP,EACJ,mGAEIC,EACJ,wGAEF,GAAIlV,EAAO6U,WAAY,CAErB,GADkB7U,EAAOmV,qBACRva,GACf,MAAM,IAAInN,MAAMwnB,GACX,GAAyB,iBAAdN,EAChB,MAAM,IAAIlnB,MAAMynB,GAGpB,GAAIlV,EAAO+U,SAAU,CAEnB,GADgB/U,EAAOoV,mBACRva,GACb,MAAM,IAAIpN,MAAMwnB,GACX,GAAuB,iBAAZL,EAChB,MAAM,IAAInnB,MAAMynB,SAGf,GAAIlV,EAAOoT,aAAe/K,IAC/B,GACgB,MAAbsM,IAAsBpT,GAAgBoT,IAC3B,MAAXC,IAAoBrT,GAAgBqT,GAErC,MAAM,IAAInnB,MACR,sKAUJ,GALAJ,EACE2S,EAAOoT,qBAAsB7B,IAC3BvR,EAAOoT,aAAehC,GACxB,uBAGc,MAAbuD,GAA0C,iBAAdA,GACjB,MAAXC,GAAsC,iBAAZA,EAE3B,MAAM,IAAInnB,MACR,0FAYOinB,kBAAf,SAA8B1U,GAC5B,GACEA,EAAO6U,YACP7U,EAAO+U,UACP/U,EAAOqV,aACNrV,EAAOsV,mBAER,MAAM,IAAI7nB,MACR,uGAUEinB,4CAAR,SAAuC/e,GACrC,IAA4B,IAAxBpM,KAAKgsB,eACP,MAAM,IAAI9nB,MAAMkI,EAAS,gDAO7B+e,4BAAA,WACE,OAAOnrB,KAAKisB,cAMdd,oBAAA,WAKE,OAJAhf,EAAiB,YAAa,EAAG,EAAGzL,UAAUC,QAIvC,IAAIwqB,GAAMZ,uBAAuBvqB,KAAKksB,KAAMlsB,KAAK4V,OAU1DuV,gBAAA,SACErS,EACAxR,EACA6kB,EACApf,GAEAZ,EAAiB,WAAY,EAAG,EAAGzL,UAAUC,QAC7CkY,GAAkB,WAAY,EAAGC,GAAW,GAC5CjM,EAAiB,WAAY,EAAGvF,GAAU,GAE1C,IAAM8kB,EAAMjB,GAAMkB,yBAChB,WACAF,EACApf,GAGF,GAAkB,UAAd+L,EACF9Y,KAAKssB,aAAahlB,EAAU8kB,EAAIG,OAAQH,EAAIrf,aACvC,CACL,IAAMyf,EAA8C,GACpDA,EAAU1T,GAAaxR,EACvBtH,KAAKysB,aAAaD,EAAWJ,EAAIG,OAAQH,EAAIrf,SAE/C,OAAOzF,GASC6jB,0BAAV,SACE7jB,EACAolB,EACA3f,GAEA,IAAM4f,EAAY,IAAIlD,GACpBniB,EACAolB,GAAkB,KAClB3f,GAAW,MAEb/M,KAAKksB,KAAKU,yBAAyB5sB,KAAM2sB,IAS3CxB,0BAAA,SACEqB,EACAE,EACA3f,GAEA,IAAM4f,EAAY,IAAInC,GACpBgC,EACAE,EACA3f,GAEF/M,KAAKksB,KAAKU,yBAAyB5sB,KAAM2sB,IAQ3CxB,iBAAA,SACErS,EACAxR,EACAyF,GAEAZ,EAAiB,YAAa,EAAG,EAAGzL,UAAUC,QAC9CkY,GAAkB,YAAa,EAAGC,GAAW,GAC7CjM,EAAiB,YAAa,EAAGvF,GAAU,GAC3CwF,EAAsB,YAAa,EAAGC,GAAS,GAE/C,IAAI4f,EAAsC,KACtCH,EAAqD,KACvC,UAAd1T,EAEF6T,EAAY,IAAIlD,GADMniB,GAAY,KAGhC,KACAyF,GAAW,MAEJ+L,IACLxR,KACFklB,EAAY,IACF1T,GAAaxR,GAEzBqlB,EAAY,IAAInC,GAAuBgC,EAAW,KAAMzf,GAAW,OAErE/M,KAAKksB,KAAKW,4BAA4B7sB,KAAM2sB,IAW9CxB,kBAAA,SACErS,EACAgU,EACAC,EACAhgB,GAJF,WAMEZ,EAAiB,aAAc,EAAG,EAAGzL,UAAUC,QAC/CkY,GAAkB,aAAc,EAAGC,GAAW,GAC9CjM,EAAiB,aAAc,EAAGigB,GAAc,GAEhD,IAAMV,EAAMjB,GAAMkB,yBAChB,aACAU,EACAhgB,GAOEigB,GAAY,EACVvS,EAAW,IAAIpT,EAGrBoT,EAAS/S,QAAQC,MAAM,cAEvB,IAAMslB,EAAe,SAAC7R,GAGhB4R,IACFA,GAAY,EACZzlB,EAAK2lB,IAAIpU,EAAWmU,GAEhBH,GACFA,EAAald,KAAKwc,EAAIrf,QAAtB+f,CAA+B1R,GAEjCX,EAAShT,QAAQ2T,KAcrB,OAVApb,KAAKmtB,GACHrU,EACAmU,EACY,SAAAG,GACV7lB,EAAK2lB,IAAIpU,EAAWmU,GAEhBb,EAAIG,QAAQH,EAAIG,OAAO3c,KAAKwc,EAAIrf,QAApBqf,CAA6BgB,GAC7C3S,EAASjT,OAAO4lB,KAGb3S,EAAS/S,SAQlByjB,0BAAA,SAAakC,GAEX,GADAlhB,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QAEpC,iBAAV0sB,GACPnb,KAAKI,MAAM+a,KAAWA,GACtBA,GAAS,EAET,MAAM,IAAInpB,MACR,kEAGJ,GAAIlE,KAAKisB,aAAaH,WACpB,MAAM,IAAI5nB,MACR,uGAKJ,OAAO,IAAIinB,GACTnrB,KAAKksB,KACLlsB,KAAK4V,KACL5V,KAAKisB,aAAaqB,aAAaD,GAC/BrtB,KAAKgsB,iBASTb,yBAAA,SAAYkC,GAEV,GADAlhB,EAAiB,oBAAqB,EAAG,EAAGzL,UAAUC,QAEnC,iBAAV0sB,GACPnb,KAAKI,MAAM+a,KAAWA,GACtBA,GAAS,EAET,MAAM,IAAInpB,MACR,iEAGJ,GAAIlE,KAAKisB,aAAaH,WACpB,MAAM,IAAI5nB,MACR,sGAKJ,OAAO,IAAIinB,GACTnrB,KAAKksB,KACLlsB,KAAK4V,KACL5V,KAAKisB,aAAasB,YAAYF,GAC9BrtB,KAAKgsB,iBASTb,0BAAA,SAAavV,GAEX,GADAzJ,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QAC1C,SAATiV,EACF,MAAM,IAAI1R,MACR,2EAEG,GAAa,cAAT0R,EACT,MAAM,IAAI1R,MACR,qFAEG,GAAa,WAAT0R,EACT,MAAM,IAAI1R,MACR,+EAGJ8U,GAAmB,qBAAsB,EAAGpD,GAAM,GAClD5V,KAAKwtB,+BAA+B,sBACpC,IAAMC,EAAa,IAAIja,GAAKoC,GAC5B,GAAI6X,EAAWhjB,UACb,MAAM,IAAIvG,MACR,qFAGJ,IAAM4Z,EAAQ,IAAIkK,GAAUyF,GACtBC,EAAY1tB,KAAKisB,aAAa0B,QAAQ7P,GAG5C,OAFAqN,GAAMyC,wBAAwBF,GAEvB,IAAIvC,GAAMnrB,KAAKksB,KAAMlsB,KAAK4V,KAAM8X,GAA8B,IAOvEvC,wBAAA,WACEhf,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QACrDX,KAAKwtB,+BAA+B,oBACpC,IAAME,EAAY1tB,KAAKisB,aAAa0B,QAAQjR,IAE5C,OADAyO,GAAMyC,wBAAwBF,GACvB,IAAIvC,GAAMnrB,KAAKksB,KAAMlsB,KAAK4V,KAAM8X,GAA8B,IAOvEvC,6BAAA,WACEhf,EAAiB,wBAAyB,EAAG,EAAGzL,UAAUC,QAC1DX,KAAKwtB,+BAA+B,yBACpC,IAAME,EAAY1tB,KAAKisB,aAAa0B,QAAQ7O,IAE5C,OADAqM,GAAMyC,wBAAwBF,GACvB,IAAIvC,GAAMnrB,KAAKksB,KAAMlsB,KAAK4V,KAAM8X,GAA8B,IAOvEvC,0BAAA,WACEhf,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QACvDX,KAAKwtB,+BAA+B,sBACpC,IAAME,EAAY1tB,KAAKisB,aAAa0B,QAAQ9F,IAE5C,OADAsD,GAAMyC,wBAAwBF,GACvB,IAAIvC,GAAMnrB,KAAKksB,KAAMlsB,KAAK4V,KAAM8X,GAA8B,IAQvEvC,qBAAA,SACEhpB,EACAyL,gBADAzL,QAGAgK,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,QAClDuX,GAAwB,gBAAiB,EAAG/V,EAAOnC,KAAK4V,MAAM,GAC9DmD,GAAY,gBAAiB,EAAGnL,GAAM,GAEtC,IAAM8f,EAAY1tB,KAAKisB,aAAa4B,QAAQ1rB,EAAOyL,GAGnD,GAFAud,GAAM2C,eAAeJ,GACrBvC,GAAMyC,wBAAwBF,GAC1B1tB,KAAKisB,aAAaX,WACpB,MAAM,IAAIpnB,MACR,0FAUJ,YAJciD,IAAVhF,IAEFyL,EADAzL,EAAQ,MAGH,IAAIgpB,GAAMnrB,KAAKksB,KAAMlsB,KAAK4V,KAAM8X,EAAW1tB,KAAKgsB,iBAQzDb,mBAAA,SACEhpB,EACAyL,gBADAzL,QAGAgK,EAAiB,cAAe,EAAG,EAAGzL,UAAUC,QAChDuX,GAAwB,cAAe,EAAG/V,EAAOnC,KAAK4V,MAAM,GAC5DmD,GAAY,cAAe,EAAGnL,GAAM,GAEpC,IAAM8f,EAAY1tB,KAAKisB,aAAa8B,MAAM5rB,EAAOyL,GAGjD,GAFAud,GAAM2C,eAAeJ,GACrBvC,GAAMyC,wBAAwBF,GAC1B1tB,KAAKisB,aAAaT,SACpB,MAAM,IAAItnB,MACR,oFAKJ,OAAO,IAAIinB,GAAMnrB,KAAKksB,KAAMlsB,KAAK4V,KAAM8X,EAAW1tB,KAAKgsB,iBAUzDb,qBAAA,SAAQhpB,EAAyCyL,GAI/C,GAHAzB,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,QAClDuX,GAAwB,gBAAiB,EAAG/V,EAAOnC,KAAK4V,MAAM,GAC9DmD,GAAY,gBAAiB,EAAGnL,GAAM,GAClC5N,KAAKisB,aAAaX,WACpB,MAAM,IAAIpnB,MACR,0FAIJ,GAAIlE,KAAKisB,aAAaT,SACpB,MAAM,IAAItnB,MACR,sFAIJ,OAAOlE,KAAK6tB,QAAQ1rB,EAAOyL,GAAMmgB,MAAM5rB,EAAOyL,IAMhDud,sBAAA,WAGE,OAFAhf,EAAiB,iBAAkB,EAAG,EAAGzL,UAAUC,QAE5CX,KAAKksB,KAAKhjB,WAAalJ,KAAK4V,KAAKoY,sBAK1C7C,oBAAA,WAGE,OADAhf,EAAiB,eAAgB,EAAG,EAAGzL,UAAUC,QAC1CX,KAAKkJ,YAOdiiB,yBAAA,WACE,OAAOnrB,KAAKisB,aAAagC,kBAM3B9C,6BAAA,WACE,IAAM5gB,EAAMvK,KAAKkuB,cACXhd,EAAKS,GAAkBpH,GAC7B,MAAc,OAAP2G,EAAc,UAAYA,GAQnCia,qBAAA,SAAQrW,GAEN,GADA3I,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,UAC5CmU,aAAiBqW,IAGrB,MAAM,IAAIjnB,MADR,wFAIJ,IAAMiqB,EAAWnuB,KAAKksB,OAASpX,EAAMoX,KAC/BkC,EAAWpuB,KAAK4V,KAAKiJ,OAAO/J,EAAMc,MAClCyY,EACJruB,KAAKsuB,oBAAsBxZ,EAAMwZ,kBAEnC,OAAOH,GAAYC,GAAYC,GAWlBlD,4BAAf,SACE/e,EACAmiB,EACAxhB,GAEA,IAAMqf,EAGF,CAAEG,OAAQ,KAAMxf,QAAS,MAC7B,GAAIwhB,GAAmBxhB,EACrBqf,EAAIG,OAASgC,EACb1hB,EAAiBT,EAAQ,EAAGggB,EAAIG,QAAQ,GAExCH,EAAIrf,QAAUA,EACdD,EAAsBV,EAAQ,EAAGggB,EAAIrf,SAAS,QACzC,GAAIwhB,EAET,GAA+B,iBAApBA,GAAoD,OAApBA,EAEzCnC,EAAIrf,QAAUwhB,MACT,CAAA,GAA+B,mBAApBA,EAGhB,MAAM,IAAIrqB,MACRuI,EAAYL,EAAQ,GAAG,GACrB,0DAJJggB,EAAIG,OAASgC,EAQjB,OAAOnC,GAGT5sB,sBAAI2rB,wBAAJ,WACE,OAAOnrB,KAAKgpB,8CAtlBd,YACSkD,EACAtW,EACCqW,EACAD,GAHDhsB,UAAAksB,EACAlsB,UAAA4V,EACC5V,kBAAAisB,EACAjsB,oBAAAgsB,EClDZ,QAWEwC,kBAAA,SAAK5Y,GACH,GAAkB,MAAd5V,KAAKmC,MACP,OAAOnC,KAAKmC,MAAM6iB,SAASpP,GACtB,IAAKA,EAAKnL,WAAkC,EAArBzK,KAAKyuB,SAASC,KAAU,CACpD,IAAMC,EAAW/Y,EAAKvB,WAEtB,OADAuB,EAAOA,EAAKpB,WACRxU,KAAKyuB,SAASG,IAAID,GACF3uB,KAAKyuB,SAASve,IAAIye,GACnBE,KAAKjZ,GAEf,KAGT,OAAO,MAWX4Y,sBAAA,SAAS5Y,EAAYnN,GACnB,GAAImN,EAAKnL,UACPzK,KAAKmC,MAAQsG,EACbzI,KAAKyuB,SAASK,aACT,GAAmB,OAAf9uB,KAAKmC,MACdnC,KAAKmC,MAAQnC,KAAKmC,MAAM0b,YAAYjI,EAAMnN,OACrC,CACL,IAAMkmB,EAAW/Y,EAAKvB,WACjBrU,KAAKyuB,SAASG,IAAID,IACrB3uB,KAAKyuB,SAAS3e,IAAI6e,EAAU,IAAIH,IAGlC,IAAMrZ,EAAQnV,KAAKyuB,SAASve,IAAIye,GAChC/Y,EAAOA,EAAKpB,WACZW,EAAM4Z,SAASnZ,EAAMnN,KAUzB+lB,oBAAA,SAAO5Y,GACL,GAAIA,EAAKnL,UAGP,OAFAzK,KAAKmC,MAAQ,KACbnC,KAAKyuB,SAASK,SACP,EAEP,GAAmB,OAAf9uB,KAAKmC,MAAgB,CACvB,GAAInC,KAAKmC,MAAM2a,aAEb,OAAO,EAEP,IAAM3a,EAAQnC,KAAKmC,MACnBnC,KAAKmC,MAAQ,KAEb,IAAM6sB,EAAOhvB,KAKb,OAJAmC,EAAMqjB,aAAa1G,GAAgB,SAAS7V,EAAKgmB,GAC/CD,EAAKD,SAAS,IAAIvb,GAAKvK,GAAMgmB,KAGxBjvB,KAAKkvB,OAAOtZ,GAEhB,GAAyB,EAArB5V,KAAKyuB,SAASC,KAAU,CACjC,IAAMC,EAAW/Y,EAAKvB,WAStB,OARAuB,EAAOA,EAAKpB,YACRxU,KAAKyuB,SAASG,IAAID,IACC3uB,KAAKyuB,SAASve,IAAIye,GAAUO,OAAOtZ,IAEtD5V,KAAKyuB,SAASU,OAAOR,GAIK,IAAvB3uB,KAAKyuB,SAASC,KAErB,OAAO,GAYbF,yBAAA,SAAYY,EAAkBC,GACT,OAAfrvB,KAAKmC,MACPktB,EAAKD,EAAYpvB,KAAKmC,OAEtBnC,KAAKwlB,aAAa,SAACvc,EAAKgmB,GACtB,IAAMrZ,EAAO,IAAIpC,GAAK4b,EAAWlmB,WAAa,IAAMD,GACpDgmB,EAAKK,YAAY1Z,EAAMyZ,MAU7Bb,0BAAA,SAAaa,GACXrvB,KAAKyuB,SAASc,QAAQ,SAACN,EAAMhmB,GAC3BomB,EAAKpmB,EAAKgmB,UA1HhB,cACUjvB,WAAqB,KAEZA,cAA4C,IAAIwvB,ICqB/B,SAAvBC,GACXttB,EACAutB,GAEA,OAAKvtB,GAA0B,iBAAVA,GAGnB2B,EAAO,QAAS3B,EAAO,6CAChButB,EAAavtB,EAAM,SAHnBA,EAtBJ,ICPKwtB,GAAAA,GDiECC,GAA+B,SAC1C9T,EACA4T,GAEA,IAOIvT,EAPE0T,EAAS/T,EAAKiB,cAAc3O,MAM5B6J,EAAWwX,GAAqBI,EAAQH,GAG9C,GAAI5T,EAAKgB,aAAc,CACrB,IAAMgT,EAAWhU,EACX3Z,EAAQstB,GAAqBK,EAAS5R,WAAYwR,GACxD,OACEvtB,IAAU2tB,EAAS5R,YACnBjG,IAAa6X,EAAS/S,cAAc3O,MAE7B,IAAI8O,GAAS/a,EAAO8a,GAAahF,IAEjC6D,EAGT,IAAMiU,EAAejU,EAcrB,OAZI7D,KADJkE,EAAU4T,GACoBhT,cAAc3O,QAC1C+N,EAAUA,EAAQuB,eAAe,IAAIR,GAASjF,KAEhD8X,EAAavK,aAAa1G,GAAgB,SAASxB,EAAWE,GAC5D,IAAMC,EAAemS,GACnBpS,EACAkS,GAEEjS,IAAiBD,IACnBrB,EAAUA,EAAQwB,qBAAqBL,EAAWG,MAG/CtB,ICxGCwT,GAAAA,GAAAA,oCAEVA,uBACAA,yCACAA,2CAoCF,QAaSK,QAAO,IAAIA,IACF,GACd,EACA,MACY,GAOPA,UAAS,IAAIA,IAClB,GACgB,EAChB,MACY,GAOPA,wBAAuB,SAASC,GACrC,OAAO,IAAID,IACT,GACgB,EAChBC,GACY,QAvChB,YACSC,EACAC,EACAF,EACAG,GAHApwB,cAAAkwB,EACAlwB,gBAAAmwB,EACAnwB,aAAAiwB,EACAjwB,YAAAowB,EAEPtsB,GAAQssB,GAAUD,EAAY,uCCtDlC,ICIIE,ODuBFC,+BAAA,SAAkBhT,GAChB,GAAKtd,KAAK4V,KAAKnL,UAUR,CAAA,GAA+B,MAA3BzK,KAAKuwB,aAAapuB,MAM3B,OALA2B,EACE9D,KAAKuwB,aAAa9B,SAAShkB,UAC3B,4DAGKzK,KAEP,IAAM6iB,EAAY7iB,KAAKuwB,aAAaC,QAAQ,IAAIhd,GAAK8J,IACrD,OAAO,IAAIgT,GAAa9c,GAAKid,MAAO5N,EAAW7iB,KAAK0wB,QAdpD,OAJA5sB,EACE9D,KAAK4V,KAAKvB,aAAeiJ,EACzB,iDAEK,IAAIgT,GACTtwB,KAAK4V,KAAKpB,WACVxU,KAAKuwB,aACLvwB,KAAK0wB,aAlBX,YAC2B9a,EACA2a,EACAG,GAFA1wB,UAAA4V,EACA5V,kBAAAuwB,EACAvwB,YAAA0wB,EAd3B1wB,UAAO2vB,GAAcgB,eAGrB3wB,YAASgwB,GAAgBY,KCE3B,QAoBSC,cAAP,SAAqBtmB,GACnB,IAAI0kB,EAAyB4B,GAAcJ,MAI3C,OAHA5e,GAAKtH,EAAK,SAACme,EAAmBoI,GAC5B7B,EAAOA,EAAKnf,IAAI,IAAI0D,GAAKkV,GAAYoI,KAEhC7B,GAoBT4B,qBAAA,WACE,OAAsB,OAAf7wB,KAAKmC,OAAkBnC,KAAKyuB,SAAShkB,WAe9ComB,8CAAA,SACEtc,EACAwc,GAEA,GAAkB,MAAd/wB,KAAKmC,OAAiB4uB,EAAU/wB,KAAKmC,OACvC,MAAO,CAAEyT,KAAMpC,GAAKid,MAAOtuB,MAAOnC,KAAKmC,OAEvC,GAAIoS,EAAa9J,UACf,OAAO,KAEP,IAAMmT,EAAQrJ,EAAaF,WACrBc,EAAQnV,KAAKyuB,SAASve,IAAI0N,GAChC,GAAc,OAAVzI,EAcF,OAAO,KAbP,IAAM6b,EAA4B7b,EAAM8b,iCACtC1c,EAAaC,WACbuc,GAEF,OAAiC,MAA7BC,EAMK,KAFA,CAAEpb,KAHQ,IAAIpC,GAAKoK,GAAOzI,MAC/B6b,EAA0Bpb,MAEHzT,MAAO6uB,EAA0B7uB,QAiBpE0uB,sCAAA,SACEtc,GAEA,OAAOvU,KAAKixB,iCAAiC1c,EAAc,WAAM,OAAA,KAOnEsc,qBAAA,SAAQtc,GACN,GAAIA,EAAa9J,UACf,OAAOzK,KAEP,IAAM4d,EAAQrJ,EAAaF,WACrBwO,EAAY7iB,KAAKyuB,SAASve,IAAI0N,GACpC,OAAkB,OAAdiF,EACKA,EAAU2N,QAAQjc,EAAaC,YAE/Bqc,GAAcJ,OAY3BI,iBAAA,SAAItc,EAAoB2c,GACtB,GAAI3c,EAAa9J,UACf,OAAO,IAAIomB,GAAcK,EAAOlxB,KAAKyuB,UAErC,IAAM7Q,EAAQrJ,EAAaF,WAErB8c,GADQnxB,KAAKyuB,SAASve,IAAI0N,IAAUiT,GAAcJ,OACjC3gB,IAAIyE,EAAaC,WAAY0c,GAC9C1M,EAAcxkB,KAAKyuB,SAAStO,OAAOvC,EAAOuT,GAChD,OAAO,IAAIN,GAAc7wB,KAAKmC,MAAOqiB,IAUzCqM,oBAAA,SAAOtc,GACL,GAAIA,EAAa9J,UACf,OAAIzK,KAAKyuB,SAAShkB,UACTomB,GAAcJ,MAEd,IAAII,GAAc,KAAM7wB,KAAKyuB,UAGtC,IAAM7Q,EAAQrJ,EAAaF,WACrBc,EAAQnV,KAAKyuB,SAASve,IAAI0N,GAChC,GAAIzI,EAAO,CACT,IAAMgc,EAAWhc,EAAMpF,OAAOwE,EAAaC,YACvCgQ,SAMJ,OAJEA,EADE2M,EAAS1mB,UACGzK,KAAKyuB,SAAS1e,OAAO6N,GAErB5d,KAAKyuB,SAAStO,OAAOvC,EAAOuT,GAEzB,OAAfnxB,KAAKmC,OAAkBqiB,EAAY/Z,UAC9BomB,GAAcJ,MAEd,IAAII,GAAc7wB,KAAKmC,MAAOqiB,GAGvC,OAAOxkB,MAWb6wB,iBAAA,SAAItc,GACF,GAAIA,EAAa9J,UACf,OAAOzK,KAAKmC,MAEZ,IAAMyb,EAAQrJ,EAAaF,WACrBc,EAAQnV,KAAKyuB,SAASve,IAAI0N,GAChC,OAAIzI,EACKA,EAAMjF,IAAIqE,EAAaC,YAEvB,MAYbqc,qBAAA,SAAQtc,EAAoB6c,GAC1B,GAAI7c,EAAa9J,UACf,OAAO2mB,EAEP,IAAMxT,EAAQrJ,EAAaF,WAErB8c,GADQnxB,KAAKyuB,SAASve,IAAI0N,IAAUiT,GAAcJ,OACjCY,QAAQ9c,EAAaC,WAAY4c,GACpD5M,SAMJ,OAJEA,EADE2M,EAAS1mB,UACGzK,KAAKyuB,SAAS1e,OAAO6N,GAErB5d,KAAKyuB,SAAStO,OAAOvC,EAAOuT,GAErC,IAAIN,GAAc7wB,KAAKmC,MAAOqiB,IAYzCqM,kBAAA,SAAQlmB,GACN,OAAO3K,KAAKsxB,MAAM9d,GAAKid,MAAO9lB,IAWxBkmB,mBAAR,SACEU,EACA5mB,GAEA,IAAM6mB,EAA4B,GAOlC,OANAxxB,KAAKyuB,SAAS3O,iBAAiB,SAC7B6O,EACA9L,GAEA2O,EAAM7C,GAAY9L,EAAUyO,MAAMC,EAAUpc,MAAMwZ,GAAWhkB,KAExDA,EAAG4mB,EAAWvxB,KAAKmC,MAAOqvB,IAUnCX,wBAAA,SAAcjb,EAAY3U,GACxB,OAAOjB,KAAKyxB,YAAY7b,EAAMpC,GAAKid,MAAOxvB,IAGpC4vB,yBAAR,SACEa,EACAH,EACAtwB,GAEA,IAAMqe,IAAStf,KAAKmC,OAAQlB,EAAEswB,EAAWvxB,KAAKmC,OAC9C,GAAImd,EACF,OAAOA,EAEP,GAAIoS,EAAajnB,UACf,OAAO,KAEP,IAAMmT,EAAQ8T,EAAard,WACrBsd,EAAY3xB,KAAKyuB,SAASve,IAAI0N,GACpC,OAAI+T,EACKA,EAAUF,YACfC,EAAald,WACb+c,EAAUpc,MAAMyI,GAChB3c,GAGK,MAYf4vB,2BAAA,SACEjb,EACA3U,GAEA,OAAOjB,KAAK4xB,eAAehc,EAAMpC,GAAKid,MAAOxvB,IAGvC4vB,4BAAR,SACEa,EACAG,EACA5wB,GAEA,GAAIywB,EAAajnB,UACf,OAAOzK,KAEHA,KAAKmC,OACPlB,EAAE4wB,EAAqB7xB,KAAKmC,OAE9B,IAAMyb,EAAQ8T,EAAard,WACrBsd,EAAY3xB,KAAKyuB,SAASve,IAAI0N,GACpC,OAAI+T,EACKA,EAAUC,eACfF,EAAald,WACbqd,EAAoB1c,MAAMyI,GAC1B3c,GAGK4vB,GAAcJ,OAY3BI,qBAAA,SAAQ5vB,GACNjB,KAAK8xB,SAASte,GAAKid,MAAOxvB,IAGpB4vB,sBAAR,SACEgB,EACA5wB,GAEAjB,KAAKyuB,SAAS3O,iBAAiB,SAASxC,EAAWuF,GACjDA,EAAUiP,SAASD,EAAoB1c,MAAMmI,GAAYrc,KAEvDjB,KAAKmC,OACPlB,EAAE4wB,EAAqB7xB,KAAKmC,QAQhC0uB,0BAAA,SAAa5vB,GACXjB,KAAKyuB,SAAS3O,iBACZ,SAACxC,EAAmBuF,GACdA,EAAU1gB,OACZlB,EAAEqc,EAAWuF,EAAU1gB,UA7VxB0uB,SAAQ,IAAIA,GAAmB,UAoBtC,YACkB1uB,EACAssB,gBAAAA,EAjChB4B,GADGA,IACsB,IAAIhQ,GAC3B1P,KA+Bc3Q,WAAAmC,EACAnC,cAAAyuB,ECtCpB,QAMEsD,+BAAA,SAAkBzU,GAChB,OAAItd,KAAK4V,KAAKnL,UACL,IAAIsnB,GAAe/xB,KAAK+G,OAAQyM,GAAKid,OAErC,IAAIsB,GAAe/xB,KAAK+G,OAAQ/G,KAAK4V,KAAKpB,iBANrD,YAAmBzN,EAAgC6O,GAAhC5V,YAAA+G,EAAgC/G,UAAA4V,EAFnD5V,UAAO2vB,GAAcqC,gBCAvB,QAUEC,+BAAA,SAAkB3U,GAChB,OAAItd,KAAK4V,KAAKnL,UACL,IAAIwnB,GACTjyB,KAAK+G,OACLyM,GAAKid,MACLzwB,KAAKioB,KAAKlD,kBAAkBzH,IAGvB,IAAI2U,GAAUjyB,KAAK+G,OAAQ/G,KAAK4V,KAAKpB,WAAYxU,KAAKioB,WAdjE,YACSlhB,EACA6O,EACAqS,GAFAjoB,YAAA+G,EACA/G,UAAA4V,EACA5V,UAAAioB,EALTjoB,UAAO2vB,GAAcuC,UCCvB,QAaEC,+BAAA,SAAkB7U,GAChB,GAAItd,KAAK4V,KAAKnL,UAAW,CACvB,IAAMoY,EAAY7iB,KAAKyuB,SAAS+B,QAAQ,IAAIhd,GAAK8J,IACjD,OAAIuF,EAAUpY,UAEL,KACEoY,EAAU1gB,MAEZ,IAAI8vB,GAAUjyB,KAAK+G,OAAQyM,GAAKid,MAAO5N,EAAU1gB,OAGjD,IAAIgwB,GAAMnyB,KAAK+G,OAAQyM,GAAKid,MAAO5N,GAO5C,OAJA/e,EACE9D,KAAK4V,KAAKvB,aAAeiJ,EACzB,kEAEK,IAAI6U,GAAMnyB,KAAK+G,OAAQ/G,KAAK4V,KAAKpB,WAAYxU,KAAKyuB,WAO7D0D,sBAAA,WACE,MACE,aACAnyB,KAAK4V,KACL,KACA5V,KAAK+G,OAAOmC,WACZ,WACAlJ,KAAKyuB,SAASvlB,WACd,SA1CJ,YAC2BnC,EACA6O,EACA6Y,GAFAzuB,YAAA+G,EACA/G,UAAA4V,EACA5V,cAAAyuB,EAL3BzuB,UAAO2vB,GAAcyC,MCPvB,QAgBEC,gCAAA,WACE,OAAOryB,KAAKsyB,mBAOdD,wBAAA,WACE,OAAOryB,KAAKuyB,WAOdF,+BAAA,SAAkBzc,GAChB,GAAIA,EAAKnL,UACP,OAAOzK,KAAKwyB,uBAAyBxyB,KAAKuyB,UAG5C,IAAM5D,EAAW/Y,EAAKvB,WACtB,OAAOrU,KAAKyyB,mBAAmB9D,IAOjC0D,gCAAA,SAAmBppB,GACjB,OACGjJ,KAAKwyB,uBAAyBxyB,KAAKuyB,WAAcvyB,KAAKuoB,MAAMmK,SAASzpB,IAO1EopB,qBAAA,WACE,OAAOryB,KAAKuoB,WAjDd,YACUA,EACA+J,EACAC,GAFAvyB,WAAAuoB,EACAvoB,uBAAAsyB,EACAtyB,eAAAuyB,ECPZ,QAkCEI,6BAAA,SACEC,EACAC,EACAC,GAEA,OAAO,IAAIH,GACT,IAAIN,GAAUO,EAAWC,EAAUC,GACnC9yB,KAAK+yB,eAUTJ,8BAAA,SACEK,EACAH,EACAC,GAEA,OAAO,IAAIH,GACT3yB,KAAKizB,YACL,IAAIZ,GAAUW,EAAYH,EAAUC,KAOxCH,2BAAA,WACE,OAAO3yB,KAAKizB,aAMdN,kCAAA,WACE,OAAO3yB,KAAKizB,YAAYT,qBACpBxyB,KAAKizB,YAAYC,UACjB,MAMNP,4BAAA,WACE,OAAO3yB,KAAK+yB,cAMdJ,mCAAA,WACE,OAAO3yB,KAAK+yB,aAAaP,qBACrBxyB,KAAK+yB,aAAaG,UAClB,MA5ECP,SAAQ,IAAIA,GACjB,IAAIN,GACF1N,GAAapH,YACS,GACR,GAEhB,IAAI8U,GACF1N,GAAapH,YACS,GACR,QAlBlB,YACmB0V,EACAF,GADA/yB,iBAAAizB,EACAjzB,kBAAA+yB,ECRrB,QAaSI,eAAP,SAAmB/X,GACjB,OAAO,IAAI+X,GAAOA,GAAOC,MAAOhY,IAQ3B+X,oBAAP,SAAwBxE,EAAkBvT,GACxC,OAAO,IAAI+X,GAAOA,GAAOE,YAAajY,EAAUuT,IAQ3CwE,sBAAP,SAA0BxE,EAAkBvT,GAC1C,OAAO,IAAI+X,GAAOA,GAAOG,cAAelY,EAAUuT,IAS7CwE,sBAAP,SACExE,EACA4E,EACAC,GAEA,OAAO,IAAIL,GAAOA,GAAOM,cAAeF,EAAa5E,EAAU6E,IAQ1DL,oBAAP,SAAwBxE,EAAkBvT,GACxC,OAAO,IAAI+X,GAAOA,GAAOO,YAAatY,EAAUuT,IAK3CwE,eAAc,cAGdA,iBAAgB,gBAGhBA,iBAAgB,gBAGhBA,eAAc,cAGdA,SAAQ,YAvEf,YACS3c,EACAsT,EACAxM,EACAqW,EACApK,GAJAvpB,UAAAwW,EACAxW,kBAAA8pB,EACA9pB,eAAAsd,EACAtd,aAAA2zB,EACA3zB,cAAAupB,ECCX,QAGEqK,yBAAA,SACE3L,EACAhf,EACAkoB,EACA0C,EACA9sB,EACA+sB,GAEAhwB,EACEmkB,EAAK8L,UAAU/zB,KAAK6oB,QACpB,qDAEF,IAAMmL,EAAW/L,EAAKlD,kBAAkB9b,GAExC,OACE+qB,EAAShP,SAAS6O,GAAchV,OAAOsS,EAASnM,SAAS6O,KAKrDG,EAASvpB,WAAa0mB,EAAS1mB,UAK1Bwd,GAIiB,MAAxB6L,IACE3C,EAAS1mB,UACPwd,EAAKyK,SAASzpB,GAChB6qB,EAAqBG,iBACnBd,GAAOe,mBAAmBjrB,EAAK+qB,IAGjClwB,EACEmkB,EAAKnL,aACL,uEAGKkX,EAASvpB,UAClBqpB,EAAqBG,iBACnBd,GAAOgB,iBAAiBlrB,EAAKkoB,IAG/B2C,EAAqBG,iBACnBd,GAAOiB,mBAAmBnrB,EAAKkoB,EAAU6C,KAI3C/L,EAAKnL,cAAgBqU,EAAS1mB,UACzBwd,EAGAA,EAAKtK,qBAAqB1U,EAAKkoB,GAAUkD,UAAUr0B,KAAK6oB,UAOnE+K,4BAAA,SACED,EACAW,EACAR,GA6BA,OA3B4B,MAAxBA,IACGH,EAAQ7W,cACX6W,EAAQnO,aAAa1G,GAAgB,SAAS7V,EAAKuU,GAC5C8W,EAAQ5B,SAASzpB,IACpB6qB,EAAqBG,iBACnBd,GAAOe,mBAAmBjrB,EAAKuU,MAKlC8W,EAAQxX,cACXwX,EAAQ9O,aAAa1G,GAAgB,SAAS7V,EAAKuU,GACjD,GAAImW,EAAQjB,SAASzpB,GAAM,CACzB,IAAM+qB,EAAWL,EAAQ5O,kBAAkB9b,GACtC+qB,EAASnV,OAAOrB,IACnBsW,EAAqBG,iBACnBd,GAAOiB,mBAAmBnrB,EAAKuU,EAAWwW,SAI9CF,EAAqBG,iBACnBd,GAAOgB,iBAAiBlrB,EAAKuU,OAMhC8W,EAAQD,UAAUr0B,KAAK6oB,SAMhC+K,4BAAA,SAAeD,EAAe1O,GAC5B,OAAI0O,EAAQlpB,UACHka,GAAapH,WAEboW,EAAQjW,eAAeuH,IAOlC2O,0BAAA,WACE,OAAO,GAMTA,8BAAA,WACE,OAAO5zB,MAMT4zB,sBAAA,WACE,OAAO5zB,KAAK6oB,YAhId,YAA6BA,GAAA7oB,YAAA6oB,ECnB/B,QAME0L,8BAAA,SAAiB7K,GACf,IAAMlT,EAAOkT,EAAOlT,KACdmY,EAAWjF,EAAOpM,UACxBxZ,EACE0S,GAAQ2c,GAAOE,aACb7c,GAAQ2c,GAAOM,eACfjd,GAAQ2c,GAAOG,cACjB,6CAEFxvB,EACe,cAAb6qB,EACA,mDAEF,IAAM6F,EAAYx0B,KAAKy0B,UAAUvkB,IAAIye,GACrC,GAAI6F,EAAW,CACb,IAAME,EAAUF,EAAUhe,KAC1B,GAAIA,GAAQ2c,GAAOE,aAAeqB,GAAWvB,GAAOG,cAClDtzB,KAAKy0B,UAAU3kB,IACb6e,EACAwE,GAAOiB,mBACLzF,EACAjF,EAAOI,aACP0K,EAAU1K,oBAGT,GACLtT,GAAQ2c,GAAOG,eACfoB,GAAWvB,GAAOE,YAElBrzB,KAAKy0B,UAAUtF,OAAOR,QACjB,GACLnY,GAAQ2c,GAAOG,eACfoB,GAAWvB,GAAOM,cAElBzzB,KAAKy0B,UAAU3kB,IACb6e,EACAwE,GAAOe,mBAAmBvF,EAAU6F,EAAUb,eAE3C,GACLnd,GAAQ2c,GAAOM,eACfiB,GAAWvB,GAAOE,YAElBrzB,KAAKy0B,UAAU3kB,IACb6e,EACAwE,GAAOgB,iBAAiBxF,EAAUjF,EAAOI,mBAEtC,CAAA,GACLtT,GAAQ2c,GAAOM,eACfiB,GAAWvB,GAAOM,cAWlB,MAAMxvB,EACJ,mCACEylB,EACA,mBACA8K,GAbJx0B,KAAKy0B,UAAU3kB,IACb6e,EACAwE,GAAOiB,mBACLzF,EACAjF,EAAOI,aACP0K,EAAUb,gBAYhB3zB,KAAKy0B,UAAU3kB,IAAI6e,EAAUjF,IAIjC6K,wBAAA,WACE,OAAO50B,MAAMg1B,KAAK30B,KAAKy0B,UAAUG,eA3ErC,cACmB50B,eAAiC,IAAIwvB,ICqCxD,eAyBO,IAAMqF,GAA2B,IArBtCC,8BAAA,SAAiBnG,GACf,OAAO,MAMTmG,gCAAA,SACEhX,EACA3I,EACA1C,GAEA,OAAO,cAiCTsiB,8BAAA,SAAiBpG,GACf,IAAM7S,EAAO9b,KAAKg1B,WAAWC,gBAC7B,GAAInZ,EAAK2W,mBAAmB9D,GAC1B,OAAO7S,EAAKoX,UAAUnO,kBAAkB4J,GAExC,IAAMuG,EAC4B,MAAhCl1B,KAAKm1B,wBACD,IAAI9C,GAAUryB,KAAKm1B,yBAAyB,GAAM,GAClDn1B,KAAKg1B,WAAWI,iBACtB,OAAOp1B,KAAKq1B,QAAQC,kBAAkB3G,EAAUuG,IAOpDH,gCAAA,SACEjX,EACA3I,EACA1C,GAEA,IAAM8iB,EAC4B,MAAhCv1B,KAAKm1B,wBACDn1B,KAAKm1B,wBACLn1B,KAAKg1B,WAAWQ,wBAChBC,EAAQz1B,KAAKq1B,QAAQK,iBACzBH,EACApgB,EACA,EACA1C,EACAqL,GAEF,OAAqB,IAAjB2X,EAAM90B,OACD,KAEA80B,EAAM,QA5CjB,YACUJ,EACAL,EACAG,gBAAAA,QAFAn1B,aAAAq1B,EACAr1B,gBAAAg1B,EACAh1B,6BAAAm1B,EC3DZ,OAKE,SACkBQ,EACAC,GADA51B,eAAA21B,EACA31B,aAAA41B,OAgBlBC,2BAAA,SAAcF,GACZ7xB,EACE6xB,EACGV,gBACA/B,UACAa,UAAU/zB,KAAK81B,QAAQjM,YAC1B,0BAEF/lB,EACE6xB,EACGP,iBACAlC,UACAa,UAAU/zB,KAAK81B,QAAQjM,YAC1B,4BAWJgM,4BAAA,SACEE,EACAC,EACAC,EACAC,GAEA,IACIC,EAAcC,EADZC,EAAc,IAAI9B,GAExB,GAAIyB,EAAUxf,OAASmZ,GAAcuC,UAAW,CAC9C,IAAMoE,EAAYN,EAEhBG,EADEG,EAAUvvB,OAAOmpB,SACJlwB,KAAKu2B,oBAClBR,EACAO,EAAU1gB,KACV0gB,EAAUrO,KACVgO,EACAC,EACAG,IAGFvyB,EAAOwyB,EAAUvvB,OAAOopB,WAAY,mBAIpCiG,EACEE,EAAUvvB,OAAOqpB,QAChB2F,EAAaX,iBAAiBoB,eAC5BF,EAAU1gB,KAAKnL,UACLzK,KAAKy2B,sBAClBV,EACAO,EAAU1gB,KACV0gB,EAAUrO,KACVgO,EACAC,EACAE,EACAC,SAGC,GAAIL,EAAUxf,OAASmZ,GAAcyC,MAAO,CACjD,IAAMsE,EAAQV,EAEZG,EADEO,EAAM3vB,OAAOmpB,SACAlwB,KAAK22B,gBAClBZ,EACAW,EAAM9gB,KACN8gB,EAAMjI,SACNwH,EACAC,EACAG,IAGFvyB,EAAO4yB,EAAM3vB,OAAOopB,WAAY,mBAEhCiG,EACEM,EAAM3vB,OAAOqpB,QAAU2F,EAAaX,iBAAiBoB,aACxCx2B,KAAK42B,kBAClBb,EACAW,EAAM9gB,KACN8gB,EAAMjI,SACNwH,EACAC,EACAE,EACAC,SAGC,GAAIL,EAAUxf,OAASmZ,GAAcgB,eAAgB,CAC1D,IAAMkG,EAAeb,EAWnBG,EAVGU,EAAanG,OAUD1wB,KAAK82B,iBAClBf,EACAc,EAAajhB,KACbqgB,EACAC,EACAG,GAdar2B,KAAK+2B,cAClBhB,EACAc,EAAajhB,KACbihB,EAAatG,aACb0F,EACAC,EACAG,OAWC,CAAA,GAAIL,EAAUxf,OAASmZ,GAAcqC,gBAQ1C,MAAM/tB,EAAe,2BAA6B+xB,EAAUxf,MAP5D2f,EAAen2B,KAAKg3B,gBAClBjB,EACAC,EAAUpgB,KACVqgB,EACAI,GAKJ,IAAMT,EAAUS,EAAYY,aAE5B,OADApB,GAAcqB,oBAAoBnB,EAAcI,EAAcP,GACvD,IAAIuB,GAAgBhB,EAAcP,IAS5BC,uBAAf,SACEE,EACAI,EACAE,GAEA,IAAMzD,EAAYuD,EAAalB,gBAC/B,GAAIrC,EAAUJ,qBAAsB,CAClC,IAAM4E,EACJxE,EAAUM,UAAUpW,cAAgB8V,EAAUM,UAAUzoB,UACpD4sB,EAAkBtB,EAAauB,wBAEd,EAArBjB,EAAY11B,SACXo1B,EAAad,gBAAgBzC,sBAC7B4E,IACExE,EAAUM,UAAUrU,OAA4BwY,KAClDzE,EACEM,UACAnW,cACA8B,OAAOwY,EAAgBta,iBAE1BsZ,EAAYh0B,KACV8wB,GAAOoE,YACgBpB,EAAamB,2BAgBpCzB,iDAAR,SACEF,EACA6B,EACAvB,EACAlvB,EACAsvB,GAEA,IAAMoB,EAAe9B,EAAUV,gBAC/B,GAA8C,MAA1CgB,EAAYyB,eAAeF,GAE7B,OAAO7B,EAEP,IAAIgC,SAAezC,SACnB,GAAIsC,EAAW/sB,UAMb,GAJA3G,EACE6xB,EAAUP,iBAAiB5C,qBAC3B,8DAEEmD,EAAUP,iBAAiBoB,aAAc,CAI3C,IAAMoB,EAAcjC,EAAUH,wBACxBqC,EACJD,aAAuBjT,GACnBiT,EACAjT,GAAapH,WACbua,EAAwB7B,EAAY8B,0BACxCF,GAEFF,EAAgB33B,KAAK81B,QAAQkC,eAC3BrC,EAAUV,gBAAgB/B,UAC1B4E,EACAzB,OAEG,CACL,IAAM4B,EAAehC,EAAYiC,uBAC/BvC,EAAUH,yBAEZmC,EAAgB33B,KAAK81B,QAAQkC,eAC3BrC,EAAUV,gBAAgB/B,UAC1B+E,EACA5B,OAGC,CACL,IAAM1H,EAAW6I,EAAWnjB,WAC5B,GAAgB,aAAZsa,EAAyB,CAC3B7qB,EAC4B,GAA1B0zB,EAAWziB,YACX,yDAEF,IAAMojB,EAAeV,EAAavE,UAClCgC,EAAaS,EAAUP,iBAAiBlC,UAExC,IAAMkF,EAAkBnC,EAAYoC,mCAClCb,EACAW,EACAjD,GAGAyC,EADqB,MAAnBS,EACcp4B,KAAK81B,QAAQpY,eAC3Bya,EACAC,GAIcX,EAAavE,cAE1B,CACL,IAAMoF,EAAkBd,EAAWhjB,WAE/B+jB,SACJ,GAAId,EAAahF,mBAAmB9D,GAAW,CAC7CuG,EAAaS,EAAUP,iBAAiBlC,UACxC,IAAMsF,EAAmBvC,EAAYoC,mCACnCb,EACAC,EAAavE,UACbgC,GAGAqD,EADsB,MAApBC,EACcf,EACbvE,UACAnO,kBAAkB4J,GAClB9Q,YAAYya,EAAiBE,GAGhBf,EACbvE,UACAnO,kBAAkB4J,QAGvB4J,EAAgBtC,EAAYX,kBAC1B3G,EACAgH,EAAUP,kBAIZuC,EADmB,MAAjBY,EACcv4B,KAAK81B,QAAQjY,YAC3B4Z,EAAavE,UACbvE,EACA4J,EACAD,EACAvxB,EACAsvB,GAIcoB,EAAavE,WAInC,OAAOyC,EAAU8C,gBACfd,EACAF,EAAajF,sBAAwBgF,EAAW/sB,UAChDzK,KAAK81B,QAAQ4C,iBAgBnB7C,mCAAA,SACEE,EACAyB,EACAmB,EACA1C,EACAC,EACAE,EACAC,GAEA,IACIuC,EADEC,EAAgB9C,EAAaX,iBAE7B0D,EAAe1C,EACjBp2B,KAAK81B,QACL91B,KAAK81B,QAAQiD,mBACjB,GAAIvB,EAAW/sB,UACbmuB,EAAiBE,EAAad,eAC5Ba,EAAc3F,UACdyF,EACA,WAEG,GAAIG,EAAaJ,iBAAmBG,EAAcrC,aAAc,CAErE,IAAMwC,EAAgBH,EACnB3F,UACArV,YAAY2Z,EAAYmB,GAC3BC,EAAiBE,EAAad,eAC5Ba,EAAc3F,UACd8F,EACA,UAEG,CACL,IAAMrK,EAAW6I,EAAWnjB,WAC5B,IACGwkB,EAAcI,kBAAkBzB,IACR,EAAzBA,EAAWziB,YAGX,OAAOghB,EAET,IAAMuC,EAAkBd,EAAWhjB,WAE7BiJ,EADYob,EAAc3F,UAAUnO,kBAAkB4J,GAC7B9Q,YAAYya,EAAiBK,GAE1DC,EADc,aAAZjK,EACemK,EAAapb,eAC5Bmb,EAAc3F,UACdzV,GAGeqb,EAAajb,YAC5Bgb,EAAc3F,UACdvE,EACAlR,EACA6a,EACAzD,GACA,MAIN,IAAMsB,EAAeJ,EAAamD,iBAChCN,EACAC,EAAcrG,sBAAwBgF,EAAW/sB,UACjDquB,EAAaJ,gBAET3xB,EAAS,IAAIguB,GACjBkB,EACAE,EACAD,GAEF,OAAOl2B,KAAKm5B,oCACVhD,EACAqB,EACAvB,EACAlvB,EACAsvB,IAcJR,iCAAA,SACEE,EACAyB,EACAmB,EACA1C,EACAC,EACAG,GAEA,IACIF,EAAcwB,EADZF,EAAe1B,EAAad,gBAE5BluB,EAAS,IAAIguB,GACjBkB,EACAF,EACAG,GAEF,GAAIsB,EAAW/sB,UACbktB,EAAgB33B,KAAK81B,QAAQkC,eAC3BjC,EAAad,gBAAgB/B,UAC7ByF,EACAtC,GAEFF,EAAeJ,EAAa0C,gBAC1Bd,GACA,EACA33B,KAAK81B,QAAQ4C,oBAEV,CACL,IAAM/J,EAAW6I,EAAWnjB,WAC5B,GAAiB,cAAbsa,EACFgJ,EAAgB33B,KAAK81B,QAAQpY,eAC3BqY,EAAad,gBAAgB/B,UAC7ByF,GAEFxC,EAAeJ,EAAa0C,gBAC1Bd,EACAF,EAAajF,qBACbiF,EAAajB,kBAEV,CACL,IAAM8B,EAAkBd,EAAWhjB,WAC7Bwf,EAAWyD,EAAavE,UAAUnO,kBAAkB4J,GACtDwC,SACJ,GAAImH,EAAgB7tB,UAElB0mB,EAAWwH,MACN,CACL,IAAMnb,EAAYzW,EAAOqyB,iBAAiBzK,GAQtCwC,EAPa,MAAb3T,EAE8B,cAA9B8a,EAAgB9f,WAChBgF,EAAUwH,SAASsT,EAAgBe,UAAU5uB,UAIlC+S,EAEAA,EAAUK,YAAYya,EAAiBK,GAIzChU,GAAapH,WAG5B,GAAKyW,EAASnV,OAAOsS,GAenBgF,EAAeJ,MAfe,CAC9B,IAAMuD,EAAet5B,KAAK81B,QAAQjY,YAChC4Z,EAAavE,UACbvE,EACAwC,EACAmH,EACAvxB,EACAsvB,GAEFF,EAAeJ,EAAa0C,gBAC1Ba,EACA7B,EAAajF,qBACbxyB,KAAK81B,QAAQ4C,kBAOrB,OAAOvC,GASMN,kBAAf,SACEF,EACAhH,GAEA,OAAOgH,EAAUV,gBAAgBxC,mBAAmB9D,IAa9CkH,6BAAR,SACEF,EACA/f,EACA2jB,EACAtD,EACA2B,EACAvB,GANF,WAcMmD,EAAe7D,EA6BnB,OA5BA4D,EAAgBE,QAAQ,SAACllB,EAAciJ,GACrC,IAAMkc,EAAY9jB,EAAKT,MAAMZ,GACzBshB,GAAc8D,eAAehE,EAAW+D,EAAUrlB,cACpDmlB,EAAejyB,EAAKgvB,oBAClBiD,EACAE,EACAlc,EACAyY,EACA2B,EACAvB,MAKNkD,EAAgBE,QAAQ,SAACllB,EAAciJ,GACrC,IAAMkc,EAAY9jB,EAAKT,MAAMZ,GACxBshB,GAAc8D,eAAehE,EAAW+D,EAAUrlB,cACrDmlB,EAAejyB,EAAKgvB,oBAClBiD,EACAE,EACAlc,EACAyY,EACA2B,EACAvB,MAKCmD,GASD3D,yBAAR,SAAoB/Z,EAAY4a,GAI9B,OAHAA,EAAM+C,QAAQ,SAASllB,EAAciJ,GACnC1B,EAAOA,EAAK+B,YAAYtJ,EAAciJ,KAEjC1B,GAcD+Z,+BAAR,SACEF,EACA/f,EACA2jB,EACAtD,EACA2B,EACAxB,EACAC,GAPF,WAWE,GACEV,EACGP,iBACAlC,UACAzoB,YACFkrB,EAAUP,iBAAiB5C,qBAE5B,OAAOmD,EAST,IACIiE,EADAJ,EAAe7D,EAGjBiE,EADEhkB,EAAKnL,UACS8uB,EAEA1I,GAAcJ,MAAMY,QAAQzb,EAAM2jB,GAEpD,IAAMrE,EAAaS,EAAUP,iBAAiBlC,UAyC9C,OAxCA0G,EAAcnL,SAAS3O,iBAAiB,SAAC6O,EAAU9L,GACjD,GAAIqS,EAAWxC,SAAS/D,GAAW,CACjC,IAAMkL,EAAclE,EACjBP,iBACAlC,UACAnO,kBAAkB4J,GACfwC,EAAW5pB,EAAKuyB,YAAYD,EAAahX,GAC/C2W,EAAejyB,EAAKkvB,sBAClB+C,EACA,IAAIhmB,GAAKmb,GACTwC,EACA8E,EACA2B,EACAxB,EACAC,MAINuD,EAAcnL,SAAS3O,iBAAiB,SAAC6O,EAAUoL,GACjD,IAAMC,GACHrE,EAAUP,iBAAiB3C,mBAAmB9D,IACvB,MAAxBoL,EAAe53B,MACjB,IAAK+yB,EAAWxC,SAAS/D,KAAcqL,EAAoB,CACzD,IAAMH,EAAclE,EACjBP,iBACAlC,UACAnO,kBAAkB4J,GACfwC,EAAW5pB,EAAKuyB,YAAYD,EAAaE,GAC/CP,EAAejyB,EAAKkvB,sBAClB+C,EACA,IAAIhmB,GAAKmb,GACTwC,EACA8E,EACA2B,EACAxB,EACAC,MAKCmD,GAaD3D,2BAAR,SACEF,EACAsE,EACA1J,EACA0F,EACAC,EACAG,GAEA,GAA2C,MAAvCJ,EAAYyB,eAAeuC,GAC7B,OAAOtE,EAIT,IAAMS,EAAmBT,EAAUP,iBAAiBoB,aAI9CoB,EAAcjC,EAAUP,iBAC9B,GAA0B,MAAtB7E,EAAapuB,MAAe,CAE9B,GACG83B,EAAQxvB,WAAamtB,EAAYpF,sBAClCoF,EAAYqB,kBAAkBgB,GAE9B,OAAOj6B,KAAKy2B,sBACVd,EACAsE,EACArC,EAAY1E,UAAUlO,SAASiV,GAC/BhE,EACAC,EACAE,EACAC,GAEG,GAAI4D,EAAQxvB,UAAW,CAG5B,IAAIyvB,EAAkBrJ,GAAcJ,MAIpC,OAHAmH,EAAY1E,UAAU1N,aAAa9I,GAAW,SAAS9O,EAAMkO,GAC3Doe,EAAkBA,EAAgBpqB,IAAI,IAAI0D,GAAK5F,GAAOkO,KAEjD9b,KAAK42B,kBACVjB,EACAsE,EACAC,EACAjE,EACAC,EACAE,EACAC,GAGF,OAAOV,EAIT,IAAIwE,EAAkBtJ,GAAcJ,MAUpC,OATAF,EAAakJ,QAAQ,SAASW,EAAWj4B,GACvC,IAAMk4B,EAAkBJ,EAAQ9kB,MAAMilB,GAClCxC,EAAYqB,kBAAkBoB,KAChCF,EAAkBA,EAAgBrqB,IAChCsqB,EACAxC,EAAY1E,UAAUlO,SAASqV,OAI9Br6B,KAAK42B,kBACVjB,EACAsE,EACAE,EACAlE,EACAC,EACAE,EACAC,IAaER,6BAAR,SACEF,EACA/f,EACAqgB,EACAI,GAEA,IAAMiE,EAAgB3E,EAAUP,iBAC1Be,EAAeR,EAAUuD,iBAC7BoB,EAAcpH,UACdoH,EAAc9H,sBAAwB5c,EAAKnL,UAC3C6vB,EAAc9D,cAEhB,OAAOx2B,KAAKm5B,oCACVhD,EACAvgB,EACAqgB,EACApB,GACAwB,IAaIR,8BAAR,SACEF,EACA/f,EACAqgB,EACAsE,EACAlE,GAEA,IAAIxD,EACJ,GAAwC,MAApCoD,EAAYyB,eAAe9hB,GAC7B,OAAO+f,EAEP,IAAM5uB,EAAS,IAAIguB,GACjBkB,EACAN,EACA4E,GAEIC,EAAgB7E,EAAUV,gBAAgB/B,UAC5CyE,SACJ,GAAI/hB,EAAKnL,WAAiC,cAApBmL,EAAKvB,WAA4B,CACrD,IAAI8H,SACJ,GAAIwZ,EAAUP,iBAAiB5C,qBAC7BrW,EAAU8Z,EAAYiC,uBACpBvC,EAAUH,6BAEP,CACL,IAAMiF,EAAiB9E,EAAUP,iBAAiBlC,UAClDpvB,EACE22B,aAA0B9V,GAC1B,iDAEFxI,EAAU8Z,EAAY8B,0BACpB0C,GAGJte,EAAUA,EACVwb,EAAgB33B,KAAK81B,QAAQkC,eAC3BwC,EACAre,EACAka,OAEG,CACL,IAAM1H,EAAW/Y,EAAKvB,WAClB8c,EAAW8E,EAAYX,kBACzB3G,EACAgH,EAAUP,kBAGE,MAAZjE,GACAwE,EAAUP,iBAAiB3C,mBAAmB9D,KAE9CwC,EAAWqJ,EAAczV,kBAAkB4J,KAG3CgJ,EADc,MAAZxG,EACcnxB,KAAK81B,QAAQjY,YAC3B2c,EACA7L,EACAwC,EACAvb,EAAKpB,WACLzN,EACAsvB,GAGFV,EACGV,gBACA/B,UACAR,SAAS/D,GAGI3uB,KAAK81B,QAAQjY,YAC3B2c,EACA7L,EACAhK,GAAapH,WACb3H,EAAKpB,WACLzN,EACAsvB,GAGcmE,GAGF/vB,WACdkrB,EAAUP,iBAAiB5C,uBAG3BK,EAAWoD,EAAYiC,uBACrBvC,EAAUH,0BAEC1Y,eACX6a,EAAgB33B,KAAK81B,QAAQkC,eAC3BL,EACA9E,EACAwD,IAQR,OAHAxD,EACE8C,EAAUP,iBAAiB5C,sBACe,MAA1CyD,EAAYyB,eAAelkB,GAAKid,OAC3BkF,EAAU8C,gBACfd,EACA9E,EACA7yB,KAAK81B,QAAQ4C,qBAz2BnB,YAA6B5C,GAAA91B,aAAA81B,EC5B/B,QA6BE4E,sCAAA,SACE9E,EACA+E,EACAC,GAHF,WAKQC,EAAkB,GAClBC,EAAkB,GAuDxB,OArDAlF,EAAQrG,QAAQ,SAAA7F,GAEZA,EAAOlT,OAAS2c,GAAOM,eACvBlsB,EAAKshB,OAAOkS,oBACVrR,EAAOiK,QACPjK,EAAOI,eAGTgR,EAAMz4B,KACJ8wB,GAAO6H,iBACLtR,EAAOpM,UACPoM,EAAOI,iBAMf9pB,KAAKi7B,uBACHJ,EACA1H,GAAOG,cACPsC,EACAgF,EACAD,GAEF36B,KAAKi7B,uBACHJ,EACA1H,GAAOE,YACPuC,EACAgF,EACAD,GAEF36B,KAAKi7B,uBACHJ,EACA1H,GAAOO,YACPoH,EACAF,EACAD,GAEF36B,KAAKi7B,uBACHJ,EACA1H,GAAOM,cACPmC,EACAgF,EACAD,GAEF36B,KAAKi7B,uBACHJ,EACA1H,GAAOC,MACPwC,EACAgF,EACAD,GAGKE,GAaDH,oCAAR,SACEG,EACA/hB,EACA8c,EACAsF,EACAP,GALF,WAOQQ,EAAkBvF,EAAQwF,OAAO,SAAA1R,GAAU,OAAAA,EAAOlT,OAASsC,IAEjEqiB,EAAgBvpB,KAAK5R,KAAKq7B,gBAAgBzrB,KAAK5P,OAC/Cm7B,EAAgB5L,QAAQ,SAAA7F,GACtB,IAAM4R,EAAqB/zB,EAAKg0B,yBAC9B7R,EACAiR,GAEFO,EAAc3L,QAAQ,SAAAiM,GAChBA,EAAaC,WAAW/R,EAAOlT,OACjCqkB,EAAOx4B,KACLm5B,EAAaE,YAAYJ,EAAoB/zB,EAAKo0B,cAapDjB,sCAAR,SAAiChR,EAAgBiR,GAC/C,MAAoB,UAAhBjR,EAAOlT,MAAoC,kBAAhBkT,EAAOlT,OAGpCkT,EAAOH,SAAWoR,EAAWiB,wBAE3BlS,EAAOpM,UACPoM,EAAOI,aACP9pB,KAAK6oB,SANAa,GAkBHgR,6BAAR,SAAwBnvB,EAAWhM,GACjC,GAAmB,MAAfgM,EAAE+R,WAAoC,MAAf/d,EAAE+d,UAC3B,MAAMrZ,EAAe,sCAEvB,IAAM43B,EAAW,IAAIhgB,GAAUtQ,EAAE+R,UAAW/R,EAAEue,cACxCgS,EAAW,IAAIjgB,GAAUtc,EAAE+d,UAAW/d,EAAEuqB,cAC9C,OAAO9pB,KAAK6oB,OAAO5M,QAAQ4f,EAAUC,QAzJvC,YAAoBH,GAAA37B,YAAA27B,EAKlB37B,KAAK6oB,OAAS7oB,KAAK27B,OAAO/R,iBAAiBC,WCA/C,ICbIU,OD6EFwR,sBAAA,WACE,OAAO/7B,KAAK27B,QAMdI,4BAAA,WACE,OAAO/7B,KAAKg1B,WAAWI,iBAAiBlC,WAO1C6I,oCAAA,SAAuBnmB,GACrB,IAAMomB,EAAQh8B,KAAKg1B,WAAWQ,wBAC9B,OAAIwG,IAIAh8B,KAAK27B,OAAO/R,iBAAiBqS,iBAC3BrmB,EAAKnL,YAAcuxB,EAAMjX,kBAAkBnP,EAAKvB,YAAY5J,WAEvDuxB,EAAMhX,SAASpP,GAGnB,MAMTmmB,qBAAA,WACE,OAA2C,IAApC/7B,KAAKk8B,oBAAoBv7B,QAMlCo7B,kCAAA,SAAqB3S,GACnBppB,KAAKk8B,oBAAoB75B,KAAK+mB,IAQhC2S,qCAAA,SACE3S,EACA+S,GAEA,IAAMC,EAA8B,GACpC,GAAID,EAAa,CACfr4B,EACuB,MAArBslB,EACA,mDAEF,IAAMiT,EAAOr8B,KAAK27B,OAAO/lB,KACzB5V,KAAKk8B,oBAAoB3M,QAAQ,SAASiM,GACxCW,EAAoCA,EACpC,IAAMG,EAAad,EAAae,kBAAkBJ,EAAaE,GAC3DC,GACFF,EAAa/5B,KAAKi6B,KAKxB,GAAIlT,EAAmB,CAErB,IADA,IAAIoT,EAAY,GACPh8B,EAAI,EAAGA,EAAIR,KAAKk8B,oBAAoBv7B,SAAUH,EAAG,CACxD,IAAMi8B,EAAWz8B,KAAKk8B,oBAAoB17B,GAC1C,GAAKi8B,EAASC,QAAQtT,IAEf,GAAIA,EAAkBuT,iBAAkB,CAE7CH,EAAYA,EAAUx5B,OAAOhD,KAAKk8B,oBAAoBzyB,MAAMjJ,EAAI,IAChE,YAJAg8B,EAAUn6B,KAAKo6B,GAOnBz8B,KAAKk8B,oBAAsBM,OAE3Bx8B,KAAKk8B,oBAAsB,GAE7B,OAAOE,GAWTL,4BAAA,SACE/F,EACAC,EACAsE,GAGEvE,EAAUxf,OAASmZ,GAAcyC,OACJ,OAA7B4D,EAAUjvB,OAAOkpB,UAEjBnsB,EACE9D,KAAKg1B,WAAWQ,wBAChB,6DAEF1xB,EACE9D,KAAKg1B,WAAWsC,uBAChB,4DAIJ,IAAMvB,EAAe/1B,KAAKg1B,WACpB1V,EAAStf,KAAK48B,WAAWC,eAC7B9G,EACAC,EACAC,EACAsE,GAYF,OAVAv6B,KAAK48B,WAAWE,cAAcxd,EAAOqW,WAErC7xB,EACEwb,EAAOqW,UAAUP,iBAAiB5C,uBAC/BuD,EAAaX,iBAAiB5C,qBACjC,2DAGFxyB,KAAKg1B,WAAa1V,EAAOqW,UAElB31B,KAAK+8B,0BACVzd,EAAOsW,QACPtW,EAAOqW,UAAUV,gBAAgB/B,UACjC,OAQJ6I,8BAAA,SAAiBP,GACf,IAAM5I,EAAY5yB,KAAKg1B,WAAWC,gBAC5B+H,EAA2B,GAUjC,OATKpK,EAAUM,UAAUpW,cACL8V,EAAUM,UAClB1N,aAAa1G,GAAgB,SAAS7V,EAAKuU,GACnDwf,EAAe36B,KAAK8wB,GAAOgB,iBAAiBlrB,EAAKuU,MAGjDoV,EAAUJ,sBACZwK,EAAe36B,KAAK8wB,GAAOoE,YAAY3E,EAAUM,YAE5ClzB,KAAK+8B,0BACVC,EACApK,EAAUM,UACVsI,IAWJO,uCAAA,SACEnG,EACA+E,EACAvR,GAEA,IAAM8R,EAAgB9R,EAClB,CAACA,GACDppB,KAAKk8B,oBACT,OAAOl8B,KAAKi9B,gBAAgBC,yBAC1BtH,EACA+E,EACAO,QAzOJ,YAAoBS,EAAewB,GAAfn9B,YAAA27B,EARZ37B,yBAA2C,GASjD,IAAMyW,EAASzW,KAAK27B,OAAO/R,iBAErBwT,EAAc,IAAIxJ,GAAcnd,EAAOoT,YACvCuR,EAAS3kB,EAAO4mB,gBAMtBr9B,KAAK48B,WAAa,IAAI/G,GAAcuF,GAEpC,IAAMkC,EAAqBH,EAAiB/H,iBACtCmI,EAAoBJ,EAAiBlI,gBAGrCjC,EAAaoK,EAAYpF,eAC7BrT,GAAapH,WACb+f,EAAmBpK,UACnB,MAEIN,EAAYwI,EAAOpD,eACvBrT,GAAapH,WACbggB,EAAkBrK,UAClB,MAEI0F,EAAiB,IAAIvG,GACzBW,EACAsK,EAAmB9K,qBACnB4K,EAAY1E,gBAERf,EAAgB,IAAItF,GACxBO,EACA2K,EAAkB/K,qBAClB4I,EAAO1C,gBAOT14B,KAAKg1B,WAAa,IAAIrC,GAAUgF,EAAeiB,GAM/C54B,KAAKi9B,gBAAkB,IAAIvC,GAAe16B,KAAK27B,QC3DnD,QACEn8B,sBAAWg+B,iCAQX,WAEE,OADA15B,EAAOymB,GAAwB,oCACxBA,QAVT,SAAkCnc,GAChCtK,GACGymB,GACD,mDAEFA,GAAyBnc,mCAgB3BovB,qBAAA,WACE,OAA2B,IAApBx9B,KAAKy9B,MAAM/O,MAGpB8O,4BAAA,SACExH,EACAC,EACAyH,WAEMzN,EAAU+F,EAAUjvB,OAAOkpB,QACjC,GAAgB,OAAZA,EAAkB,CACpB,IAAM0N,EAAO39B,KAAKy9B,MAAMvtB,IAAI+f,GAE5B,OADAnsB,EAAe,MAAR65B,EAAc,gDACdA,EAAKd,eACV7G,EACAC,EACAyH,GAGF,IAAI7C,EAAkB,OAEtB,IAAmB,IAAAvxB,EAAAyQ,EAAA/Z,KAAKy9B,MAAM7I,wCAAnB+I,UACT9C,EAASA,EAAO73B,OACd26B,EAAKd,eAAe7G,EAAWC,EAAayH,qGAIhD,OAAO7C,GAcX2C,kCAAA,SACE7T,EACAP,EACA6M,EACA2B,EACAgG,GAEA,IAAM3N,EAAUtG,EAAM2E,kBAClBqP,EAAO39B,KAAKy9B,MAAMvtB,IAAI+f,GAC1B,IAAK0N,EAAM,CAET,IAAIhD,EAAa1E,EAAYiC,uBAC3B0F,EAAsBhG,EAAc,MAElCiG,GAAqB,EAEvBA,IADElD,IAGFA,EADS/C,aAAuBjT,GACnBsR,EAAY8B,0BAA0BH,GAGtCjT,GAAapH,YAFL,GAKvB,IAAMoY,EAAY,IAAIhD,GACpB,IAAIN,GACmBsI,EACrBkD,GACA,GAEF,IAAIxL,GACmBuF,EACrBgG,GACA,IAGJD,EAAO,IAAI5B,GAAKpS,EAAOgM,GACvB31B,KAAKy9B,MAAM3tB,IAAImgB,EAAS0N,GAK1B,OADAA,EAAKG,qBAAqB1U,GACnBuU,EAAKI,iBAAiB3U,IAc/BoU,qCAAA,SACE7T,EACAP,EACA+S,WAEMlM,EAAUtG,EAAM2E,kBAChB0P,EAAmB,GACrB5B,EAAwB,GACtB6B,EAAkBj+B,KAAKk+B,kBAC7B,GAAgB,YAAZjO,MAEF,IAAkC,IAAA3mB,EAAAyQ,EAAA/Z,KAAKy9B,MAAMU,yCAAW,CAA7C,IAAAC,eAACC,OAAaV,OACvBvB,EAAeA,EAAap5B,OAC1B26B,EAAKW,wBAAwBlV,EAAmB+S,IAE9CwB,EAAKlzB,YACPzK,KAAKy9B,MAAMtO,OAAOkP,GAIfV,EACEY,WACA3U,iBACAqS,gBAEH+B,EAAQ37B,KAAKs7B,EAAKY,oHAMlBZ,EAAO39B,KAAKy9B,MAAMvtB,IAAI+f,MAE1BmM,EAAeA,EAAap5B,OAC1B26B,EAAKW,wBAAwBlV,EAAmB+S,IAE9CwB,EAAKlzB,YACPzK,KAAKy9B,MAAMtO,OAAOc,GAIf0N,EACEY,WACA3U,iBACAqS,gBAEH+B,EAAQ37B,KAAKs7B,EAAKY,cAa1B,OAPIN,IAAoBj+B,KAAKk+B,mBAE3BF,EAAQ37B,KACN,IAAIm7B,GAAUjT,uBAAuBZ,EAAMuC,KAAMvC,EAAM/T,OAIpD,CAAEooB,QAASA,EAASnD,OAAQuB,IAGrCoB,2BAAA,mBACQle,EAAS,OACf,IAAmB,IAAAhW,EAAAyQ,EAAA/Z,KAAKy9B,MAAM7I,wCAAU,CAAnC,IAAM+I,UAENA,EACEY,WACA3U,iBACAqS,gBAEH3c,EAAOjd,KAAKs7B,qGAGhB,OAAOre,GAOTke,oCAAA,SAAuB5nB,WACjBgiB,EAA2B,SAC/B,IAAmB,IAAAtuB,EAAAyQ,EAAA/Z,KAAKy9B,MAAM7I,wCAAU,CAAnC,IAAM+I,UACT/F,EAAcA,GAAe+F,EAAKa,uBAAuB5oB,qGAE3D,OAAOgiB,GAGT4F,0BAAA,SAAa7T,GAEX,GADeA,EAAMC,iBACVqS,eACT,OAAOj8B,KAAKy+B,kBAEZ,IAAMxO,EAAUtG,EAAM2E,kBACtB,OAAOtuB,KAAKy9B,MAAMvtB,IAAI+f,IAI1BuN,gCAAA,SAAmB7T,GACjB,OAAmC,MAA5B3pB,KAAK0+B,aAAa/U,IAG3B6T,6BAAA,WACE,OAAiC,MAA1Bx9B,KAAKy+B,mBAGdjB,6BAAA,uBACE,IAAmB,IAAAl0B,EAAAyQ,EAAA/Z,KAAKy9B,MAAM7I,wCAAU,CAAnC,IAAM+I,UACT,GACEA,EACGY,WACA3U,iBACAqS,eAEH,OAAO0B,oGAGX,OAAO,UA7OX,cAoBmB39B,WAA2B,IAAIwvB,IChClD,QAKEmP,sBAAA,SAAS/oB,EAAYkG,GACnB,GAAIlG,EAAKnL,UACP,OAAO,IAAIk0B,GAAc,IAAI9N,GAAc/U,IAE3C,IAAM8iB,EAAW5+B,KAAK6+B,WAAWC,yBAAyBlpB,GAC1D,GAAgB,MAAZgpB,EAAkB,CACpB,IAAMG,EAAeH,EAAShpB,KAC1BzT,EAAQy8B,EAASz8B,MACfoS,EAAef,GAAKe,aAAawqB,EAAcnpB,GAErD,OADAzT,EAAQA,EAAM0b,YAAYtJ,EAAcuH,GACjC,IAAI6iB,GAAc3+B,KAAK6+B,WAAW/uB,IAAIivB,EAAc58B,IAE3D,IAAMquB,EAAU,IAAIK,GAAc/U,GAElC,OAAO,IAAI6iB,GADU3+B,KAAK6+B,WAAWxN,QAAQzb,EAAM4a,KAMzDmO,uBAAA,SAAU/oB,EAAYopB,GACpB,IAAIC,EAAWj/B,KAIf,OAHA6R,GAAKmtB,EAAS,SAASrQ,EAAkB7S,GACvCmjB,EAAWA,EAASC,SAAStpB,EAAKT,MAAMwZ,GAAW7S,KAE9CmjB,GAUTN,yBAAA,SAAY/oB,GACV,OAAIA,EAAKnL,UACAk0B,GAAclO,MAGd,IAAIkO,GADU3+B,KAAK6+B,WAAWxN,QAAQzb,EAAMib,GAAcJ,SAYrEkO,8BAAA,SAAiB/oB,GACf,OAAqC,MAA9B5V,KAAKm/B,gBAAgBvpB,IAU9B+oB,6BAAA,SAAgB/oB,GACd,IAAMgpB,EAAW5+B,KAAK6+B,WAAWC,yBAAyBlpB,GAC1D,OAAgB,MAAZgpB,EACK5+B,KAAK6+B,WACT3uB,IAAI0uB,EAAShpB,MACboP,SAASxR,GAAKe,aAAaqqB,EAAShpB,KAAMA,IAEtC,MASX+oB,iCAAA,WACE,IAAMlQ,EAAwB,GAC1B3S,EAAO9b,KAAK6+B,WAAW18B,MAkB3B,OAjBY,MAAR2Z,EAEGA,EAAKgB,cACPhB,EAAsB0J,aAAa1G,GAAgB,SAClDxB,EACAE,GAEAiR,EAASpsB,KAAK,IAAIwZ,GAAUyB,EAAWE,MAI3Cxd,KAAK6+B,WAAWpQ,SAAS3O,iBAAiB,SAASxC,EAAWuF,GACrC,MAAnBA,EAAU1gB,OACZssB,EAASpsB,KAAK,IAAIwZ,GAAUyB,EAAWuF,EAAU1gB,UAIhDssB,GAGTkQ,gCAAA,SAAmB/oB,GACjB,GAAIA,EAAKnL,UACP,OAAOzK,KAEP,IAAMo/B,EAAgBp/B,KAAKm/B,gBAAgBvpB,GAC3C,OACS,IAAI+oB,GADQ,MAAjBS,EACuB,IAAIvO,GAAcuO,GAElBp/B,KAAK6+B,WAAWrO,QAAQ5a,KASvD+oB,qBAAA,WACE,OAAO3+B,KAAK6+B,WAAWp0B,WASzBk0B,mBAAA,SAAM7iB,GACJ,OAIJ,SAASujB,EACP9qB,EACA+qB,EACAxjB,GAEA,GAAuB,MAAnBwjB,EAAUn9B,MAEZ,OAAO2Z,EAAK+B,YAAYtJ,EAAc+qB,EAAUn9B,OAEhD,IAAIo9B,EAAgB,KAkBpB,OAjBAD,EAAU7Q,SAAS3O,iBAAiB,SAAS6O,EAAU9L,GACpC,cAAb8L,GAGF7qB,EACsB,OAApB+e,EAAU1gB,MACV,6CAEFo9B,EAAgB1c,EAAU1gB,OAE1B2Z,EAAOujB,EAAkB9qB,EAAaY,MAAMwZ,GAAW9L,EAAW/G,KAIjEA,EAAKkJ,SAASzQ,GAAc9J,WAA+B,OAAlB80B,IAC5CzjB,EAAOA,EAAK+B,YAAYtJ,EAAaY,MAAM,aAAcoqB,IAEpDzjB,EA/BAujB,CAAkB7rB,GAAKid,MAAOzwB,KAAK6+B,WAAY/iB,IAlIjD6iB,SAAQ,IAAIA,GAAc,IAAI9N,GAAc,WAFnD,YAAoBgO,GAAA7+B,gBAAA6+B,ECetB,QA4BEW,yBAAA,SAAY5pB,GACV,OAAO,IAAI6pB,GAAa7pB,EAAM5V,OAWhCw/B,0BAAA,SAAa5pB,EAAYqS,EAAYyX,EAAiBC,GACpD77B,EACE47B,EAAU1/B,KAAK4/B,aACf,qDAEcz4B,IAAZw4B,IACFA,GAAU,GAEZ3/B,KAAK6/B,WAAWx9B,KAAK,CACnBuT,KAAMA,EACNqS,KAAMA,EACNyX,QAASA,EACTC,QAASA,IAGPA,IACF3/B,KAAK8/B,eAAiB9/B,KAAK8/B,eAAeZ,SAAStpB,EAAMqS,IAE3DjoB,KAAK4/B,aAAeF,GAUtBF,sBAAA,SACE5pB,EACA2jB,EACAmG,GAEA57B,EACE47B,EAAU1/B,KAAK4/B,aACf,gDAEF5/B,KAAK6/B,WAAWx9B,KAAK,CACnBuT,KAAMA,EACN6Y,SAAU8K,EACVmG,QAASA,EACTC,SAAS,IAGX3/B,KAAK8/B,eAAiB9/B,KAAK8/B,eAAeC,UAAUnqB,EAAM2jB,GAC1Dv5B,KAAK4/B,aAAeF,GAOtBF,sBAAA,SAASE,GACP,IAAK,IAAIl/B,EAAI,EAAGA,EAAIR,KAAK6/B,WAAWl/B,OAAQH,IAAK,CAC/C,IAAMw/B,EAAShgC,KAAK6/B,WAAWr/B,GAC/B,GAAIw/B,EAAON,UAAYA,EACrB,OAAOM,EAGX,OAAO,MAWTR,yBAAA,SAAYE,GAAZ,WAMQ7Z,EAAM7lB,KAAK6/B,WAAWI,UAAU,SAAS1/B,GAC7C,OAAOA,EAAEm/B,UAAYA,IAEvB57B,EAAc,GAAP+hB,EAAU,gDACjB,IAAMqa,EAAgBlgC,KAAK6/B,WAAWha,GACtC7lB,KAAK6/B,WAAWM,OAAOta,EAAK,GAO5B,IALA,IAAIua,EAAyBF,EAAcP,QACvCU,GAAsC,EAEtC7/B,EAAIR,KAAK6/B,WAAWl/B,OAAS,EAE1By/B,GAA+B,GAAL5/B,GAAQ,CACvC,IAAM8/B,EAAetgC,KAAK6/B,WAAWr/B,GACjC8/B,EAAaX,UAER9Z,GAALrlB,GACAR,KAAKugC,oBAAoBD,EAAcJ,EAActqB,MAGrDwqB,GAAyB,EAChBF,EAActqB,KAAKtL,SAASg2B,EAAa1qB,QAElDyqB,GAAsC,IAG1C7/B,IAGF,QAAK4/B,IAEMC,EAETrgC,KAAKwgC,aAIDN,EAAcjY,KAChBjoB,KAAK8/B,eAAiB9/B,KAAK8/B,eAAeW,YACxCP,EAActqB,MAIhB/D,GADiBquB,EAAczR,SAChB,SAACnR,GACd/V,EAAKu4B,eAAiBv4B,EAAKu4B,eAAeW,YACxCP,EAActqB,KAAKT,MAAMmI,OAXxB,IA0BXkiB,kCAAA,SAAqB5pB,GACnB,OAAO5V,KAAK8/B,eAAeX,gBAAgBvpB,IAa7C4pB,oCAAA,SACEkB,EACAnG,EACAoG,EACAC,GAEA,GAAKD,GAAsBC,EAmBpB,CACL,IAAMlK,EAAQ12B,KAAK8/B,eAAee,mBAAmBH,GACrD,IAAKE,GAAuBlK,EAAMjsB,UAChC,OAAO8vB,EAGP,GACGqG,GACsB,MAAvBrG,GACC7D,EAAMoK,iBAAiBttB,GAAKid,OAGxB,CACL,IAQMsQ,EAAcvB,GAAUwB,WAC5BhhC,KAAK6/B,WATQ,SAASoB,GACtB,OACGA,EAAMtB,SAAWiB,MAChBD,KACEA,EAAkBzpB,QAAQ+pB,EAAMvB,YACnCuB,EAAMrrB,KAAKtL,SAASo2B,IAAaA,EAASp2B,SAAS22B,EAAMrrB,QAM5D8qB,GAGF,OADMQ,EAAe3G,GAAuB5V,GAAapH,WAClDwjB,EAAYlgC,MAAMqgC,GAhBzB,OAAO,KA7BX,IAAM9B,EAAgBp/B,KAAK8/B,eAAeX,gBAAgBuB,GAC1D,GAAqB,MAAjBtB,EACF,OAAOA,EAEP,IAAM+B,EAAWnhC,KAAK8/B,eAAee,mBAAmBH,GACxD,GAAIS,EAAS12B,UACX,OAAO8vB,EACF,GACkB,MAAvBA,GACC4G,EAASL,iBAAiBttB,GAAKid,OAI3B,CACL,IAAMyQ,EAAe3G,GAAuB5V,GAAapH,WACzD,OAAO4jB,EAAStgC,MAAMqgC,GAHtB,OAAO,MA+Cf1B,uCAAA,SACEkB,EACAU,GAEA,IAAIvJ,EAAmBlT,GAAapH,WAC9B8jB,EAAcrhC,KAAK8/B,eAAeX,gBAAgBuB,GACxD,GAAIW,EAaF,OAZKA,EAAYvkB,cAEfukB,EAAY7b,aAAa1G,GAAgB,SACvCxB,EACAwT,GAEA+G,EAAmBA,EAAiBla,qBAClCL,EACAwT,KAIC+G,EACF,GAAIuJ,EAAwB,CAGjC,IAAME,EAAQthC,KAAK8/B,eAAee,mBAAmBH,GAoBrD,OAnBAU,EAAuB5b,aAAa1G,GAAgB,SAClDxB,EACAE,GAEA,IAAM1B,EAAOwlB,EACVT,mBAAmB,IAAIrtB,GAAK8J,IAC5Bzc,MAAM2c,GACTqa,EAAmBA,EAAiBla,qBAClCL,EACAxB,KAIJwlB,EAAMC,sBAAsBhS,QAAQ,SAAShN,GAC3CsV,EAAmBA,EAAiBla,qBAClC4E,EAAU3U,KACV2U,EAAUzG,QAGP+b,EAWP,OAPc73B,KAAK8/B,eAAee,mBAAmBH,GAC/Ca,sBAAsBhS,QAAQ,SAAShN,GAC3CsV,EAAmBA,EAAiBla,qBAClC4E,EAAU3U,KACV2U,EAAUzG,QAGP+b,GAwBX2H,gDAAA,SACEkB,EACAhY,EACA8Y,EACAC,GAEA39B,EACE09B,GAAqBC,EACrB,6DAEF,IAAM7rB,EAAO8qB,EAASvrB,MAAMuT,GAC5B,GAAI1oB,KAAK8/B,eAAegB,iBAAiBlrB,GAGvC,OAAO,KAGP,IAAM8rB,EAAa1hC,KAAK8/B,eAAee,mBAAmBjrB,GAC1D,OAAI8rB,EAAWj3B,UAENg3B,EAAmBzc,SAAS0D,GAQ5BgZ,EAAW7gC,MAAM4gC,EAAmBzc,SAAS0D,KAc1D8W,+BAAA,SACEkB,EACA/R,EACA8S,GAEA,IAAM7rB,EAAO8qB,EAASvrB,MAAMwZ,GACtByQ,EAAgBp/B,KAAK8/B,eAAeX,gBAAgBvpB,GAC1D,OAAqB,MAAjBwpB,EACKA,EAEHqC,EAAmBhP,mBAAmB9D,GACrB3uB,KAAK8/B,eAAee,mBAAmBjrB,GACxC/U,MAChB4gC,EAAmBvO,UAAUnO,kBAAkB4J,IAG1C,MAUb6Q,4BAAA,SAAe5pB,GACb,OAAO5V,KAAK8/B,eAAeX,gBAAgBvpB,IAO7C4pB,8BAAA,SACEkB,EACAnL,EACAjP,EACAzG,EACApN,EACAqL,GAEA,IAAI6jB,EACEjL,EAAQ12B,KAAK8/B,eAAee,mBAAmBH,GAC/CtB,EAAgB1I,EAAMyI,gBAAgB3rB,GAAKid,OACjD,GAAqB,MAAjB2O,EACFuC,EAAYvC,MACP,CAAA,GAA0B,MAAtB7J,EAIT,MAAO,GAHPoM,EAAYjL,EAAM71B,MAAM00B,GAM1B,IADAoM,EAAYA,EAAUtN,UAAUvW,IACjBrT,WAAck3B,EAAU7kB,aAerC,MAAO,GARP,IANA,IAAM2Y,EAAQ,GACR5gB,EAAMiJ,EAAMoG,aACZL,EAAOpR,EACRkvB,EAA2Bnb,uBAAuBF,EAAWxI,GAC7D6jB,EAA2Bvb,gBAAgBE,EAAWxI,GACvDrc,EAAOoiB,EAAKG,UACTviB,GAAQg0B,EAAM90B,OAASkf,GACC,IAAzBhL,EAAIpT,EAAM6kB,IACZmP,EAAMpzB,KAAKZ,GAEbA,EAAOoiB,EAAKG,UAEd,OAAOyR,GAMH+J,iCAAR,SAA4BoC,EAA0BhsB,GACpD,GAAIgsB,EAAY3Z,KACd,OAAO2Z,EAAYhsB,KAAKtL,SAASsL,GAEjC,IAAK,IAAM0H,KAAaskB,EAAYnT,SAClC,GACEmT,EAAYnT,SAAS5uB,eAAeyd,IACpCskB,EAAYhsB,KAAKT,MAAMmI,GAAWhT,SAASsL,GAE3C,OAAO,EAGX,OAAO,GAOH4pB,wBAAR,WACEx/B,KAAK8/B,eAAiBN,GAAUwB,WAC9BhhC,KAAK6/B,WACLL,GAAUqC,eACVruB,GAAKid,OAEsB,EAAzBzwB,KAAK6/B,WAAWl/B,OAClBX,KAAK4/B,aAAe5/B,KAAK6/B,WAAW7/B,KAAK6/B,WAAWl/B,OAAS,GAAG++B,QAEhE1/B,KAAK4/B,cAAgB,GAOVJ,kBAAf,SAA8ByB,GAC5B,OAAOA,EAAMtB,SAOAH,cAAf,SACEsC,EACA1G,EACA2G,GAGA,IADA,IAAIC,EAAgBrD,GAAclO,MACzBjwB,EAAI,EAAGA,EAAIshC,EAAOnhC,SAAUH,EAAG,CACtC,IAAMygC,EAAQa,EAAOthC,GAIrB,GAAI46B,EAAO6F,GAAQ,CACjB,IAAMvH,EAAYuH,EAAMrrB,KACpBrB,SACJ,GAAI0sB,EAAMhZ,KACJ8Z,EAASz3B,SAASovB,IACpBnlB,EAAef,GAAKe,aAAawtB,EAAUrI,GAC3CsI,EAAgBA,EAAc9C,SAAS3qB,EAAc0sB,EAAMhZ,OAClDyR,EAAUpvB,SAASy3B,KAC5BxtB,EAAef,GAAKe,aAAamlB,EAAWqI,GAC5CC,EAAgBA,EAAc9C,SAC5B1rB,GAAKid,MACLwQ,EAAMhZ,KAAKjD,SAASzQ,SAKnB,CAAA,IAAI0sB,EAAMxS,SA0Bf,MAAMxqB,EAAe,8CAzBrB,GAAI89B,EAASz3B,SAASovB,GACpBnlB,EAAef,GAAKe,aAAawtB,EAAUrI,GAC3CsI,EAAgBA,EAAcjC,UAC5BxrB,EACA0sB,EAAMxS,eAEH,GAAIiL,EAAUpvB,SAASy3B,GAE5B,IADAxtB,EAAef,GAAKe,aAAamlB,EAAWqI,IAC3Bt3B,UACfu3B,EAAgBA,EAAcjC,UAC5BvsB,GAAKid,MACLwQ,EAAMxS,cAEH,CACL,IAAMtZ,EAAQ3K,EAAQy2B,EAAMxS,SAAUla,EAAaF,YACnD,GAAIc,EAAO,CAET,IAAM8sB,EAAW9sB,EAAM6P,SAASzQ,EAAaC,YAC7CwtB,EAAgBA,EAAc9C,SAAS1rB,GAAKid,MAAOwR,OAW/D,OAAOD,OAriBX,cAQUhiC,oBAAgC2+B,GAAclO,MAU9CzwB,gBAA4B,GAE5BA,mBAAgB,EA2hB1B,QA2CEy/B,oCAAA,SACElF,EACAoG,EACAC,GAEA,OAAO5gC,KAAK6+B,WAAW3G,uBACrBl4B,KAAKkiC,UACL3H,EACAoG,EACAC,IAWJnB,uCAAA,SACE2B,GAEA,OAAOphC,KAAK6+B,WAAW9G,0BACrB/3B,KAAKkiC,UACLd,IAuBJ3B,gDAAA,SACE7pB,EACA4rB,EACAC,GAEA,OAAOzhC,KAAK6+B,WAAWxG,mCACrBr4B,KAAKkiC,UACLtsB,EACA4rB,EACAC,IAYJhC,4BAAA,SAAe7pB,GACb,OAAO5V,KAAK6+B,WAAWnH,eAAe13B,KAAKkiC,UAAU/sB,MAAMS,KAc7D6pB,8BAAA,SACElK,EACAjP,EACAzG,EACApN,EACAqL,GAEA,OAAO9d,KAAK6+B,WAAWnJ,iBACrB11B,KAAKkiC,UACL3M,EACAjP,EACAzG,EACApN,EACAqL,IAYJ2hB,+BAAA,SACE9Q,EACAwT,GAEA,OAAOniC,KAAK6+B,WAAWvJ,kBACrBt1B,KAAKkiC,UACLvT,EACAwT,IAUJ1C,mBAAA,SAAMniB,GACJ,OAAO,IAAImiB,GAAaz/B,KAAKkiC,UAAU/sB,MAAMmI,GAAYtd,KAAK6+B,iBA9IhE,YAAYjpB,EAAY0pB,GACtBt/B,KAAKkiC,UAAYtsB,EACjB5V,KAAK6+B,WAAaS,EC5iBtB,QAyBE8C,gCAAA,SACExsB,EACAysB,EACA3C,EACAC,GAKA,OAFA3/B,KAAKsiC,kBAAkBC,aAAa3sB,EAAMysB,EAAS3C,EAASC,GAEvDA,EAGI3/B,KAAKwiC,4BACV,IAAIvQ,GAAUjC,GAAgBY,KAAMhb,EAAMysB,IAHrC,IAaXD,4BAAA,SACExsB,EACA2jB,EACAmG,GAGA1/B,KAAKsiC,kBAAkBG,SAAS7sB,EAAM2jB,EAAiBmG,GAEvD,IAAMgD,EAAa7R,GAAc8R,WAAWpJ,GAE5C,OAAOv5B,KAAKwiC,4BACV,IAAIrQ,GAAMnC,GAAgBY,KAAMhb,EAAM8sB,KAU1CN,0BAAA,SAAa1C,EAAiBhP,gBAAAA,MAC5B,IAAMuQ,EAAQjhC,KAAKsiC,kBAAkBM,SAASlD,GAE9C,GADyB1/B,KAAKsiC,kBAAkB7B,YAAYf,GAGrD,CACL,IAAImD,EAAehS,GAAcJ,MASjC,OARkB,MAAdwQ,EAAMhZ,KAER4a,EAAeA,EAAa/yB,IAAI0D,GAAKid,OAAO,GAE5C5e,GAAKovB,EAAMxS,SAAU,SAAS7a,EAAoBkI,GAChD+mB,EAAeA,EAAa/yB,IAAI,IAAI0D,GAAKI,GAAakI,KAGnD9b,KAAKwiC,4BACV,IAAIlS,GAAa2Q,EAAMrrB,KAAMitB,EAAcnS,IAZ7C,MAAO,IAsBX0R,kCAAA,SAAqBxsB,EAAYysB,GAC/B,OAAOriC,KAAKwiC,4BACV,IAAIvQ,GAAUjC,GAAgB8S,OAAQltB,EAAMysB,KAShDD,8BAAA,SACExsB,EACA2jB,GAEA,IAAMmJ,EAAa7R,GAAc8R,WAAWpJ,GAE5C,OAAOv5B,KAAKwiC,4BACV,IAAIrQ,GAAMnC,GAAgB8S,OAAQltB,EAAM8sB,KAS5CN,iCAAA,SAAoBxsB,GAClB,OAAO5V,KAAKwiC,4BACV,IAAIzQ,GAAe/B,GAAgB8S,OAAQltB,KAS/CwsB,uCAAA,SAA0BxsB,EAAYqS,EAAY8a,GAChD,IAAMC,EAAWhjC,KAAKijC,gBAAgBF,GACtC,GAAgB,MAAZC,EAaF,MAAO,GAZP,IAAMpgC,EAAIw/B,GAASc,eAAeF,GAC5BG,EAAYvgC,EAAEgT,KAClBqa,EAAUrtB,EAAEqtB,QACR1b,EAAef,GAAKe,aAAa4uB,EAAWvtB,GAC5C5T,EAAK,IAAIiwB,GACbjC,GAAgBoT,qBAAqBnT,GACrC1b,EACA0T,GAEF,OAAOjoB,KAAKqjC,sBAAsBF,EAAWnhC,IAYjDogC,mCAAA,SACExsB,EACA2jB,EACAwJ,GAEA,IAAMC,EAAWhjC,KAAKijC,gBAAgBF,GACtC,GAAIC,EAAU,CACZ,IAAMpgC,EAAIw/B,GAASc,eAAeF,GAC5BG,EAAYvgC,EAAEgT,KAClBqa,EAAUrtB,EAAEqtB,QACR1b,EAAef,GAAKe,aAAa4uB,EAAWvtB,GAC5C8sB,EAAa7R,GAAc8R,WAAWpJ,GACtCv3B,EAAK,IAAImwB,GACbnC,GAAgBoT,qBAAqBnT,GACrC1b,EACAmuB,GAEF,OAAO1iC,KAAKqjC,sBAAsBF,EAAWnhC,GAG7C,MAAO,IASXogC,uCAAA,SAA0BxsB,EAAYmtB,GACpC,IAAMC,EAAWhjC,KAAKijC,gBAAgBF,GACtC,GAAIC,EAAU,CACZ,IAAMpgC,EAAIw/B,GAASc,eAAeF,GAC5BG,EAAYvgC,EAAEgT,KAClBqa,EAAUrtB,EAAEqtB,QACR1b,EAAef,GAAKe,aAAa4uB,EAAWvtB,GAC5C5T,EAAK,IAAI+vB,GACb/B,GAAgBoT,qBAAqBnT,GACrC1b,GAEF,OAAOvU,KAAKqjC,sBAAsBF,EAAWnhC,GAG7C,MAAO,IASXogC,kCAAA,SACEzY,EACAP,GAEA,IAAMxT,EAAO+T,EAAM/T,KAEfgiB,EAA2B,KAC3B0L,GAA2B,EAG/BtjC,KAAKujC,eAAeC,cAAc5tB,EAAM,SAAS6tB,EAAiBC,GAChE,IAAMnvB,EAAef,GAAKe,aAAakvB,EAAiB7tB,GACxDgiB,EAAcA,GAAe8L,EAAGlF,uBAAuBjqB,GACvD+uB,EACEA,GAA4BI,EAAGxF,oBAEnC,IAUIN,EAVA+F,EAAY3jC,KAAKujC,eAAerzB,IAAI0F,GACnC+tB,GAIHL,EACEA,GAA4BK,EAAUzF,kBACxCtG,EAAcA,GAAe+L,EAAUnF,uBAAuBhrB,GAAKid,SALnEkT,EAAY,IAAInG,GAChBx9B,KAAKujC,eAAiBvjC,KAAKujC,eAAezzB,IAAI8F,EAAM+tB,IAQnC,MAAf/L,EACFgG,GAAsB,GAEtBA,GAAsB,EACtBhG,EAAcjT,GAAapH,WACXvd,KAAKujC,eAAe/S,QAAQ5a,GACpCguB,aAAa,SAAStmB,EAAWumB,GACvC,IAAM3N,EAAgB2N,EAAerF,uBAAuBhrB,GAAKid,OAC7DyF,IACF0B,EAAcA,EAAYja,qBACxBL,EACA4Y,OAMR,IAAM4N,EAAoBH,EAAUI,mBAAmBpa,GACvD,IAAKma,IAAsBna,EAAMC,iBAAiBqS,eAAgB,CAEhE,IAAM+G,EAAWZ,GAAS4B,cAAcra,GACxC7lB,GACG9D,KAAKikC,cAAcrV,IAAIoU,GACxB,0CAEF,IAAMD,EAAMX,GAAS8B,mBACrBlkC,KAAKikC,cAAcn0B,IAAIkzB,EAAUD,GACjC/iC,KAAKmkC,cAAcr0B,IAAIizB,EAAKC,GAE9B,IAAM/M,EAAcj2B,KAAKsiC,kBAAkB8B,YAAYxuB,GACnDilB,EAAS8I,EAAU7F,qBACrBnU,EACAP,EACA6M,EACA2B,EACAgG,GAEF,IAAKkG,IAAsBR,EAA0B,CACnD,IAAM3F,EAA0BgG,EAAUjF,aAAa/U,GACvDkR,EAASA,EAAO73B,OAAOhD,KAAKqkC,eAAe1a,EAAOgU,IAEpD,OAAO9C,GAaTuH,qCAAA,SACEzY,EACAP,EACA+S,GAHF,WAMQvmB,EAAO+T,EAAM/T,KACb0uB,EAAiBtkC,KAAKujC,eAAerzB,IAAI0F,GAC3CwmB,EAAwB,GAI5B,GACEkI,IAC6B,YAA5B3a,EAAM2E,mBACLgW,EAAeP,mBAAmBpa,IACpC,CAIA,IAAM4a,EAAmBD,EAAehG,wBACtC3U,EACAP,EACA+S,GAEEmI,EAAe75B,YACjBzK,KAAKujC,eAAiBvjC,KAAKujC,eAAexzB,OAAO6F,IAEnD,IAAMooB,EAAUuG,EAAiBvG,QACjC5B,EAAemI,EAAiB1J,OAOhC,IAAM2J,GACH,IACDxG,EAAQiC,UAAU,SAAStW,GACzB,OAAOA,EAAMC,iBAAiBqS,iBAE5BwI,EAAUzkC,KAAKujC,eAAemB,WAAW9uB,EAAM,SACnDrB,EACAowB,GAEA,OAAOA,EAAgBzG,oBAGzB,GAAIsG,IAAoBC,EAAS,CAC/B,IAAMjU,EAAUxwB,KAAKujC,eAAe/S,QAAQ5a,GAG5C,IAAK4a,EAAQ/lB,UAKX,IAHA,IAAMm6B,EAAW5kC,KAAK6kC,gCAAgCrU,GAG7ChwB,EAAI,EAAGA,EAAIokC,EAASjkC,SAAUH,EAAG,CACxC,IAAMm9B,EAAOiH,EAASpkC,GACpBskC,EAAWnH,EAAKY,WACZwG,EAAW/kC,KAAKglC,uBAAuBrH,GAC7C39B,KAAKilC,gBAAgBC,eACnB9C,GAAS+C,mBAAmBL,GAC5B9kC,KAAKolC,aAAaN,GAClBC,EAASM,OACTN,EAASvqB,cAUZiqB,GAA4B,EAAjBzG,EAAQr9B,SAAew7B,IAGjCqI,EAGFxkC,KAAKilC,gBAAgBK,cACnBlD,GAAS+C,mBAAmBxb,GAFI,MAMlCqU,EAAQzO,QAAQ,SAACgW,GACf,IAAMC,EAAcj+B,EAAK08B,cAAc/zB,IACrCkyB,GAAS4B,cAAcuB,IAEzBh+B,EAAK09B,gBAAgBK,cACnBlD,GAAS+C,mBAAmBI,GAC5BC,MAMRxlC,KAAKylC,YAAYzH,GAInB,OAAO5B,GAYTgG,oCAAA,SACExsB,EACA+qB,GAEA,IACMrB,EAAYt/B,KAAKsiC,kBACjB1K,EAAc53B,KAAKujC,eAAemB,WAAW9uB,EAAM,SACvD2b,EACAoS,GAEA,IAAMpvB,EAAef,GAAKe,aAAagd,EAAW3b,GAC5CgiB,EAAc+L,EAAUnF,uBAAuBjqB,GACrD,GAAIqjB,EACF,OAAOA,IAGX,OAAO0H,EAAUpH,uBACftiB,EACAgiB,EACA+I,GAfwB,IAwBpByB,6CAAR,SACE5R,GAEA,OAAOA,EAAQkV,KACb,SAACnxB,EAAcoxB,EAAqBC,GAClC,GAAID,GAAuBA,EAAoBzH,kBAE7C,MAAO,CADcyH,EAAoBlH,mBAIzC,IAAIoH,EAAgB,GAOpB,OANIF,IACFE,EAAQF,EAAoBG,iBAE9Bj0B,GAAK+zB,EAAU,SAASG,EAAcC,GACpCH,EAAQA,EAAM7iC,OAAOgjC,KAEhBH,KAMPzD,yBAAR,SAAoB6D,GAClB,IAAK,IAAIh6B,EAAI,EAAGA,EAAIg6B,EAAQtlC,SAAUsL,EAAG,CACvC,IAAMi6B,EAAeD,EAAQh6B,GAC7B,IAAKi6B,EAAatc,iBAAiBqS,eAAgB,CAEjD,IAAMkK,EAAkB/D,GAAS4B,cAAckC,GACzCE,EAAkBpmC,KAAKikC,cAAc/zB,IAAIi2B,GAC/CnmC,KAAKikC,cAAc9U,OAAOgX,GAC1BnmC,KAAKmkC,cAAchV,OAAOiX,MAUjBhE,sBAAf,SAAkCzY,GAChC,OACEA,EAAMC,iBAAiBqS,iBACtBtS,EAAMC,iBAAiByc,YAKjB1c,EAAMX,SAENW,GASHyY,4BAAR,SAAuBzY,EAAcgU,GACnC,IAAM/nB,EAAO+T,EAAM/T,KACbmtB,EAAM/iC,KAAKolC,aAAazb,GACxBob,EAAW/kC,KAAKglC,uBAAuBrH,GAEvC9C,EAAS76B,KAAKilC,gBAAgBC,eAClC9C,GAAS+C,mBAAmBxb,GAC5BoZ,EACAgC,EAASM,OACTN,EAASvqB,YAGLgW,EAAUxwB,KAAKujC,eAAe/S,QAAQ5a,GAG5C,GAAImtB,EACFj/B,GACG0sB,EAAQruB,MAAM+7B,kBACf,0DA6BF,IAzBA,IAAMoI,EAAgB9V,EAAQkV,KAAc,SAC1CnxB,EACAoxB,EACAC,GAEA,IACGrxB,EAAa9J,WACdk7B,GACAA,EAAoBzH,kBAEpB,MAAO,CAACyH,EAAoBlH,kBAAkBF,YAG9C,IAAIgI,EAAmB,GASvB,OARIZ,IACFY,EAAUA,EAAQvjC,OAChB2iC,EAAoBG,gBAAgBp7B,IAAI,SAAAizB,GAAQ,OAAAA,EAAKY,eAGzD1sB,GAAK+zB,EAAU,SAASG,EAAcS,GACpCD,EAAUA,EAAQvjC,OAAOwjC,KAEpBD,IAGF/lC,EAAI,EAAGA,EAAI8lC,EAAc3lC,SAAUH,EAAG,CAC7C,IAAMimC,EAAcH,EAAc9lC,GAClCR,KAAKilC,gBAAgBK,cACnBlD,GAAS+C,mBAAmBsB,GAC5BzmC,KAAKolC,aAAaqB,IAIxB,OAAO5L,GAGDuH,oCAAR,SACEzE,GADF,WAGQhU,EAAQgU,EAAKY,WACbwE,EAAM/iC,KAAKolC,aAAazb,GAE9B,MAAO,CACL0b,OAAQ,WAEN,OADc1H,EAAKvI,kBAAoBzQ,GAAapH,YACvCqI,QAEfpL,WAAY,SAACksB,GACX,GAAe,OAAXA,EACF,OAAI3D,EACKx7B,EAAKo/B,0BAA0Bhd,EAAM/T,KAAMmtB,GAE3Cx7B,EAAKq/B,oBAAoBjd,EAAM/T,MAKxC,IAAM9S,E/C1IkB,SAASqF,EAAcwhB,GACvD,IAAIkd,EAAS,gBACA,YAAT1+B,EACF0+B,EACE,0FAEe,qBAAR1+B,EACT0+B,EAAS,6DACQ,eAAR1+B,IACT0+B,EAAS,8BAGX,IAAM/jC,EAAQ,IAAIoB,MAChBiE,EAAO,OAASwhB,EAAM/T,KAAK1M,WAAa,KAAO29B,GAGjD,OADC/jC,EAAcqF,KAAOA,EAAK2+B,cACpBhkC,E+C0HeikC,CAAmBL,EAAQ/c,GACzC,OAAOpiB,EAAK+2B,wBACV3U,EACsB,KACtB7mB,MAUKs/B,iBAAf,SAA6BzY,GAC3B,OAAOA,EAAM/T,KAAK1M,WAAa,IAAMygB,EAAM2E,mBAM9B8T,kBAAf,SACEY,GAEA,IAAMgE,EAAahE,EAAS9rB,QAAQ,KAKpC,OAJApT,GACkB,IAAhBkjC,GAAqBA,EAAahE,EAASriC,OAAS,EACpD,iBAEK,CACLsvB,QAAS+S,EAASnwB,OAAOm0B,EAAa,GACtCpxB,KAAM,IAAIpC,GAAKwvB,EAASnwB,OAAO,EAAGm0B,MAO9B5E,6BAAR,SAAwBW,GACtB,OAAO/iC,KAAKmkC,cAAcj0B,IAAI6yB,IAMxBX,0BAAR,SAAqBzY,GACnB,IAAMqZ,EAAWZ,GAAS4B,cAAcra,GACxC,OAAO3pB,KAAKikC,cAAc/zB,IAAI8yB,IAWjBZ,oBAAf,WACE,OAAOA,GAAS6E,iBAMV7E,mCAAR,SACEe,EACAnN,GAEA,IAAM2N,EAAY3jC,KAAKujC,eAAerzB,IAAIizB,GAC1Cr/B,EAAO6/B,EAAW,wDAClB,IAAM1N,EAAcj2B,KAAKsiC,kBAAkB8B,YAAYjB,GACvD,OAAOQ,EAAU9G,eACf7G,EACAC,EACiB,OAiBbmM,yCAAR,SAAoCpM,GAClC,OAAOh2B,KAAKknC,sBACVlR,EACAh2B,KAAKujC,eACY,KACjBvjC,KAAKsiC,kBAAkB8B,YAAY5wB,GAAKid,SAOpC2R,mCAAR,SACEpM,EACAmR,EACAvP,EACA3B,GAEA,GAAID,EAAUpgB,KAAKnL,UACjB,OAAOzK,KAAKonC,iCACVpR,EACAmR,EACAvP,EACA3B,GAGF,IAAM0N,EAAYwD,EAAcj3B,IAAIsD,GAAKid,OAGtB,MAAfmH,GAAoC,MAAb+L,IACzB/L,EAAc+L,EAAUnF,uBAAuBhrB,GAAKid,QAGtD,IAAIoK,EAAkB,GAChBvd,EAAY0Y,EAAUpgB,KAAKvB,WAC3BgzB,EAAiBrR,EAAUsR,kBAAkBhqB,GAC7CuF,EAAYskB,EAAc1Y,SAASve,IAAIoN,GAC7C,GAAIuF,GAAawkB,EAAgB,CAC/B,IAAME,EAAmB3P,EACrBA,EAAY7S,kBAAkBzH,GAC9B,KACEkqB,EAAmBvR,EAAY9gB,MAAMmI,GAC3Cud,EAASA,EAAO73B,OACdhD,KAAKknC,sBACHG,EACAxkB,EACA0kB,EACAC,IAWN,OANI7D,IACF9I,EAASA,EAAO73B,OACd2gC,EAAU9G,eAAe7G,EAAWC,EAAa2B,KAI9CiD,GAOHuH,8CAAR,SACEpM,EACAmR,EACAvP,EACA3B,GAJF,WAMQ0N,EAAYwD,EAAcj3B,IAAIsD,GAAKid,OAGtB,MAAfmH,GAAoC,MAAb+L,IACzB/L,EAAc+L,EAAUnF,uBAAuBhrB,GAAKid,QAGtD,IAAIoK,EAAkB,GAyBtB,OAxBAsM,EAAc1Y,SAAS3O,iBAAiB,SAACxC,EAAWuF,GAClD,IAAM0kB,EAAmB3P,EACrBA,EAAY7S,kBAAkBzH,GAC9B,KACEkqB,EAAmBvR,EAAY9gB,MAAMmI,GACrC+pB,EAAiBrR,EAAUsR,kBAAkBhqB,GAC/C+pB,IACFxM,EAASA,EAAO73B,OACduE,EAAK6/B,iCACHC,EACAxkB,EACA0kB,EACAC,OAMJ7D,IACF9I,EAASA,EAAO73B,OACd2gC,EAAU9G,eAAe7G,EAAWC,EAAa2B,KAI9CiD,GA9IMuH,iBAAgB,MA9lB/B,YAAoB6C,GAAAjlC,qBAAAilC,EAdZjlC,oBAA2C6wB,GAAcJ,MAKzDzwB,uBAAoB,IAAIw/B,GAEfx/B,mBAAqC,IAAIwvB,IACzCxvB,mBAAqC,IAAIwvB,IClE5D,QAGEiY,qBAAA,SAAQ7xB,GACN,OAAO5V,KAAK0nC,UAAU1iB,SAASpP,IAGjC6xB,4BAAA,SAAe7xB,EAAY+xB,GACzB3nC,KAAK0nC,UAAY1nC,KAAK0nC,UAAU7pB,YAAYjI,EAAM+xB,QARtD,cACU3nC,eAAkB2kB,GAAapH,WCHzC,QAUEqqB,sBAAA,SAASC,GACP,OAAO7nC,KAAK8nC,KAAe,SAAY,SAAED,GAAcE,KACrD,KAEA,SAASjlC,GAGP,OAAIA,GAAwB,+BAAfA,EAAMqF,MACjBwF,EAAI,kEACG,MAEA/F,QAAQJ,OAAO1E,MAM9B8kC,oCAAA,SAAuB7C,GAGrB/kC,KAAK8nC,KAAe,SAAwB,qBAAE/C,IAGhD6C,uCAAA,SAA0B7C,GACxB/kC,KAAK8nC,KAAe,SAA2B,wBAAE/C,IAGnD6C,mCAAA,WACE,IAAII,EACF,0DACAhoC,KAAK8nC,KAAKl6B,KACV,iFAEE,eAAgB5N,KAAK8nC,KAAKG,QAC5BD,GACE,uJAGO,mBAAoBhoC,KAAK8nC,KAAKG,QACvCD,GACE,2JAIFA,GACE,kKAIJt+B,GAAKs+B,QAvDP,YAAoBF,GAAA9nC,UAAA8nC,ECHtB,QAGEI,8BAAA,SAAiBt6B,EAAcu6B,gBAAAA,KACxB79B,EAAStK,KAAKooC,UAAWx6B,KAAO5N,KAAKooC,UAAUx6B,GAAQ,GAE5D5N,KAAKooC,UAAUx6B,IAASu6B,GAG1BD,iBAAA,WACE,OAAOthC,EAAS5G,KAAKooC,gBAVzB,cACUpoC,eAAqC,GCT/C,QAOSqoC,iBAAP,SAAqB1wB,GACnB,IAAM2wB,EAAa3wB,EAASzO,WAM5B,OAJKlJ,KAAKuoC,aAAaD,KACrBtoC,KAAKuoC,aAAaD,GAAc,IAAIJ,IAG/BloC,KAAKuoC,aAAaD,IAGpBD,uBAAP,SACE1wB,EACA6wB,GAEA,IAAMF,EAAa3wB,EAASzO,WAM5B,OAJKlJ,KAAKyoC,WAAWH,KACnBtoC,KAAKyoC,WAAWH,GAAcE,KAGzBxoC,KAAKyoC,WAAWH,IAvBVD,gBAAiD,GACjDA,cAAmC,OAFpD,eCMA,QAKEK,iBAAA,WACE,IAAMC,EAAW3oC,KAAK4oC,YAAY14B,MAE5B24B,OAAaF,GAQnB,OAPI3oC,KAAK8oC,OACPj3B,GAAK7R,KAAK8oC,MAAO,SAACC,EAAc5mC,GAC9B0mC,EAAME,GAAQF,EAAME,GAAQ5mC,IAGhCnC,KAAK8oC,MAAQH,EAENE,OAbT,YAAoBD,GAAA5oC,iBAAA4oC,EAFZ5oC,WAAwC,KCDlD,QA0BEgpC,yBAAA,SAAYD,GACV/oC,KAAKipC,eAAeF,IAAQ,GAGtBC,0BAAR,WAAA,WACQE,EAAQlpC,KAAKmpC,eAAej5B,MAC5Bk5B,EAA8B,GAChCC,GAAoB,EAExBx3B,GAAKq3B,EAAO,SAACH,EAAc5mC,GACb,EAARA,GAAamI,EAAS/C,EAAK0hC,eAAgBF,KAC7CK,EAAcL,GAAQ5mC,EACtBknC,GAAoB,KAIpBA,GACFrpC,KAAKspC,QAAQC,YAAYH,GAI3Bl2B,GACElT,KAAKwpC,aAAa55B,KAAK5P,MACvBkS,KAAKI,MAAsB,EAAhBJ,KAAK0J,SA7CQ,WAa5B,YAAY6tB,EAAqCH,GAAAtpC,aAAAspC,EANzCtpC,oBAA2C,GAOjDA,KAAKmpC,eAAiB,IAAIT,GAAce,GAExC,IAAMr2B,EApBmB,IAsBvB,IAAgDlB,KAAK0J,SACvD1I,GAAsBlT,KAAKwpC,aAAa55B,KAAK5P,MAAOkS,KAAKI,MAAMc,ICdnE,QAiBEs2B,yBAAA,SAAYC,GAGV,IADA,IAAIC,EAAW,KACNppC,EAAI,EAAGA,EAAImpC,EAAchpC,OAAQH,IAAK,CAC7C,IAAMupB,EAAY4f,EAAcnpC,GAC1BqpC,EAAY9f,EAAUT,UACX,OAAbsgB,GAAsBC,EAAUhrB,OAAO+qB,EAAStgB,aAClDtpB,KAAK8pC,YAAYznC,KAAKunC,GACtBA,EAAW,MAGI,OAAbA,IACFA,EAAW,IAAIG,GAAUF,IAG3BD,EAASI,IAAIjgB,GAEX6f,GACF5pC,KAAK8pC,YAAYznC,KAAKunC,IAa1BF,+BAAA,SAAkB9zB,EAAY+zB,GAC5B3pC,KAAKiqC,YAAYN,GACjB3pC,KAAKkqC,oCAAoC,SAACL,GACxC,OAAAA,EAAUhrB,OAAOjJ,MAarB8zB,uCAAA,SAA0BS,EAAmBR,GAC3C3pC,KAAKiqC,YAAYN,GAEjB3pC,KAAKkqC,oCAAoC,SAACL,GACxC,OAAOA,EAAUv/B,SAAS6/B,IAAgBA,EAAY7/B,SAASu/B,MAQ3DH,iDAAR,SACE3Y,GAEA/wB,KAAKoqC,kBAGL,IADA,IAAIC,GAAU,EACL7pC,EAAI,EAAGA,EAAIR,KAAK8pC,YAAYnpC,OAAQH,IAAK,CAChD,IAAM8pC,EAAYtqC,KAAK8pC,YAAYtpC,GAC/B8pC,IAEEvZ,EADcuZ,EAAUhhB,YAE1BtpB,KAAK8pC,YAAYtpC,GAAG+pC,QACpBvqC,KAAK8pC,YAAYtpC,GAAK,MAEtB6pC,GAAU,GAKZA,IACFrqC,KAAK8pC,YAAc,IAGrB9pC,KAAKoqC,uBAnGT,cAKUpqC,iBAA2B,GAO3BA,qBAAkB,EA+F5B,QAYE+pC,iBAAA,SAAIhgB,GACF/pB,KAAKwqC,QAAQnoC,KAAK0nB,IAMpBggB,mBAAA,WACE,IAAK,IAAIvpC,EAAI,EAAGA,EAAIR,KAAKwqC,QAAQ7pC,OAAQH,IAAK,CAC5C,IAAMupB,EAAY/pB,KAAKwqC,QAAQhqC,GAC/B,GAAkB,OAAdupB,EAAoB,CACtB/pB,KAAKwqC,QAAQhqC,GAAK,KAClB,IAAMiqC,EAAU1gB,EAAUV,iBACtB1Z,IACFhC,EAAI,UAAYoc,EAAU7gB,YAE5B6J,GAAe03B,MAQrBV,qBAAA,WACE,OAAO/pC,KAAKoa,WA9Bd,YAA6BA,GAAApa,WAAAoa,EAFrBpa,aAAmB,GC5H7B,QAgCY0qC,qBAAV,SAAkB5xB,OAAmB,aAAAtQ,mBAAAA,IAAAwH,oBACnC,GAAIrQ,MAAMoF,QAAQ/E,KAAK2qC,WAAW7xB,IAIhC,IAFA,IAAM8xB,IAAgB5qC,KAAK2qC,WAAW7xB,IAE7BtY,EAAI,EAAGA,EAAIoqC,EAAUjqC,OAAQH,IACpCoqC,EAAUpqC,GAAG8G,SAASzG,MAAM+pC,EAAUpqC,GAAGuM,QAASiD,IAKxD06B,gBAAA,SAAG5xB,EAAmBxR,EAA4ByF,GAChD/M,KAAK6qC,mBAAmB/xB,GACxB9Y,KAAK2qC,WAAW7xB,GAAa9Y,KAAK2qC,WAAW7xB,IAAc,GAC3D9Y,KAAK2qC,WAAW7xB,GAAWzW,KAAK,CAAEiF,WAAUyF,YAE5C,IAAMgd,EAAY/pB,KAAK8qC,gBAAgBhyB,GACnCiR,GACFziB,EAASzG,MAAMkM,EAASgd,IAI5B2gB,iBAAA,SAAI5xB,EAAmBxR,EAA4ByF,GACjD/M,KAAK6qC,mBAAmB/xB,GAExB,IADA,IAAM8xB,EAAY5qC,KAAK2qC,WAAW7xB,IAAc,GACvCtY,EAAI,EAAGA,EAAIoqC,EAAUjqC,OAAQH,IACpC,GACEoqC,EAAUpqC,GAAG8G,WAAaA,KACxByF,GAAWA,IAAY69B,EAAUpqC,GAAGuM,SAGtC,YADA69B,EAAUzK,OAAO3/B,EAAG,IAMlBkqC,gCAAR,SAA2B5xB,GACzBhV,EACE9D,KAAK+qC,eAAelc,KAAK,SAASmc,GAChC,OAAOA,IAAOlyB,IAEhB,kBAAoBA,QA9DxB,YAAoBiyB,GAAA/qC,oBAAA+qC,EAVZ/qC,gBAKJ,GAMF8D,EACEnE,MAAMoF,QAAQgmC,IAA2C,EAAxBA,EAAepqC,OAChD,8BCZN,WAAuCuH,QAAAwiC,IAG9BO,eAAP,WACE,OAAO,IAAIA,IAoDbA,6BAAA,SAAgBnyB,GAEd,OADAhV,EAAqB,YAAdgV,EAAyB,uBAAyBA,GAClD,CAAC9Y,KAAKkrC,eAnDf,cAAA,IAEMC,EACAC,IAFJhjC,aAAM,CAAC,wBAIe,oBAAbijC,eAC8B,IAA9BA,SAASC,wBAEkB,IAAvBD,SAAiB,QAE1BD,EAAmB,mBACnBD,EAAS,eACiC,IAA1BE,SAAoB,WACpCD,EAAmB,sBACnBD,EAAS,kBACgC,IAAzBE,SAAmB,UACnCD,EAAmB,qBACnBD,EAAS,iBACoC,IAA7BE,SAAuB,eACvCD,EAAmB,yBACnBD,EAAS,iBAQb5jC,EAAK2jC,UAAW,EAEZE,GACFC,SAASC,iBACPF,EACA,WACE,IAAMzL,GAAW0L,SAASF,GACtBxL,IAAYp4B,EAAK2jC,WACnB3jC,EAAK2jC,SAAWvL,EAChBp4B,EAAKgkC,QAAQ,UAAW5L,MAG5B,KC1CR,WAAmCz3B,QAAAwiC,IAG1Bc,eAAP,WACE,OAAO,IAAIA,IA2CbA,6BAAA,SAAgB1yB,GAEd,OADAhV,EAAqB,WAAdgV,EAAwB,uBAAyBA,GACjD,CAAC9Y,KAAKyrC,UAMfD,6BAAA,WACE,OAAOxrC,KAAKyrC,aAjDd,cAAA,MACErjC,aAAM,CAAC,wBAPDb,WAAU,EAcI,oBAAXO,aAC4B,IAA5BA,OAAOwjC,kBACbzjC,MAEDC,OAAOwjC,iBACL,SACA,WACO/jC,EAAKkkC,UACRlkC,EAAKkkC,SAAU,EACflkC,EAAKgkC,QAAQ,UAAU,MAG3B,GAGFzjC,OAAOwjC,iBACL,UACA,WACM/jC,EAAKkkC,UACPlkC,EAAKkkC,SAAU,EACflkC,EAAKgkC,QAAQ,UAAU,MAG3B,MC5CR,QAWEG,wBAAA,SAAWC,EAAqBrkC,GAC9BtH,KAAK4rC,mBAAqBD,EAC1B3rC,KAAK6rC,QAAUvkC,EACXtH,KAAK4rC,mBAAqB5rC,KAAK8rC,qBACjC9rC,KAAK6rC,UACL7rC,KAAK6rC,QAAU,OAWnBH,4BAAA,SAAeK,EAAoBtjC,GAAnC,WACEzI,KAAKgsC,iBAAiBD,GAActjC,EACpC,qBACE,IAAMwjC,EAAYC,EAAKF,iBAAiBE,EAAKJ,2BACtCI,EAAKF,iBAAiBE,EAAKJ,oBAClC,mBAAStrC,GACHyrC,EAAUzrC,IACZuS,GAAe,WACbxL,EAAK4kC,WAAWF,EAAUzrC,OAHvBA,EAAI,EAAGA,EAAIyrC,EAAUtrC,SAAUH,IAA/BA,GAOT,GAAI0rC,EAAKJ,qBAAuBI,EAAKN,0BAC/BM,EAAKL,UACPK,EAAKL,UACLK,EAAKL,QAAU,cAInBK,EAAKJ,6BAjBA9rC,KAAKgsC,iBAAiBhsC,KAAK8rC,2CApBpC,YAAoBK,GAAAnsC,gBAAAmsC,EARpBnsC,sBAA0B,GAC1BA,wBAAqB,EACrBA,yBAAsB,EACtBA,aAA+B,KCiB1B,QAqFLosC,kBAAA,SAAKC,EAAkCC,GAAvC,WACEtsC,KAAKusC,cAAgB,EACrBvsC,KAAKwsC,cAAgBF,EACrBtsC,KAAKysC,gBAAkB,IAAIf,GAAeW,GAC1CrsC,KAAK0sC,WAAY,EAEjB1sC,KAAK2sC,qBAAuB35B,WAAW,WACrCzL,EAAKqlC,KAAK,gCAEVrlC,EAAKslC,YACLtlC,EAAKolC,qBAAuB,MAC3Bz6B,KAAKI,MA7De,M3D8IQ,SAAS3H,GAC1C,GAA2C,aAAxB0gC,SAASyB,WAC1BniC,QACK,CAIL,IAAIoiC,GAAS,EACTC,EAAY,WACT3B,SAASrqC,KAKT+rC,IACHA,GAAS,EACTpiC,KANAqI,WAAWg6B,EAAW96B,KAAKI,MAAM,MAUjC+4B,SAASC,kBACXD,SAASC,iBAAiB,mBAAoB0B,GAAW,GAEzDllC,OAAOwjC,iBAAiB,OAAQ0B,GAAW,IACjC3B,SAAiB4B,cAE1B5B,SAAiB4B,YAAY,qBAAsB,WACtB,aAAxB5B,SAASyB,YAA2BE,MAGzCllC,OAAemlC,YAAY,SAAUD,K2D5GxCE,CAAoB,WAClB,IAAI3lC,EAAKmlC,UAAT,CAGAnlC,EAAK4lC,gBAAkB,IAAIC,GACzB,eAAC,aAAA5kC,mBAAAA,IAAA6E,kBACO,IAAA7D,SAAC6jC,OAASC,OAAMC,OAEtB,aADAhmC,EAAKimC,wBAAwBngC,GACxB9F,EAAK4lC,gBAOV,GALI5lC,EAAKolC,uBACPc,aAAalmC,EAAKolC,sBAClBplC,EAAKolC,qBAAuB,MAE9BplC,EAAKmmC,gBAAiB,EAjHa,SAkH/BL,EACF9lC,EAAK2J,GAAKo8B,EACV/lC,EAAKomC,SAAWJ,MACX,CAAA,GApH8B,UAoH1BF,EAgBT,MAAM,IAAInpC,MAAM,kCAAoCmpC,GAdhDC,GAGF/lC,EAAK4lC,gBAAgBS,cAAe,EAIpCrmC,EAAKklC,gBAAgBoB,WAAWP,EAAM,WACpC/lC,EAAKslC,eAGPtlC,EAAKslC,cAMX,eAAC,aAAArkC,mBAAAA,IAAA6E,kBACO,IAAA7D,SAACskC,OAAIrlC,OACXlB,EAAKimC,wBAAwBngC,GAC7B9F,EAAKklC,gBAAgBsB,eAAeD,EAAIrlC,IAE1C,WACElB,EAAKslC,aAEPtlC,EAAKymC,OAKP,IAAMC,EAA8C,CACpDC,MAA2C,KAC3CD,EAAwC,IAAI/7B,KAAKI,MAC/B,IAAhBJ,KAAK0J,UAEHrU,EAAK4lC,gBAAgBgB,2BACvBF,EACqC,GACjC1mC,EAAK4lC,gBAAgBgB,0BAC3BF,EAAuB,EzD1LG,IyD2LtB1mC,EAAK6mC,qBACPH,EAAiC,EAAI1mC,EAAK6mC,oBAExC7mC,EAAK8mC,gBACPJ,EAA4B,GAAI1mC,EAAK8mC,eAIjB,oBAAb72B,UACPA,SAAS82B,OACgC,IAAzC92B,SAAS82B,KAAKp3B,QAAQpB,MAEtBm4B,EAAuB,EzD/LN,KyDiMnB,IAAMM,EAAahnC,EAAKymC,MAAMC,GAC9B1mC,EAAKqlC,KAAK,+BAAiC2B,GAC3ChnC,EAAK4lC,gBAAgBqB,OAAOD,EAAY,kBAS5CnC,mBAAA,WACEpsC,KAAKmtC,gBAAgBsB,cAAczuC,KAAKkR,GAAIlR,KAAK2tC,UACjD3tC,KAAK0uC,uBAAuB1uC,KAAKkR,GAAIlR,KAAK2tC,WAQrCvB,cAAP,WACEA,GAAsBuC,aAAc,GAQ/BvC,iBAAP,WACEA,GAAsBwC,gBAAiB,GAIlCxC,eAAP,WAGE,OACEA,GAAsBuC,cACpBvC,GAAsBwC,gBACF,oBAAbvD,UACmB,MAA1BA,SAASwD,iB3DuOK,iBAAX/mC,QACPA,OAAe,QACfA,OAAe,OAAa,YAC3B,UAAUC,KAAKD,OAAO0P,SAAS82B,UAUR,iBAAZQ,SAA8C,iBAAfA,QAAQC,M2DjP9C9mC,KAOPmkC,mCAAA,aAMQA,uBAAR,WACEpsC,KAAK0sC,WAAY,EAEb1sC,KAAKmtC,kBACPntC,KAAKmtC,gBAAgB6B,QACrBhvC,KAAKmtC,gBAAkB,MAIrBntC,KAAKivC,iBACP5D,SAASrqC,KAAKkuC,YAAYlvC,KAAKivC,gBAC/BjvC,KAAKivC,eAAiB,MAGpBjvC,KAAK2sC,uBACPc,aAAaztC,KAAK2sC,sBAClB3sC,KAAK2sC,qBAAuB,OAQxBP,uBAAR,WACOpsC,KAAK0sC,YACR1sC,KAAK4sC,KAAK,8BACV5sC,KAAKmvC,YAEDnvC,KAAKwsC,gBACPxsC,KAAKwsC,cAAcxsC,KAAK0tC,gBACxB1tC,KAAKwsC,cAAgB,QAS3BJ,mBAAA,WACOpsC,KAAK0sC,YACR1sC,KAAK4sC,KAAK,6BACV5sC,KAAKmvC,cAST/C,kBAAA,SAAK3jC,GACH,IAAM2mC,EAAUtlC,EAAUrB,GAC1BzI,KAAKqvC,WAAaD,EAAQzuC,OAC1BX,KAAKsvC,OAAOC,iBAAiB,aAAcH,EAAQzuC,QAWnD,IARA,IAAM6uC,E5EIkB,SAAStsC,GACnC,IAAMkM,EAAYnM,EAAkBC,GACpC,OAAOK,EAAOqB,gBAAgBwK,GAAW,G4ENpBqgC,CAAaL,GAI1Bp+B,EAAWH,GAAkB2+B,EAlRdE,MAsRZlvC,EAAI,EAAGA,EAAIwQ,EAASrQ,OAAQH,IACnCR,KAAKmtC,gBAAgBwC,eACnB3vC,KAAKusC,cACLv7B,EAASrQ,OACTqQ,EAASxQ,IAEXR,KAAKusC,iBAWTH,oCAAA,SAAuBl7B,EAAY0+B,GAEjC5vC,KAAKivC,eAAiB5D,SAASwD,cAAc,UAC7C,IAAMZ,EAAqC,CAC3C4B,OAA2D,KAC3D5B,EAAoC,GAAI/8B,EACxC+8B,EAAoC,GAAI2B,EACxC5vC,KAAKivC,eAAea,IAAM9vC,KAAKguC,MAAMC,GACrCjuC,KAAKivC,eAAec,MAAMC,QAAU,OAEpC3E,SAASrqC,KAAKivC,YAAYjwC,KAAKivC,iBAQzB7C,qCAAR,SAAgC/+B,GAE9B,IAAM6iC,EAAgBpmC,EAAUuD,GAAM1M,OACtCX,KAAKkwC,eAAiBA,EACtBlwC,KAAKsvC,OAAOC,iBAAiB,iBAAkBW,QA5QjD,YACSC,EACAx4B,EACAy2B,EACAC,GAHAruC,YAAAmwC,EACAnwC,cAAA2X,EACA3X,wBAAAouC,EACApuC,mBAAAquC,EA5BTruC,eAAY,EACZA,mBAAgB,EAURA,qBAAiB,EAmBvBA,KAAK4sC,KAAOx8B,EAAW+/B,GACvBnwC,KAAKsvC,OAASjH,GAAa+H,cAAcz4B,GACzC3X,KAAKguC,MAAQ,SAACv3B,GACZ,OAAAkB,EAAS04B,cAAcr6B,GAAcS,IA+Q3C,QA0FiB22B,iBAAf,WACE,IAAMkD,EAASjF,SAASwD,cAAc,UAItC,GAHAyB,EAAOP,MAAMC,QAAU,QAGnB3E,SAASrqC,KAqBX,KAAM,oGApBNqqC,SAASrqC,KAAKivC,YAAYK,GAC1B,IAIYA,EAAOC,cAAclF,UAG7B19B,EAAI,iCAEN,MAAOrL,GACP,IAAM+T,EAASg1B,SAASh1B,OACxBi6B,EAAOR,IACL,gEACAz5B,EACA,2BAiBN,OARIi6B,EAAOE,gBACRF,EAAeG,IAAMH,EAAOE,gBACpBF,EAAOC,cACfD,EAAeG,IAAMH,EAAOC,cAAclF,SACjCiF,EAAejF,WACxBiF,EAAeG,IAAOH,EAAejF,UAGjCiF,GAMTlD,mBAAA,WAAA,WAEEptC,KAAK0wC,OAAQ,EAET1wC,KAAK2wC,WAIP3wC,KAAK2wC,SAASF,IAAIzvC,KAAK4vC,UAAY,GACnC59B,WAAW,WACa,OAAlBzL,EAAKopC,WACPtF,SAASrqC,KAAKkuC,YAAY3nC,EAAKopC,UAC/BppC,EAAKopC,SAAW,OAEjBz+B,KAAKI,MAAM,KAahB,IAAMg6B,EAAetsC,KAAKssC,aACtBA,IACFtsC,KAAKssC,aAAe,KACpBA,MASJc,2BAAA,SAAcl8B,EAAY0+B,GAMxB,IALA5vC,KAAK6wC,KAAO3/B,EACZlR,KAAK8wC,KAAOlB,EACZ5vC,KAAK0wC,OAAQ,EAGN1wC,KAAK+wC,kBAUN3D,yBAAR,WAIE,GACEptC,KAAK0wC,OACL1wC,KAAK4tC,cACL5tC,KAAKgxC,oBAAoBtiB,MAAkC,EAA1B1uB,KAAKixC,YAAYtwC,OAAa,EAAI,GACnE,CAEAX,KAAKkxC,gBACL,IAAMjD,EAA8C,GACpDA,EAAoC,GAAIjuC,KAAK6wC,KAC7C5C,EAAoC,GAAIjuC,KAAK8wC,KAC7C7C,EAAwC,IAAIjuC,KAAKkxC,cAMjD,IALA,IAAIC,EAASnxC,KAAKguC,MAAMC,GAEpBmD,EAAgB,GAChB5wC,EAAI,EAEyB,EAA1BR,KAAKixC,YAAYtwC,QAENX,KAAKixC,YAAY,GAEvB3xC,EAAEqB,OA/hBI,GA+hBuBywC,EAAczwC,QAhiBnC,MA4hBgB,CAQhC,IAAM0wC,EAASrxC,KAAKixC,YAAYK,QAChCF,EACEA,EACA,OAEA5wC,EACA,IACA6wC,EAAOE,IACP,MAEA/wC,EACA,IACA6wC,EAAOG,GACP,KAEAhxC,EACA,IACA6wC,EAAO/xC,EACTkB,IASJ,OAHA2wC,GAAkBC,EAClBpxC,KAAKyxC,gBAAgBN,EAAQnxC,KAAKkxC,gBAE3B,EAEP,OAAO,GAUX9D,4BAAA,SAAesE,EAAgBC,EAAmBlpC,GAEhDzI,KAAKixC,YAAY5uC,KAAK,CAAEkvC,IAAKG,EAAQF,GAAIG,EAAWryC,EAAGmJ,IAInDzI,KAAK0wC,OACP1wC,KAAK+wC,eAUD3D,6BAAR,SAAwBwE,EAAaC,GAArC,WAIuB,SAAfC,IACJvqC,EAAKypC,oBAAoB7hB,OAAO0iB,GAChCtqC,EAAKwpC,cAJP/wC,KAAKgxC,oBAAoBhH,IAAI6H,GAE7B,IAOME,EAAmB/+B,WACvB8+B,EACA5/B,KAAKI,MA9lBwB,OAymB/BtS,KAAKwuC,OAAOoD,EARS,WAEnBnE,aAAasE,GAGbD,OAWJ1E,oBAAA,SAAOwE,EAAaI,GAApB,WAIIh/B,WAAW,WACT,IAEE,IAAKzL,EAAKqmC,aAAc,OACxB,IAAMqE,EAAY1qC,EAAKopC,SAASF,IAAI5B,cAAc,UAClDoD,EAAUz7B,KAAO,kBACjBy7B,EAAUC,OAAQ,EAClBD,EAAUnC,IAAM8B,EAChBK,EAAUE,OAAUF,EAAkBG,mBAAqB,WACzD,IAAMC,EAAUJ,EAAkBnF,WAC7BuF,GAAqB,WAAXA,GAAkC,aAAXA,IACpCJ,EAAUE,OAAUF,EAAkBG,mBAAqB,KACvDH,EAAUK,YACZL,EAAUK,WAAWpD,YAAY+C,GAEnCD,MAGJC,EAAUM,QAAU,WAClB5kC,EAAI,oCAAsCikC,GAC1CrqC,EAAKqmC,cAAe,EACpBrmC,EAAKynC,SAEPznC,EAAKopC,SAASF,IAAIzvC,KAAKivC,YAAYgC,GACnC,MAAO3vC,MAGR4P,KAAKI,MAAM,SA/SlB,YACEkgC,EACAC,EACOnG,EACA0B,GADAhuC,kBAAAssC,EACAtsC,WAAAguC,EAlCThuC,yBAAsB,IAAI0yC,IAG1B1yC,iBAAqD,GAOrDA,mBAAgBkS,KAAKI,MAAsB,IAAhBJ,KAAK0J,UAIhC5b,mBAAe,EA2BXA,KAAKmuC,yBAA2B/8B,KAC/BtJ,OAvY0C,aAwYL9H,KAAKmuC,0BACvCqE,EACH1qC,OAzYuC,UA0YL9H,KAAKmuC,0BACpCsE,EAGJzyC,KAAK2wC,SAAWvD,GAA2BuF,gBAG3C,IAAIC,EAAS,GAIX5yC,KAAK2wC,SAASb,KACwC,gBAAtD9vC,KAAK2wC,SAASb,IAAIj9B,OAAO,EAAG,cAAclS,UAG1CiyC,EAAS,4BADavH,SAASh1B,OACwB,gBAEzD,IAAMw8B,EAAiB,eAAiBD,EAAS,iBACjD,IACE5yC,KAAK2wC,SAASF,IAAIqC,OAClB9yC,KAAK2wC,SAASF,IAAIxP,MAAM4R,GACxB7yC,KAAK2wC,SAASF,IAAIzB,QAClB,MAAO1sC,GACPqL,EAAI,2BACArL,EAAE2Q,OACJtF,EAAIrL,EAAE2Q,OAERtF,EAAIrL,ICncL,IAAIuB,GAAc,GCuBzB,IAGIkvC,GAAgB,KACQ,oBAAjBC,aACTD,GAAgBC,aACc,oBAAdC,YAChBF,GAAgBE,WAYlB,QA6CiBC,kBAAf,SACEv7B,EACAy2B,EACAC,GAEA,IAAMJ,EAAqC,CAC3ClsC,E3D9F4B,K2D8G5B,MAZsB,oBAAbyV,UACPA,SAAS82B,OACgC,IAAzC92B,SAAS82B,KAAKp3B,QAAQpB,MAEtBm4B,EAAuB,E3D9FJ,K2DgGjBG,IACFH,EAAiC,EAAIG,GAEnCC,IACFJ,EAA4B,GAAII,GAE3B12B,EAAS04B,cAAct6B,GAAWk4B,IAQ3CiF,kBAAA,SAAK7G,EAAkCC,GAAvC,WACEtsC,KAAKssC,aAAeA,EACpBtsC,KAAKqsC,UAAYA,EAEjBrsC,KAAK4sC,KAAK,2BAA6B5sC,KAAK0W,SAE5C1W,KAAK0tC,gBAAiB,EAEtBv8B,GAAkBrB,IAAI,8BAA8B,GAEpD,IACE,GAAI7H,IAAa,CACf,IAAMkrC,EAASC,EAAcxvC,WAAa,YAAc,OAElDqkC,EAAmC,CACvCoL,QAAS,CACPC,aAAc,cAAgCzvC,OAAe0vC,QAAQC,aAAYL,IAK/EM,EAAMF,QAAa,IACnBG,EAC8B,GAAlC1zC,KAAK0W,QAAQQ,QAAQ,UACjBu8B,EAAiB,aAAKA,EAAiB,YACvCA,EAAgB,YAAKA,EAAgB,WAEvCC,IACFzL,EAAe,MAAI,CAAE0L,OAAQD,IAG/B1zC,KAAK4zC,OAAS,IAAIb,GAAc/yC,KAAK0W,QAAS,GAAIuxB,QAElDjoC,KAAK4zC,OAAS,IAAIb,GAAc/yC,KAAK0W,SAEvC,MAAOpU,GACPtC,KAAK4sC,KAAK,kCACV,IAAM9pC,EAAQR,EAAE0B,SAAW1B,EAAEmG,KAK7B,OAJI3F,GACF9C,KAAK4sC,KAAK9pC,QAEZ9C,KAAK6sC,YAIP7sC,KAAK4zC,OAAOC,OAAS,WACnBtsC,EAAKqlC,KAAK,wBACVrlC,EAAKmmC,gBAAiB,GAGxB1tC,KAAK4zC,OAAOE,QAAU,WACpBvsC,EAAKqlC,KAAK,0CACVrlC,EAAKqsC,OAAS,KACdrsC,EAAKslC,aAGP7sC,KAAK4zC,OAAOG,UAAY,SAACrxC,GACvB6E,EAAKysC,oBAAoBtxC,IAG3B1C,KAAK4zC,OAAOrB,QAAU,SAACjwC,GACrBiF,EAAKqlC,KAAK,yCACV,IAAM9pC,EAAQR,EAAE0B,SAAW1B,EAAEmG,KACzB3F,GACFyE,EAAKqlC,KAAK9pC,GAEZyE,EAAKslC,cAOTqG,mBAAA,aAIOA,iBAAP,WACEA,GAAoBtE,gBAAiB,GAGhCsE,eAAP,WACE,IAAIe,GAAe,EACnB,GAAyB,oBAAdjsC,WAA6BA,UAAUksC,UAAW,CAC3D,IACMC,EAAkBnsC,UAAUksC,UAAUE,MADpB,kCAEpBD,GAA4C,EAAzBA,EAAgBxzC,QACjC0zC,WAAWF,EAAgB,IAAM,MACnCF,GAAe,GAKrB,OACGA,GACiB,OAAlBlB,KACCG,GAAoBtE,gBAoBlBsE,oBAAP,WAGE,OACE/hC,GAAkBmjC,oBACsC,IAAxDnjC,GAAkBjB,IAAI,+BAI1BgjC,mCAAA,WACE/hC,GAAkBpB,OAAO,+BAGnBmjC,0BAAR,SAAqBzqC,GAEnB,GADAzI,KAAKu0C,OAAOlyC,KAAKoG,GACbzI,KAAKu0C,OAAO5zC,QAAUX,KAAKw0C,YAAa,CAC1C,IAAMC,EAAWz0C,KAAKu0C,OAAO3uC,KAAK,IAClC5F,KAAKu0C,OAAS,KACd,IAAMG,EAAW/qC,EAAS8qC,GAG1Bz0C,KAAKqsC,UAAUqI,KAQXxB,kCAAR,SAA6ByB,GAC3B30C,KAAKw0C,YAAcG,EACnB30C,KAAKu0C,OAAS,IASRrB,gCAAR,SAA2BzqC,GAIzB,GAHA3E,EAAuB,OAAhB9D,KAAKu0C,OAAiB,kCAGzB9rC,EAAK9H,QAAU,EAAG,CACpB,IAAMg0C,EAAankC,OAAO/H,GAC1B,IAAKmsC,MAAMD,GAET,OADA30C,KAAK60C,qBAAqBF,GACnB,KAIX,OADA30C,KAAK60C,qBAAqB,GACnBpsC,GAOTyqC,iCAAA,SAAoB4B,GAClB,GAAoB,OAAhB90C,KAAK4zC,OAAT,CACA,IAAMnrC,EAAOqsC,EAAW,KAMxB,GALA90C,KAAKkwC,eAAiBznC,EAAK9H,OAC3BX,KAAKsvC,OAAOC,iBAAiB,iBAAkB9mC,EAAK9H,QAEpDX,KAAK+0C,iBAEe,OAAhB/0C,KAAKu0C,OAEPv0C,KAAKg1C,aAAavsC,OACb,CAEL,IAAMwsC,EAAgBj1C,KAAKk1C,mBAAmBzsC,GACxB,OAAlBwsC,GACFj1C,KAAKg1C,aAAaC,MASxB/B,kBAAA,SAAKzqC,GACHzI,KAAK+0C,iBAEL,IAAM3F,EAAUtlC,EAAUrB,GAC1BzI,KAAKqvC,WAAaD,EAAQzuC,OAC1BX,KAAKsvC,OAAOC,iBAAiB,aAAcH,EAAQzuC,QAKnD,IAAMqQ,EAAWH,GAAkBu+B,EA/SN,OAkTP,EAAlBp+B,EAASrQ,QACXX,KAAKm1C,YAAYjvC,OAAO8K,EAASrQ,SAInC,IAAK,IAAIH,EAAI,EAAGA,EAAIwQ,EAASrQ,OAAQH,IACnCR,KAAKm1C,YAAYnkC,EAASxQ,KAItB0yC,uBAAR,WACElzC,KAAK0sC,WAAY,EACb1sC,KAAKo1C,iBACPC,cAAcr1C,KAAKo1C,gBACnBp1C,KAAKo1C,eAAiB,MAGpBp1C,KAAK4zC,SACP5zC,KAAK4zC,OAAO5E,QACZhvC,KAAK4zC,OAAS,OAIVV,uBAAR,WACOlzC,KAAK0sC,YACR1sC,KAAK4sC,KAAK,+BACV5sC,KAAKmvC,YAGDnvC,KAAKssC,eACPtsC,KAAKssC,aAAatsC,KAAK0tC,gBACvB1tC,KAAKssC,aAAe,QAS1B4G,mBAAA,WACOlzC,KAAK0sC,YACR1sC,KAAK4sC,KAAK,6BACV5sC,KAAKmvC,cAQT+D,4BAAA,WAAA,WACEmC,cAAcr1C,KAAKo1C,gBACnBp1C,KAAKo1C,eAAiBE,YAAY,WAE5B/tC,EAAKqsC,QACPrsC,EAAK4tC,YAAY,KAEnB5tC,EAAKwtC,kBACJ7iC,KAAKI,MA5WyB,QAqX3B4gC,yBAAR,SAAoBhwC,GAIlB,IACElD,KAAK4zC,OAAO2B,KAAKryC,GACjB,MAAOZ,GACPtC,KAAK4sC,KACH,0CACAtqC,EAAE0B,SAAW1B,EAAEmG,KACf,uBAEFuK,WAAWhT,KAAK6sC,UAAUj9B,KAAK5P,MAAO,KA5LnCkzC,gCAA+B,EAM/BA,kBAAiB,QAnKxB,YACS/C,EACPx4B,EACAy2B,EACAC,GAHOruC,YAAAmwC,EAtBTnwC,oBAAgC,KAChCA,YAA0B,KAC1BA,iBAAc,EACdA,eAAY,EACZA,mBAAgB,EAuBdA,KAAK4sC,KAAOx8B,EAAWpQ,KAAKmwC,QAC5BnwC,KAAKsvC,OAASjH,GAAa+H,cAAcz4B,GACzC3X,KAAK0W,QAAUw8B,GAAoBsC,eACjC79B,EACAy2B,EACAC,GC9DN,QAOE7uC,sBAAWi2C,yBAAX,WACE,MAAO,CAACrJ,GAAuB8G,qCAczBuC,6BAAR,SAAwB99B,WAChB+9B,EACJxC,IAAuBA,GAAiC,cACtDyC,EACFD,IAA0BxC,GAAoB0C,mBAWhD,GATIj+B,EAASV,gBACNy+B,GACHhsC,GACE,mFAGJisC,GAAuB,GAGrBA,EACF31C,KAAK61C,YAAc,CAAC3C,QACf,CACL,IAAM4C,EAAc91C,KAAK61C,YAAc,OACvC,IAAwB,IAAAvsC,EAAAyQ,EAAA07B,GAAiBM,8CAAgB,CAApD,IAAMC,UACLA,GAAaA,EAAuB,eACtCF,EAAWzzC,KAAK2zC,wGAUxBP,8BAAA,WACE,GAA8B,EAA1Bz1C,KAAK61C,YAAYl1C,OACnB,OAAOX,KAAK61C,YAAY,GAExB,MAAM,IAAI3xC,MAAM,4BAQpBuxC,8BAAA,WACE,OAA8B,EAA1Bz1C,KAAK61C,YAAYl1C,OACZX,KAAK61C,YAAY,GAEjB,UAvDX,YAAYl+B,GACV3X,KAAKi2C,gBAAgBt+B,GCfzB,QAiFUu+B,oBAAR,WAAA,WACQC,EAAOn2C,KAAKo2C,kBAAkBC,mBACpCr2C,KAAKs2C,MAAQ,IAAIH,EACfn2C,KAAKu2C,mBACLv2C,KAAKw2C,eACLrvC,EACAnH,KAAKquC,eAKPruC,KAAKy2C,0BAA4BN,EAAmC,8BAAK,EAEzE,IAAMO,EAAoB12C,KAAK22C,cAAc32C,KAAKs2C,OAC5CM,EAAmB52C,KAAK62C,iBAAiB72C,KAAKs2C,OACpDt2C,KAAK82C,IAAM92C,KAAKs2C,MAChBt2C,KAAK+2C,IAAM/2C,KAAKs2C,MAChBt2C,KAAKg3C,eAAiB,KACtBh3C,KAAKi3C,YAAa,EAQlBjkC,WAAW,WAETzL,EAAK+uC,OAAS/uC,EAAK+uC,MAAMxD,KAAK4D,EAAmBE,IAChD1kC,KAAKI,MAAM,IAEd,IAAM4kC,EAAoBf,EAAqB,gBAAK,EAC5B,EAApBe,IACFl3C,KAAKm3C,gBAAkBjkC,GAAsB,WAC3C3L,EAAK4vC,gBAAkB,KAClB5vC,EAAK0vC,aAEN1vC,EAAK+uC,OA5GuB,OA6G5B/uC,EAAK+uC,MAAMpG,eAEX3oC,EAAKqlC,KACH,wDACErlC,EAAK+uC,MAAMpG,cACX,wCAEJ3oC,EAAK0vC,YAAa,EAClB1vC,EAAK+uC,MAAMc,yBAEX7vC,EAAK+uC,OAxHmB,MAyHxB/uC,EAAK+uC,MAAMjH,UAEX9nC,EAAKqlC,KACH,oDACErlC,EAAK+uC,MAAMjH,UACX,uCAKJ9nC,EAAKqlC,KAAK,+CACVrlC,EAAKynC,WAGR98B,KAAKI,MAAM4kC,MAQVhB,8BAAR,WACE,MAAO,KAAOl2C,KAAKkR,GAAK,IAAMlR,KAAKq3C,mBAG7BnB,8BAAR,SAAyBC,GAAzB,WACE,OAAO,SAAAmB,GACDnB,IAAS5uC,EAAK+uC,MAChB/uC,EAAKgwC,kBAAkBD,GACdnB,IAAS5uC,EAAKyvC,gBACvBzvC,EAAKqlC,KAAK,8BACVrlC,EAAKiwC,8BAELjwC,EAAKqlC,KAAK,+BAKRsJ,2BAAR,SAAsBC,GAAtB,WACE,OAAO,SAACnyC,MACFuD,EAAKkwC,SACHtB,IAAS5uC,EAAKwvC,IAChBxvC,EAAKmwC,0BAA0B1zC,GACtBmyC,IAAS5uC,EAAKyvC,eACvBzvC,EAAKowC,4BAA4B3zC,GAEjCuD,EAAKqlC,KAAK,gCAUlBsJ,yBAAA,SAAY0B,GAEV,IAAMC,EAAM,CAAEv3C,EAAG,IAAKhB,EAAGs4C,GACzB53C,KAAK83C,UAAUD,IAGjB3B,kCAAA,WACMl2C,KAAK82C,MAAQ92C,KAAKg3C,gBAAkBh3C,KAAK+2C,MAAQ/2C,KAAKg3C,iBACxDh3C,KAAK4sC,KACH,2CAA6C5sC,KAAKg3C,eAAe7G,QAEnEnwC,KAAKs2C,MAAQt2C,KAAKg3C,eAClBh3C,KAAKg3C,eAAiB,OAKlBd,iCAAR,SAA4B6B,GAC1B,GA3LiB,MA2LGA,EAAa,CAC/B,IAAMC,EAAMD,EAAwB,EAtLvB,MAuLTC,EACFh4C,KAAKi4C,6BA3LS,MA4LLD,GAETh4C,KAAK4sC,KAAK,wCACV5sC,KAAKg3C,eAAehI,QAGlBhvC,KAAK82C,MAAQ92C,KAAKg3C,gBAClBh3C,KAAK+2C,MAAQ/2C,KAAKg3C,gBAElBh3C,KAAKgvC,SAnMM,MAqMJgJ,IACTh4C,KAAK4sC,KAAK,0BACV5sC,KAAKk4C,8BACLl4C,KAAKi4C,gCAKH/B,yCAAR,SAAoCiC,GAClC,IAAMC,EAAgBxnC,GAAW,IAAKunC,GAChC1vC,EAAYmI,GAAW,IAAKunC,GAClC,GAAa,KAATC,EACFp4C,KAAKq4C,oBAAoB5vC,OACpB,CAAA,GAAa,KAAT2vC,EAIT,MAAM,IAAIl0C,MAAM,2BAA6Bk0C,GAF7Cp4C,KAAKs4C,oBAAoBj2C,KAAKoG,KAM1BytC,wCAAR,WACMl2C,KAAKk4C,6BAA+B,GACtCl4C,KAAK4sC,KAAK,oCACV5sC,KAAKi3C,YAAa,EAClBj3C,KAAKg3C,eAAeI,wBACpBp3C,KAAKu4C,wBAGLv4C,KAAK4sC,KAAK,8BACV5sC,KAAKg3C,eAAezB,KAAK,CAAEj1C,EAAG,IAAKhB,EAAG,CAAEgB,EAhOjC,IAgO0ChB,EAAG,QAIhD42C,iCAAR,WAEEl2C,KAAKg3C,eAAe9I,QAEpBluC,KAAK4sC,KAAK,mCACV5sC,KAAKg3C,eAAezB,KAAK,CAAEj1C,EAAG,IAAKhB,EAAG,CAAEgB,EA3OzB,IA2OwChB,EAAG,MAI1DU,KAAK4sC,KAAK,kCACV5sC,KAAKs2C,MAAMf,KAAK,CAAEj1C,EAAG,IAAKhB,EAAG,CAAEgB,EA/OV,IA+O+BhB,EAAG,MACvDU,KAAK82C,IAAM92C,KAAKg3C,eAEhBh3C,KAAKw4C,wBAGCtC,uCAAR,SAAkCiC,GAEhC,IAAMC,EAAgBxnC,GAAW,IAAKunC,GAChC1vC,EAAYmI,GAAW,IAAKunC,GACrB,KAATC,EACFp4C,KAAKy4C,WAAWhwC,GACE,KAAT2vC,GACTp4C,KAAK04C,eAAejwC,IAIhBytC,4BAAR,SAAuBlyC,GACrBhE,KAAK24C,qBAGL34C,KAAKmsC,WAAWnoC,IAGVkyC,gCAAR,WACOl2C,KAAKi3C,aACRj3C,KAAKy2C,4BACDz2C,KAAKy2C,2BAA6B,IACpCz2C,KAAK4sC,KAAK,kCACV5sC,KAAKi3C,YAAa,EAClBj3C,KAAKs2C,MAAMc,2BAKTlB,wBAAR,SAAmB6B,GACjB,IAAMC,EAAcpnC,GA1RH,IA0R4BmnC,GAC7C,GA1RiB,MA0RGA,EAAa,CAC/B,IAAMa,EAAUb,EAAwB,EACxC,GAnRe,MAmRXC,EACFh4C,KAAK64C,aAAaD,QACb,GAxRY,MAwRRZ,EAA0B,CACnCh4C,KAAK4sC,KAAK,qCACV5sC,KAAK+2C,IAAM/2C,KAAKg3C,eAChB,IAAK,IAAIx2C,EAAI,EAAGA,EAAIR,KAAKs4C,oBAAoB33C,SAAUH,EACrDR,KAAK04C,eAAe14C,KAAKs4C,oBAAoB93C,IAE/CR,KAAKs4C,oBAAsB,GAC3Bt4C,KAAKw4C,2BApSY,MAqSRR,EAGTh4C,KAAK84C,sBAAsBF,GAvSb,MAwSLZ,EAETh4C,KAAK+4C,SAASH,GAzSA,MA0SLZ,EACTl1C,EAAM,iBAAmB81C,GA1SZ,MA2SJZ,GACTh4C,KAAK4sC,KAAK,wBACV5sC,KAAK24C,qBACL34C,KAAKg5C,iCAELl2C,EAAM,mCAAqCk1C,KAUzC9B,0BAAR,SAAqB+C,GAMnB,IAAMC,EAAYD,EAAUzH,GACtB2H,EAAUF,EAAUl3C,EACpBmU,EAAO+iC,EAAUG,EACvBp5C,KAAKq5C,UAAYJ,EAAU14C,EAC3BP,KAAKw2C,UAAU8C,WAAWpjC,MAEtBlW,KAAKy3C,SACPz3C,KAAKs2C,MAAMpI,QACXluC,KAAKu5C,yBAAyBv5C,KAAKs2C,MAAO4C,G7D7WhB,M6D8WDC,GACvBzvC,GAAK,sCAGP1J,KAAKw5C,qBAIDtD,8BAAR,WACE,IAAMC,EAAOn2C,KAAKo2C,kBAAkBqD,mBAChCtD,GACFn2C,KAAK05C,cAAcvD,IAIfD,2BAAR,SAAsBC,GAAtB,WACEn2C,KAAKg3C,eAAiB,IAAIb,EACxBn2C,KAAKu2C,mBACLv2C,KAAKw2C,UACLx2C,KAAKq5C,WAIPr5C,KAAKk4C,4BACH/B,EAAmC,8BAAK,EAE1C,IAAM9J,EAAYrsC,KAAK22C,cAAc32C,KAAKg3C,gBACpC1K,EAAetsC,KAAK62C,iBAAiB72C,KAAKg3C,gBAChDh3C,KAAKg3C,eAAelE,KAAKzG,EAAWC,GAGpCp5B,GAAsB,WAChB3L,EAAKyvC,iBACPzvC,EAAKqlC,KAAK,gCACVrlC,EAAKyvC,eAAehI,UAErB98B,KAAKI,MApYY,OAuYd4jC,sBAAR,SAAiBhgC,GACflW,KAAK4sC,KAAK,qCAAuC12B,GACjDlW,KAAKw2C,UAAU8C,WAAWpjC,OAGtBlW,KAAKy3C,OACPz3C,KAAKgvC,SAGLhvC,KAAK25C,oBACL35C,KAAK45C,WAID1D,sCAAR,SAAiCC,EAAiB+C,GAAlD,WACEl5C,KAAK4sC,KAAK,oCACV5sC,KAAKs2C,MAAQH,EACbn2C,KAAKy3C,SAEDz3C,KAAK65C,WACP75C,KAAK65C,SAASX,EAAWl5C,KAAKq5C,WAC9Br5C,KAAK65C,SAAW,MAKqB,IAAnC75C,KAAKy2C,2BACPz2C,KAAK4sC,KAAK,kCACV5sC,KAAKi3C,YAAa,GAElB/jC,GAAsB,WACpB3L,EAAKyxC,iCACJ9mC,KAAKI,MAna8B,OAualC4jC,2CAAR,WAEOl2C,KAAKi3C,gBAAcj3C,KAAKy3C,SAC3Bz3C,KAAK4sC,KAAK,4BACV5sC,KAAK83C,UAAU,CAAEx3C,EAAG,IAAKhB,EAAG,CAAEgB,EArZvB,IAqZgChB,EAAG,QAItC42C,wCAAR,WACE,IAAMC,EAAOn2C,KAAKg3C,eAClBh3C,KAAKg3C,eAAiB,KAClBh3C,KAAK82C,MAAQX,GAAQn2C,KAAK+2C,MAAQZ,GAEpCn2C,KAAKgvC,SAUDkH,+BAAR,SAA0BoB,GACxBt3C,KAAKs2C,MAAQ,KAIRgB,OAAiBt3C,KAAKy3C,WAQhBz3C,KAAKy3C,QACdz3C,KAAK4sC,KAAK,8BARV5sC,KAAK4sC,KAAK,+BAEN5sC,KAAKw2C,UAAUjgC,oBACjBpF,GAAkBpB,OAAO,QAAU/P,KAAKw2C,UAAUtgC,MAElDlW,KAAKw2C,UAAUrgC,aAAenW,KAAKw2C,UAAUtgC,OAMjDlW,KAAKgvC,SAQCkH,mCAAR,SAA8BrP,GAC5B7mC,KAAK4sC,KAAK,0DAEN5sC,KAAK85C,UACP95C,KAAK85C,QAAQjT,GACb7mC,KAAK85C,QAAU,MAKjB95C,KAAKwsC,cAAgB,KAErBxsC,KAAKgvC,SAGCkH,uBAAR,SAAkBztC,GAChB,OAAIzI,KAAKy3C,OACP,KAAM,8BAENz3C,KAAK82C,IAAIvB,KAAK9sC,IAOlBytC,mBAAA,eACMl2C,KAAKy3C,SACPz3C,KAAK4sC,KAAK,gCACV5sC,KAAKy3C,SAELz3C,KAAK25C,oBAED35C,KAAKwsC,gBACPxsC,KAAKwsC,gBACLxsC,KAAKwsC,cAAgB,QASnB0J,+BAAR,WACEl2C,KAAK4sC,KAAK,iCACN5sC,KAAKs2C,QACPt2C,KAAKs2C,MAAMtH,QACXhvC,KAAKs2C,MAAQ,MAGXt2C,KAAKg3C,iBACPh3C,KAAKg3C,eAAehI,QACpBhvC,KAAKg3C,eAAiB,MAGpBh3C,KAAKm3C,kBACP1J,aAAaztC,KAAKm3C,iBAClBn3C,KAAKm3C,gBAAkB,WAvd3B,YACSjmC,EACCslC,EACArK,EACA0N,EACArN,EACAsN,EACDzL,GANAruC,QAAAkR,EACClR,eAAAw2C,EACAx2C,gBAAAmsC,EACAnsC,cAAA65C,EACA75C,mBAAAwsC,EACAxsC,aAAA85C,EACD95C,mBAAAquC,EAhCTruC,qBAAkB,EAClBA,yBAA6B,GAWrBA,cAsBNA,KAAK4sC,KAAOx8B,EAAW,KAAOpQ,KAAKkR,GAAK,KACxClR,KAAKo2C,kBAAoB,IAAIX,GAAiBe,GAC9Cx2C,KAAK4sC,KAAK,sBACV5sC,KAAK45C,SChFT,QA4BEG,iBAAA,SACEnmC,EACAnL,EACA+R,EACAoL,KASFm0B,mBAAA,SACEnmC,EACAnL,EACA+R,EACAoL,KAOFm0B,8BAAA,SAAiB/vC,KAOjB+vC,6BAAA,SACEnmC,EACAnL,EACA+R,KAQFu/B,+BAAA,SACEnmC,EACAnL,EACA+R,KAOFu/B,gCAAA,SACEnmC,EACA4G,KAMFu/B,yBAAA,SAAY7Q,SAxFd,eCQA,WAuC0ChhC,QAAA6xC,IAkF9BC,yBAAV,SACEj8B,EACA/c,EACAi5C,GAEA,IAAMC,IAAcl6C,KAAKm6C,eAEnBtC,EAAM,CAAEj1C,EAAGs3C,EAAW3uC,EAAGwS,EAAQxe,EAAGyB,GAC1ChB,KAAK4sC,KAAK9iC,EAAU+tC,IACpB/zC,EACE9D,KAAKo6C,WACL,0DAEFp6C,KAAKq6C,UAAUC,YAAYzC,GACvBoC,IACFj6C,KAAKu6C,eAAeL,GAAaD,IAOrCD,oBAAA,SACErwB,EACA6wB,EACAzX,EACAvoB,GAEA,IAAMyV,EAAUtG,EAAM2E,kBAChB1a,EAAa+V,EAAM/T,KAAK1M,WAC9BlJ,KAAK4sC,KAAK,qBAAuBh5B,EAAa,IAAMqc,GAC/CjwB,KAAKy6C,QAAQ7rB,IAAIhb,IACpB5T,KAAKy6C,QAAQ3qC,IAAI8D,EAAY,IAAI4b,KAEnC1rB,EACE6lB,EAAMC,iBAAiByc,cACpB1c,EAAMC,iBAAiBqS,eAC1B,sDAEFn4B,GACG9D,KAAKy6C,QAAQvqC,IAAI0D,GAAagb,IAAIqB,GACnC,gDAEF,IAAMyqB,EAAyB,CAC7BlgC,WAAYA,EACZ6qB,OAAQmV,EACR7wB,MAAOA,EACPoZ,IAAKA,GAEP/iC,KAAKy6C,QAAQvqC,IAAI0D,GAAa9D,IAAImgB,EAASyqB,GAEvC16C,KAAKo6C,YACPp6C,KAAK26C,YAAYD,IAIbV,yBAAR,SAAoBU,GAApB,WACQ/wB,EAAQ+wB,EAAW/wB,MACnB/V,EAAa+V,EAAM/T,KAAK1M,WACxB+mB,EAAUtG,EAAM2E,kBACtBtuB,KAAK4sC,KAAK,aAAeh5B,EAAa,QAAUqc,GAChD,IAAM2qB,EAA4B,CAAWh7C,EAAGgU,GAK5C8mC,EAAW3X,MACb6X,EAAO,EAAIjxB,EAAMuE,cACjB0sB,EAAO,EAAIF,EAAW3X,KAGxB6X,EAAgB,EAAIF,EAAWrV,SAE/BrlC,KAAKs6C,YAVU,IAUUM,EAAK,SAAC52C,GAC7B,IAAM40C,EAAe50C,EAAoB,EACnC0iC,EAAiB1iC,EAAsB,EAG7Cg2C,GAAqBa,sBAAsBjC,EAASjvB,IAGlDpiB,EAAKkzC,QAAQvqC,IAAI0D,IACjBrM,EAAKkzC,QAAQvqC,IAAI0D,GAAa1D,IAAI+f,MAEVyqB,IACxBnzC,EAAKqlC,KAAK,kBAAmB5oC,GAEd,OAAX0iC,GACFn/B,EAAKuzC,cAAclnC,EAAYqc,GAG7ByqB,EAAWlgC,YACbkgC,EAAWlgC,WAAWksB,EAAQkS,OAMvBoB,yBAAf,SAAqCpB,EAAcjvB,GACjD,GAAIivB,GAA8B,iBAAZA,GAAwBtuC,EAASsuC,EAAS,KAAM,CACpE,IAAMmC,EAAWvwC,EAAQouC,EAAS,KAClC,GAAIj5C,MAAMoF,QAAQg2C,KAAcA,EAAS7jC,QAAQ,YAAa,CAC5D,IAAM8jC,EACJ,gBACArxB,EACGC,iBACAC,WACA3gB,WACH,IACI+xC,EAAYtxB,EAAM/T,KAAK1M,WAC7BQ,GACE,wGAC6CsxC,SACxCC,wDASbjB,8BAAA,SAAiBhwC,GACfhK,KAAKk7C,WAAalxC,EAClBhK,KAAK4sC,KAAK,wBACN5sC,KAAKk7C,WACPl7C,KAAKm7C,UAIDn7C,KAAKo6C,YACPp6C,KAAKs6C,YAAY,SAAU,GAAI,cAInCt6C,KAAKo7C,uCAAuCpxC,IAGtCgwC,oDAAR,SAA+CqB,IAGpBA,GAAoC,KAAtBA,EAAW16C,Q1EzJ/B,SAASqJ,GAC9B,IAAME,EAAiBH,EAAOC,GAAOE,OACrC,MAAyB,iBAAXA,IAA2C,IAApBA,EAAc,M0EwJzBoxC,CAAQD,MAC9Br7C,KAAK4sC,KACH,iEAEF5sC,KAAKu7C,mBAzQ4B,MAiRrCvB,qBAAA,WAAA,WACE,GAAIh6C,KAAKo6C,YAAcp6C,KAAKk7C,WAAY,CACtC,IAAMM,EAAQx7C,KAAKk7C,WACbO,E1EvLiB,SAASzxC,GACpC,IACEE,EADcH,EAAOC,GACJE,OAEnB,QAASA,GAA4B,iBAAXA,GAAuBA,EAAOrK,eAAe,O0EmLhD67C,CAAcF,GAAS,OAAS,QAC7CG,EAAoC,CAAEC,KAAMJ,GACvB,OAAvBx7C,KAAK67C,cACPF,EAAoB,QAAI,EACe,iBAAvB37C,KAAK67C,gBACrBF,EAAqB,QAAI37C,KAAK67C,eAEhC77C,KAAKs6C,YAAYmB,EAAYE,EAAa,SAAC9wC,GACzC,IAAM67B,EAAiB77B,EAAkB,EACnCpC,EAAeoC,EAAgB,GAAK,QAEtCtD,EAAK2zC,aAAeM,IACP,OAAX9U,EACFn/B,EAAKu0C,uBAAyB,EAG9Bv0C,EAAKw0C,eAAerV,EAAQj+B,QAUtCuxC,sBAAA,SAASrwB,EAAcoZ,GACrB,IAAMnvB,EAAa+V,EAAM/T,KAAK1M,WACxB+mB,EAAUtG,EAAM2E,kBAEtBtuB,KAAK4sC,KAAK,uBAAyBh5B,EAAa,IAAMqc,GAEtDnsB,EACE6lB,EAAMC,iBAAiByc,cACpB1c,EAAMC,iBAAiBqS,eAC1B,wDAEaj8B,KAAK86C,cAAclnC,EAAYqc,IAChCjwB,KAAKo6C,YACjBp6C,KAAKg8C,cAAcpoC,EAAYqc,EAAStG,EAAMuE,cAAe6U,IAIzDiX,2BAAR,SACEpmC,EACAqc,EACAgsB,EACAlZ,GAEA/iC,KAAK4sC,KAAK,eAAiBh5B,EAAa,QAAUqc,GAElD,IAAM2qB,EAA4B,CAAWh7C,EAAGgU,GAG5CmvB,IACF6X,EAAO,EAAIqB,EACXrB,EAAO,EAAI7X,GAGb/iC,KAAKs6C,YAPU,IAOUM,IAM3BZ,6BAAA,SACEpmC,EACAnL,EACA+R,GAEIxa,KAAKo6C,WACPp6C,KAAKk8C,kBAAkB,IAAKtoC,EAAYnL,EAAM+R,GAE9Cxa,KAAKm8C,0BAA0B95C,KAAK,CAClCuR,aACAmK,OAAQ,IACRtV,OACA+R,gBAQNw/B,+BAAA,SACEpmC,EACAnL,EACA+R,GAEIxa,KAAKo6C,WACPp6C,KAAKk8C,kBAAkB,KAAMtoC,EAAYnL,EAAM+R,GAE/Cxa,KAAKm8C,0BAA0B95C,KAAK,CAClCuR,aACAmK,OAAQ,KACRtV,OACA+R,gBAQNw/B,gCAAA,SACEpmC,EACA4G,GAEIxa,KAAKo6C,WACPp6C,KAAKk8C,kBAAkB,KAAMtoC,EAAY,KAAM4G,GAE/Cxa,KAAKm8C,0BAA0B95C,KAAK,CAClCuR,aACAmK,OAAQ,KACRtV,KAAM,KACN+R,gBAKEw/B,+BAAR,SACEj8B,EACAnK,EACAnL,EACA+R,GAEA,IAAM4hC,EAAU,CAAWx8C,EAAGgU,EAAqBtU,EAAGmJ,GACtDzI,KAAK4sC,KAAK,gBAAkB7uB,EAAQq+B,GACpCp8C,KAAKs6C,YAAYv8B,EAAQq+B,EAAS,SAACC,GAC7B7hC,GACFxH,WAAW,WACTwH,EAAW6hC,EAAuB,EAAGA,EAAuB,IAC3DnqC,KAAKI,MAAM,OAQpB0nC,iBAAA,SACEpmC,EACAnL,EACA+R,EACAoL,GAEA5lB,KAAKs8C,YAAY,IAAK1oC,EAAYnL,EAAM+R,EAAYoL,IAMtDo0B,mBAAA,SACEpmC,EACAnL,EACA+R,EACAoL,GAEA5lB,KAAKs8C,YAAY,IAAK1oC,EAAYnL,EAAM+R,EAAYoL,IAGtDo0B,yBAAA,SACEj8B,EACAnK,EACAnL,EACA+R,EACAoL,GAEA,IAAMw2B,EAAgC,CAC3Bx8C,EAAGgU,EACHtU,EAAGmJ,QAGDtB,IAATye,IAAoBw2B,EAAoB,EAAIx2B,GAGhD5lB,KAAKu8C,iBAAiBl6C,KAAK,CACzB0b,SACAq+B,UACA5hC,eAGFxa,KAAKw8C,uBACL,IAAM1+B,EAAQ9d,KAAKu8C,iBAAiB57C,OAAS,EAEzCX,KAAKo6C,WACPp6C,KAAKy8C,SAAS3+B,GAEd9d,KAAK4sC,KAAK,kBAAoBh5B,IAI1BomC,sBAAR,SAAiBl8B,GAAjB,WACQC,EAAS/d,KAAKu8C,iBAAiBz+B,GAAOC,OACtCq+B,EAAUp8C,KAAKu8C,iBAAiBz+B,GAAOs+B,QACvC5hC,EAAaxa,KAAKu8C,iBAAiBz+B,GAAOtD,WAChDxa,KAAKu8C,iBAAiBz+B,GAAO4+B,OAAS18C,KAAKo6C,WAE3Cp6C,KAAKs6C,YAAYv8B,EAAQq+B,EAAS,SAACp4C,GACjCuD,EAAKqlC,KAAK7uB,EAAS,YAAa/Z,UAEzBuD,EAAKg1C,iBAAiBz+B,GAC7BvW,EAAKi1C,uBAG6B,IAA9Bj1C,EAAKi1C,uBACPj1C,EAAKg1C,iBAAmB,IAGtB/hC,GACFA,EAAWxW,EAAsB,EAAGA,EAAsB,MAOhEg2C,yBAAA,SAAY9Q,GAAZ,WAEE,GAAIlpC,KAAKo6C,WAAY,CACnB,IAAMgC,EAAU,CAAeh5C,EAAG8lC,GAClClpC,KAAK4sC,KAAK,cAAewP,GAEzBp8C,KAAKs6C,YAAsB,IAAK8B,EAAS,SAAA98B,GAEvC,GAAe,OADAA,EAAqB,EACf,CACnB,IAAMq9B,EAAcr9B,EAAqB,EACzC/X,EAAKqlC,KAAK,cAAe,wBAA0B+P,QAMnD3C,4BAAR,SAAuBh2C,GACrB,GAAI,MAAOA,EAAS,CAElBhE,KAAK4sC,KAAK,gBAAkB9iC,EAAU9F,IACtC,IAAM44C,EAAS54C,EAAW,EACpBi2C,EAAaj6C,KAAKu6C,eAAeqC,GACnC3C,WACKj6C,KAAKu6C,eAAeqC,GAC3B3C,EAAWj2C,EAAoB,QAE5B,CAAA,GAAI,UAAWA,EACpB,KAAM,qCAAuCA,EAAe,MACnD,MAAOA,GAEhBhE,KAAK68C,YAAY74C,EAAW,EAAGA,EAAW,KAItCg2C,yBAAR,SAAoBj8B,EAAgB/c,GAClChB,KAAK4sC,KAAK,sBAAuB7uB,EAAQ/c,GAC1B,MAAX+c,EACF/d,KAAK88C,cACH97C,EAAiB,EACjBA,EAAiB,GACL,EACZA,EAAQ,GAEQ,MAAX+c,EACP/d,KAAK88C,cACH97C,EAAiB,EACjBA,EAAiB,GACJ,EACbA,EAAQ,GAEQ,MAAX+c,EACP/d,KAAK+8C,iBAAiB/7C,EAAiB,EAAGA,EAAkB,GAC1C,OAAX+c,EACP/d,KAAK+7C,eACH/6C,EAAwB,EACxBA,EAA0B,GAEV,OAAX+c,EAAiB/d,KAAKg9C,uBAAuBh8C,GAEpD8B,EACE,6CACEgH,EAAUiU,GACV,uCAIAi8B,sBAAR,SAAiBd,EAAmBG,GAClCr5C,KAAK4sC,KAAK,oBACV5sC,KAAKo6C,YAAa,EAClBp6C,KAAKi9C,gCAAiC,IAAIj2C,MAAOE,UACjDlH,KAAKk9C,iBAAiBhE,GACtBl5C,KAAKquC,cAAgBgL,EACjBr5C,KAAKm9C,kBACPn9C,KAAKo9C,oBAEPp9C,KAAKq9C,gBACLr9C,KAAKm9C,kBAAmB,EACxBn9C,KAAKs9C,kBAAiB,IAGhBtD,8BAAR,SAAyB5mC,GAAzB,WACEtP,GACG9D,KAAKq6C,UACN,0DAGEr6C,KAAKu9C,2BACP9P,aAAaztC,KAAKu9C,2BAMpBv9C,KAAKu9C,0BAA4BvqC,WAAW,WAC1CzL,EAAKg2C,0BAA4B,KACjCh2C,EAAKi2C,wBACJtrC,KAAKI,MAAMc,KAGR4mC,wBAAR,SAAmBra,GAGfA,IACC3/B,KAAKkrC,UACNlrC,KAAKy9C,kBAAoBz9C,KAAKu7C,qBAE9Bv7C,KAAK4sC,KAAK,2CACV5sC,KAAKy9C,gBA3lBiB,IA6lBjBz9C,KAAKq6C,WACRr6C,KAAK09C,iBAAiB,IAG1B19C,KAAKkrC,SAAWvL,GAGVqa,uBAAR,SAAkB2D,GACZA,GACF39C,KAAK4sC,KAAK,wBACV5sC,KAAKy9C,gBAvmBiB,IAwmBjBz9C,KAAKq6C,WACRr6C,KAAK09C,iBAAiB,KAGxB19C,KAAK4sC,KAAK,8CACN5sC,KAAKq6C,WACPr6C,KAAKq6C,UAAUrL,UAKbgL,mCAAR,WAWE,GAVAh6C,KAAK4sC,KAAK,4BACV5sC,KAAKo6C,YAAa,EAClBp6C,KAAKq6C,UAAY,KAGjBr6C,KAAK49C,0BAGL59C,KAAKu6C,eAAiB,GAElBv6C,KAAK69C,mBAAoB,CACtB79C,KAAKkrC,SAIClrC,KAAKi9C,iCA/nBgB,KAkoB5B,IAAIj2C,MAAOE,UAAYlH,KAAKi9C,iCAE5Bj9C,KAAKy9C,gBAxoBa,KAyoBpBz9C,KAAKi9C,+BAAiC,OATtCj9C,KAAK4sC,KAAK,8CACV5sC,KAAKy9C,gBAAkBz9C,KAAKu7C,mBAC5Bv7C,KAAK89C,4BAA6B,IAAI92C,MAAOE,WAU/C,IAAM62C,GACJ,IAAI/2C,MAAOE,UAAYlH,KAAK89C,2BAC1BE,EAAiB9rC,KAAK2D,IACxB,EACA7V,KAAKy9C,gBAAkBM,GAEzBC,EAAiB9rC,KAAK0J,SAAWoiC,EAEjCh+C,KAAK4sC,KAAK,0BAA4BoR,EAAiB,MACvDh+C,KAAK09C,iBAAiBM,GAGtBh+C,KAAKy9C,gBAAkBvrC,KAAKG,IAC1BrS,KAAKu7C,mBAtpBsB,IAupB3Bv7C,KAAKy9C,iBAGTz9C,KAAKs9C,kBAAiB,IAGhBtD,kCAAR,WACE,GAAIh6C,KAAK69C,mBAAoB,CAC3B79C,KAAK4sC,KAAK,+BACV5sC,KAAK89C,4BAA6B,IAAI92C,MAAOE,UAC7ClH,KAAKi9C,+BAAiC,KACtC,IAAMgB,EAAgBj+C,KAAK04C,eAAe9oC,KAAK5P,MACzCk+C,EAAUl+C,KAAK65C,SAASjqC,KAAK5P,MAC7Bm+C,EAAen+C,KAAKo+C,sBAAsBxuC,KAAK5P,MAC/Cq+C,EAASr+C,KAAKkR,GAAK,IAAM8oC,GAAqBsE,oBAC9CtvB,EAAOhvB,KACPu+C,EAAgBv+C,KAAKquC,cACvBmQ,GAAW,EACXC,EAAgC,KAC9BC,EAAU,WACVD,EACFA,EAAWzP,SAEXwP,GAAW,EACXL,MAWJn+C,KAAKq6C,UAAY,CACfrL,MAAO0P,EACPpE,YAVoB,SAASzC,GAC7B/zC,EACE26C,EACA,0DAEFA,EAAWnE,YAAYzC,KAQzB,IAAMhQ,EAAe7nC,KAAK2+C,mBAC1B3+C,KAAK2+C,oBAAqB,EAG1B3+C,KAAK4+C,mBACFC,SAAShX,GACTE,KAAK,SAASzoB,GACRk/B,EAgBH7wC,EAAI,0CAfJA,EAAI,8CACJqhB,EAAKksB,WAAa57B,GAAUA,EAAOw/B,YACnCL,EAAa,IAAIvI,GACfmI,EACArvB,EAAKwnB,UACLyH,EACAC,EACAC,EACc,SAAStX,GACrBn9B,GAAKm9B,EAAS,KAAO7X,EAAKwnB,UAAUttC,WAAa,KACjD8lB,EAAK+vB,UA/sBgB,gBAitBvBR,MAMLxW,KAAK,KAAM,SAASjlC,GACnBksB,EAAK4d,KAAK,wBAA0B9pC,GAC/B07C,GAOHE,QAMV1E,uBAAA,SAAUnT,GACRl5B,EAAI,uCAAyCk5B,GAC7C7mC,KAAKg/C,kBAAkBnY,IAAU,EAC7B7mC,KAAKq6C,UACPr6C,KAAKq6C,UAAUrL,SAEXhvC,KAAKu9C,4BACP9P,aAAaztC,KAAKu9C,2BAClBv9C,KAAKu9C,0BAA4B,MAE/Bv9C,KAAKo6C,YACPp6C,KAAKo+C,0BAKXpE,oBAAA,SAAOnT,GACLl5B,EAAI,mCAAqCk5B,UAClC7mC,KAAKg/C,kBAAkBnY,GAC1Bp8B,EAAQzK,KAAKg/C,qBACfh/C,KAAKy9C,gBA/vBiB,IAgwBjBz9C,KAAKq6C,WACRr6C,KAAK09C,iBAAiB,KAKpB1D,8BAAR,SAAyBd,GACvB,IAAMrQ,EAAQqQ,GAAY,IAAIlyC,MAAOE,UACrClH,KAAKi/C,oBAAoB,CAAEC,iBAAkBrW,KAGvCmR,qCAAR,WACE,IAAK,IAAIx5C,EAAI,EAAGA,EAAIR,KAAKu8C,iBAAiB57C,OAAQH,IAAK,CACrD,IAAM2+C,EAAMn/C,KAAKu8C,iBAAiB/7C,GAC9B2+C,GAAgB,MAAOA,EAAI/C,SAAW+C,EAAIzC,SACxCyC,EAAI3kC,YAAY2kC,EAAI3kC,WAAW,qBAE5Bxa,KAAKu8C,iBAAiB/7C,GAC7BR,KAAKw8C,wBAKyB,IAA9Bx8C,KAAKw8C,uBAA4Bx8C,KAAKu8C,iBAAmB,KAGvDvC,8BAAR,SAAyBpmC,EAAoB+V,GAE3C,IAAIsG,EAIFA,EAHGtG,EAGOA,EAAMjf,IAAI,SAAA00C,GAAK,OAAAztC,GAAkBytC,KAAIx5C,KAAK,KAF1C,UAIZ,IAAMy5C,EAASr/C,KAAK86C,cAAclnC,EAAYqc,GAC1CovB,GAAUA,EAAO7kC,YAAY6kC,EAAO7kC,WAAW,sBAG7Cw/B,2BAAR,SAAsBpmC,EAAoBqc,GACxC,IACIovB,EADEC,EAAuB,IAAI9rC,GAAKI,GAAY1K,WAElD,GAAIlJ,KAAKy6C,QAAQ7rB,IAAI0wB,GAAuB,CAC1C,IAAM50C,EAAM1K,KAAKy6C,QAAQvqC,IAAIovC,GAC7BD,EAAS30C,EAAIwF,IAAI+f,GACjBvlB,EAAIykB,OAAOc,GACM,IAAbvlB,EAAIgkB,MACN1uB,KAAKy6C,QAAQtrB,OAAOmwB,QAItBD,OAASl4C,EAEX,OAAOk4C,GAGDrF,4BAAR,SAAuBuF,EAAoBC,GACzC7xC,EAAI,uBAAyB4xC,EAAa,IAAMC,GAChDx/C,KAAKk7C,WAAa,KAClBl7C,KAAK2+C,oBAAqB,EAC1B3+C,KAAKq6C,UAAUrL,QACI,kBAAfuQ,GAAiD,sBAAfA,IAIpCv/C,KAAK87C,yBAxzB0B,GAyzB3B97C,KAAK87C,yBAEP97C,KAAKy9C,gBAj0B0B,IAq0B/Bz9C,KAAK4+C,mBAAmBa,2BAKtBzF,oCAAR,SAA+Bh5C,GACzBhB,KAAK0/C,uBACP1/C,KAAK0/C,uBAAuB1+C,GAExB,QAASA,GACXyC,QAAQkK,IAAI,aAAe3M,EAAU,IAAE+H,QAAQ,KAAM,kBAKnDixC,2BAAR,uBAEEh6C,KAAKm7C,cAIL,IAAsB,IAAAwE,EAAA5lC,EAAA/Z,KAAKy6C,QAAQ7lB,wCAAU,CAAxC,IAAMqR,cACT,IAAyB,IAAA2Z,YAAA7lC,EAAAksB,EAAQrR,yCAAU,CAAtC,IAAM8lB,UACT16C,KAAK26C,YAAYD,wMAIrB,IAAK,IAAIl6C,EAAI,EAAGA,EAAIR,KAAKu8C,iBAAiB57C,OAAQH,IAC5CR,KAAKu8C,iBAAiB/7C,IAAIR,KAAKy8C,SAASj8C,GAG9C,KAAOR,KAAKm8C,0BAA0Bx7C,QAAQ,CAC5C,IAAMy7C,EAAUp8C,KAAKm8C,0BAA0B7K,QAC/CtxC,KAAKk8C,kBACHE,EAAQr+B,OACRq+B,EAAQxoC,WACRwoC,EAAQ3zC,KACR2zC,EAAQ5hC,cAQNw/B,+BAAR,WACE,IAAM9Q,EAAiC,GASvCA,EAAM,UAA4BrlC,GAAYkF,QAAQ,MAAO,MAAQ,EAEjElB,IACFqhC,EAAM,qBAAuB,E7Ej1BV,iBAAdlhC,WAAmD,gBAAzBA,UAAmB,U6Em1BlDkhC,EAAM,yBAA2B,GAEnClpC,KAAKupC,YAAYL,IAGX8Q,8BAAR,WACE,IAAM2D,EAASnS,GAAcqU,cAAcC,kBAC3C,OAAOr1C,EAAQzK,KAAKg/C,oBAAsBrB,GA1zB7B3D,+BAA8B,EAK9BA,qBAAoB,MAOnC,YACUxD,EACAsG,EAMAQ,EACA2B,EACAL,EACA/C,GAXV,MAaEzzC,oBAEA,GAdQb,YAAAivC,EACAjvC,gBAAAu1C,EAMAv1C,mBAAA+1C,EACA/1C,sBAAA03C,EACA13C,qBAAAq3C,EACAr3C,gBAAAs0C,EA9DVt0C,KAAKyyC,GAAqB+F,8BAClBx4C,OAAO6I,EAAW,KAAO7I,EAAK2J,GAAK,KAEnC3J,oBAAmD,GAE1CA,UAGb,IAAIioB,IACAjoB,mBAAqC,GACrCA,uBAAuB,EACvBA,4BAAmD,GACnDA,cAAa,EACbA,kBAtDkB,IAuDlBA,qBAtD0B,IAuD1BA,yBAAuD,KAC/DA,gBAA+B,KAEvBA,4BAA2C,KAE3CA,YAAoB,EAGpBA,iBAAoD,GACpDA,iBAAiB,EAEjBA,YAGG,KAEHA,aAA4B,KAC5BA,sBAAqB,EACrBA,yBAAyB,EAEzBA,oBAAmB,EACnBA,6BAA4C,KAC5CA,iCAAgD,KA6BlDs0C,IAAkB5zC,IACpB,MAAM,IAAI/D,MACR,yFAGJqD,EAAKm2C,iBAAiB,GAEtBzS,GAAkB4U,cAAc1yB,GAAG,UAAW5lB,EAAKy4C,WAAYz4C,IAEpB,IAAvCivC,EAAUtgC,KAAKgB,QAAQ,YACzBs0B,GAAcqU,cAAc1yB,GAAG,SAAU5lB,EAAK04C,UAAW14C,KCtH/D,WAAwCW,QAAA6xC,IACtCmG,yBAAA,SAAYhX,GACV,MAAM,IAAIhlC,MAAM,4BAoBXg8C,gBAAP,SAAoBv2B,EAAcoZ,GAChC,YAAY57B,IAAR47B,EACK,OAASA,GAEhBj/B,EACE6lB,EAAMC,iBAAiByc,YACvB,kDAEK1c,EAAM/T,KAAK1M,aAwBtBg3C,oBAAA,SACEv2B,EACA6wB,EACAzX,EACAvoB,GAJF,WAMQ5G,EAAa+V,EAAM/T,KAAK1M,WAC9BlJ,KAAK4sC,KACH,qBAAuBh5B,EAAa,IAAM+V,EAAM2E,mBAIlD,IAAM6xB,EAAWD,GAAmBE,aAAaz2B,EAAOoZ,GAClDsd,EAAa,GACnBrgD,KAAKsgD,SAASH,GAAYE,EAE1B,IAAME,EAAwB52B,EAC3BC,iBACA42B,8BAEHxgD,KAAKygD,aACH7sC,EAAa,QACb2sC,EACA,SAACz9C,EAAOwc,GACN,IAAI7W,EAAO6W,EAEG,MAAVxc,IAEFA,EADA2F,EAAO,MAIK,OAAV3F,GACFyE,EAAKu1C,cAAclpC,EAAYnL,GAAmB,EAAOs6B,GAGvDv4B,EAAQjD,EAAK+4C,SAAUH,KAAcE,GAUvC7lC,EARK1X,EAEe,KAATA,EACA,oBAEA,cAAgBA,EAJhB,KAOQ,SAO3Bo9C,sBAAA,SAASv2B,EAAcoZ,GACrB,IAAMod,EAAWD,GAAmBE,aAAaz2B,EAAOoZ,UACjD/iC,KAAKsgD,SAASH,IAIvBD,8BAAA,SAAiBl2C,KAaTk2C,0BAAR,SACEtsC,EACA2sC,EACAj5C,GAHF,wBAEEi5C,MAGAA,EAA8B,OAAI,SAElCvgD,KAAK4+C,mBACFC,UAA2B,GAC3B9W,KAAK,SAAA2Y,GACJ,IAAMC,EAAYD,GAAiBA,EAAc5B,YAC7C6B,IACFJ,EAA4B,KAAII,GAGlC,IAAM/O,GACHrqC,EAAKivC,UAAU7/B,OAAS,WAAa,WACtCpP,EAAKivC,UAAUtgC,KACftC,EACA,OAEArM,EAAKivC,UAAU3/B,UC5JzB,SAA4B+pC,GAI1B,IADA,IAAMnqC,EAAS,cACHxN,EAAK9G,GACXxC,MAAMoF,QAAQ5C,GAChBA,EAAMotB,QAAQ,SAAAsxB,GACZpqC,EAAOpU,KACLwR,mBAAmB5K,GAAO,IAAM4K,mBAAmBgtC,MAIvDpqC,EAAOpU,KAAKwR,mBAAmB5K,GAAO,IAAM4K,mBAAmB1R,SARxCqH,EAAAhK,OAAO2+B,QAAQyiB,GAAfp4C,WAAAA,KAAhB,IAAAc,oBAWX,OAAOmN,EAAO9V,OAAS,IAAM8V,EAAO7Q,KAAK,KAAO,GD8IxCk7C,CAAYP,GAEdh5C,EAAKqlC,KAAK,4BAA8BgF,GACxC,IAAMmP,EAAM,IAAIC,eAChBD,EAAI3O,mBAAqB,WACvB,GAAI9qC,GAA+B,IAAnBy5C,EAAIjU,WAAkB,CACpCvlC,EAAKqlC,KACH,qBAAuBgF,EAAM,qBAC7BmP,EAAIra,OACJ,YACAqa,EAAIE,cAEN,IAAIp2C,EAAM,KACV,GAAkB,KAAdk2C,EAAIra,QAAiBqa,EAAIra,OAAS,IAAK,CACzC,IACE77B,EAAMlB,EAASo3C,EAAIE,cACnB,MAAO3+C,GACPoH,GACE,qCACEkoC,EACA,KACAmP,EAAIE,cAGV35C,EAAS,KAAMuD,QAGI,MAAfk2C,EAAIra,QAAiC,MAAfqa,EAAIra,QAC5Bh9B,GACE,sCACEkoC,EACA,YACAmP,EAAIra,QAGVp/B,EAASy5C,EAAIra,QAEfp/B,EAAW,OAIfy5C,EAAIjO,KAAK,MAAOlB,GAAuB,GACvCmP,EAAIxL,cArJV,YACUiB,EACAsG,EAMA8B,GARV,MAUEx2C,2BATQb,YAAAivC,EACAjvC,gBAAAu1C,EAMAv1C,qBAAAq3C,EA1CFr3C,OAAiC6I,EAAW,WAQ5C7I,WAAoC,KEC9C,IAAM25C,GAAmB,qBAmIvBC,sBAAA,WACE,OACGnhD,KAAKw2C,UAAU7/B,OAAS,WAAa,WAAa3W,KAAKw2C,UAAUtgC,MAOtEirC,kBAAA,WACE,OAAOnhD,KAAKw2C,UAAU3/B,WAMxBsqC,wBAAA,WACE,IAGMh2C,EAHanL,KAAKohD,UAAUluB,QAChC,IAAI1f,GAAK,2BAEgBpF,OAAoB,EAC/C,OAAO,IAAIpH,MAAOE,UAAYiE,GAMhCg2C,kCAAA,WACE,OxC/K8B,SAChCvsB,GAMA,OAFAA,EAASA,GAAU,IACD,UAAIA,EAAkB,YAAK,IAAI5tB,MAAOE,UACjD0tB,EwCwKEysB,CAAmB,CACxBnI,UAAWl5C,KAAKshD,gBAOZH,2BAAR,SACEvtC,EACAnL,EACA84C,EACAxe,GAGA/iC,KAAKwhD,kBACL,IAAM5rC,EAAO,IAAIpC,GAAKI,GACtBnL,EAAOzI,KAAKyhD,6BACRzhD,KAAKyhD,6BAA6B7tC,EAAYnL,GAC9CA,EACJ,IAAIoyB,EAAS,GACb,GAAIkI,EACF,GAAIwe,EAAS,CACX,IAAMG,EAAiBh3C,EAAIjC,EAA8B,SAACk5C,GACxD,OAAA1kC,GAAa0kC,KAEf9mB,EAAS76B,KAAK4hD,gBAAgBC,sBAC5BjsC,EACA8rC,EACA3e,OAEG,CACL,IAAM+e,EAAa7kC,GAAaxU,GAChCoyB,EAAS76B,KAAK4hD,gBAAgBG,0BAC5BnsC,EACAksC,EACA/e,QAGC,GAAIwe,EAAS,CAClB,IAAMhoB,EAAkB7uB,EAAIjC,EAA8B,SAACk5C,GACzD,OAAA1kC,GAAa0kC,KAEf9mB,EAAS76B,KAAK4hD,gBAAgBI,iBAAiBpsC,EAAM2jB,OAChD,CACL,IAAMtR,EAAOhL,GAAaxU,GAC1BoyB,EAAS76B,KAAK4hD,gBAAgBK,qBAAqBrsC,EAAMqS,GAE3D,IAAI4L,EAAeje,EACC,EAAhBilB,EAAOl6B,SAGTkzB,EAAe7zB,KAAKkiD,mBAAmBtsC,IAEzC5V,KAAKmiD,YAAYC,0BAA0BvuB,EAAcgH,IAI3DsmB,kCAAA,SAAqB75C,GACnBtH,KAAKyhD,6BAA+Bn6C,GAG9B65C,8BAAR,SAAyBkB,GACvBriD,KAAKsiD,YAAY,YAAaD,IACR,IAAlBA,GACFriD,KAAKuiD,0BAIDpB,iCAAR,SAA4BniB,GAA5B,WACEntB,GAAKmtB,EAAS,SAAC78B,EAAY8G,GACzB1B,EAAK+6C,YAAYr5C,EAAK9G,MAIlBg/C,yBAAR,SAAoBvtC,EAAoBzR,GACtC,IAAMyT,EAAO,IAAIpC,GAAK,UAAYI,GAC5BuI,EAAUc,GAAa9a,GAC7BnC,KAAKohD,UAAUoB,eAAe5sC,EAAMuG,GACpC,IAAM0e,EAAS76B,KAAKyiD,cAAcR,qBAAqBrsC,EAAMuG,GAC7Dnc,KAAKmiD,YAAYC,0BAA0BxsC,EAAMilB,IAG3CsmB,6BAAR,WACE,OAAOnhD,KAAK0iD,gBAGdvB,6BAAA,SACEvrC,EACA+sC,EACA19B,EACAzK,GAJF,WAMExa,KAAK4sC,KAAK,MAAO,CACfh3B,KAAMA,EAAK1M,WACX/G,MAAOwgD,EACP1qC,SAAUgN,IAKZ,IAAMyK,EAAe1vB,KAAK4iD,uBACpBC,EAAoB5lC,GAAa0lC,EAAQ19B,GACzC9I,EAAUyT,GACdizB,EACAnzB,GAGIgQ,EAAU1/B,KAAK8iD,kBACfjoB,EAAS76B,KAAK4hD,gBAAgBmB,mBAClCntC,EACAuG,EACAujB,GACA,GAEF1/B,KAAKmiD,YAAYlY,YAAYpP,GAC7B76B,KAAKspC,QAAQ6V,IACXvpC,EAAK1M,WACL25C,EAAkBz0C,KAAgB,GAClC,SAACs4B,EAAQiW,GACP,IAAMqG,EAAqB,OAAXtc,EACXsc,GACHt5C,GAAK,UAAYkM,EAAO,YAAc8wB,GAGxC,IAAMuc,EAAc17C,EAAKq6C,gBAAgB/qB,aACvC6I,GACCsjB,GAEHz7C,EAAK46C,YAAYC,0BAA0BxsC,EAAMqtC,GACjD17C,EAAK27C,uBAAuB1oC,EAAYksB,EAAQiW,KAGpD,IAAM9oB,EAAe7zB,KAAKmjD,mBAAmBvtC,GAC7C5V,KAAKkiD,mBAAmBruB,GAExB7zB,KAAKmiD,YAAYC,0BAA0BvuB,EAAc,KAG3DstB,oBAAA,SACEvrC,EACAwtC,EACA5oC,GAHF,WAKExa,KAAK4sC,KAAK,SAAU,CAAEh3B,KAAMA,EAAK1M,WAAY/G,MAAOihD,IAGpD,IAAIC,GAAQ,EACN3zB,EAAe1vB,KAAK4iD,uBACpBrpB,EAAyC,GAU/C,GATA1nB,GAAKuxC,EAAiB,SAACE,EAAoBC,GACzCF,GAAQ,EACR,IAAMR,EAAoB5lC,GAAasmC,GACvChqB,EAAgB+pB,GAAc1zB,GAC5BizB,EACAnzB,KAIC2zB,EAoCH11C,EAAI,wDACJ3N,KAAKkjD,uBAAuB1oC,EAAY,UArC9B,CACV,IAAMgpC,EAAUxjD,KAAK8iD,kBACfjoB,EAAS76B,KAAK4hD,gBAAgB6B,eAClC7tC,EACA2jB,EACAiqB,GAEFxjD,KAAKmiD,YAAYlY,YAAYpP,GAC7B76B,KAAKspC,QAAQ5S,MACX9gB,EAAK1M,WACLk6C,EACA,SAAC1c,EAAQiW,GACP,IAAMqG,EAAqB,OAAXtc,EACXsc,GACHt5C,GAAK,aAAekM,EAAO,YAAc8wB,GAG3C,IAAMuc,EAAc17C,EAAKq6C,gBAAgB/qB,aACvC2sB,GACCR,GAEGnvB,EACiB,EAArBovB,EAAYtiD,OAAa4G,EAAK26C,mBAAmBtsC,GAAQA,EAC3DrO,EAAK46C,YAAYC,0BAA0BvuB,EAAcovB,GACzD17C,EAAK27C,uBAAuB1oC,EAAYksB,EAAQiW,KAIpD9qC,GAAKuxC,EAAiB,SAACjZ,GACrB,IAAMtW,EAAetsB,EAAK47C,mBAAmBvtC,EAAKT,MAAMg1B,IACxD5iC,EAAK26C,mBAAmBruB,KAI1B7zB,KAAKmiD,YAAYC,0BAA0BxsC,EAAM,MAU7CurC,oCAAR,WAAA,WACEnhD,KAAK4sC,KAAK,sBAEV,IAAMld,EAAe1vB,KAAK4iD,uBACpBc,ExC1V8B,SACtCz0B,EACAS,GAEA,IAAMi0B,EAAe,IAAIn1B,GAOzB,OANAS,EAAKK,YAAY,IAAI9b,GAAK,IAAK,SAASoC,EAAMkG,GAC5C6nC,EAAa50B,SACXnZ,EACAga,GAA6B9T,EAAM4T,MAGhCi0B,EwC+U4BC,CAC/B5jD,KAAKwsC,cACL9c,GAEEmL,EAAkB,GAEtB6oB,EAAyBp0B,YAAY9b,GAAKid,MAAO,SAAC7a,EAAMqS,GACtD4S,EAASA,EAAO73B,OACduE,EAAKq6C,gBAAgBK,qBAAqBrsC,EAAMqS,IAElD,IAAM4L,EAAetsB,EAAK47C,mBAAmBvtC,GAC7CrO,EAAK26C,mBAAmBruB,KAG1B7zB,KAAKwsC,cAAgB,IAAIhe,GACzBxuB,KAAKmiD,YAAYC,0BAA0B5uC,GAAKid,MAAOoK,IAGzDsmB,gCAAA,SACEvrC,EACA4E,GAFF,WAIExa,KAAKspC,QAAQ3uB,mBAAmB/E,EAAK1M,WAAY,SAACw9B,EAAQiW,GACzC,OAAXjW,GACFn/B,EAAKilC,cAActd,OAAOtZ,GAE5BrO,EAAK27C,uBAAuB1oC,EAAYksB,EAAQiW,MAIpDwE,6BAAA,SACEvrC,EACAzT,EACAqY,GAHF,WAKQ2B,EAAUc,GAAa9a,GAC7BnC,KAAKspC,QAAQua,gBACXjuC,EAAK1M,WACLiT,EAAQ/N,KAAgB,GACxB,SAACs4B,EAAQiW,GACQ,OAAXjW,GACFn/B,EAAKilC,cAAczd,SAASnZ,EAAMuG,GAEpC5U,EAAK27C,uBAAuB1oC,EAAYksB,EAAQiW,MAKtDwE,yCAAA,SACEvrC,EACAzT,EACA8V,EACAuC,GAJF,WAMQ2B,EAAUc,GAAa9a,EAAO8V,GACpCjY,KAAKspC,QAAQua,gBACXjuC,EAAK1M,WACLiT,EAAQ/N,KAAgB,GACxB,SAACs4B,EAAQiW,GACQ,OAAXjW,GACFn/B,EAAKilC,cAAczd,SAASnZ,EAAMuG,GAEpC5U,EAAK27C,uBAAuB1oC,EAAYksB,EAAQiW,MAKtDwE,gCAAA,SACEvrC,EACAwtC,EACA5oC,GAHF,WAKE,GAAI/P,EAAQ24C,GAKV,OAJAz1C,EACE,4EAEF3N,KAAKkjD,uBAAuB1oC,EAAY,MAI1Cxa,KAAKspC,QAAQwa,kBACXluC,EAAK1M,WACLk6C,EACA,SAAC1c,EAAQiW,GACQ,OAAXjW,GACF70B,GAAKuxC,EAAiB,SAAC9lC,EAAmBE,GACxC,IAAMC,EAAeR,GAAaO,GAClCjW,EAAKilC,cAAczd,SAASnZ,EAAKT,MAAMmI,GAAYG,KAGvDlW,EAAK27C,uBAAuB1oC,EAAYksB,EAAQiW,MAKtDwE,sCAAA,SAAyBx3B,EAAcP,GACrC,IAAIyR,EAEFA,EAD4B,UAA1BlR,EAAM/T,KAAKvB,WACJrU,KAAKyiD,cAAc3kB,qBAC1BnU,EACAP,GAGOppB,KAAK4hD,gBAAgB9jB,qBAC5BnU,EACAP,GAGJppB,KAAKmiD,YAAY4B,kBAAkBp6B,EAAM/T,KAAMilB,IAGjDsmB,yCAAA,SACEx3B,EACAP,GAIA,IAAIyR,EAEFA,EAD4B,UAA1BlR,EAAM/T,KAAKvB,WACJrU,KAAKyiD,cAAcnkB,wBAC1B3U,EACAP,GAGOppB,KAAK4hD,gBAAgBtjB,wBAC5B3U,EACAP,GAGJppB,KAAKmiD,YAAY4B,kBAAkBp6B,EAAM/T,KAAMilB,IAGjDsmB,uBAAA,WACMnhD,KAAKgkD,uBACPhkD,KAAKgkD,sBAAsBjF,UAAUmC,KAIzCC,oBAAA,WACMnhD,KAAKgkD,uBACPhkD,KAAKgkD,sBAAsBC,OAAO/C,KAItCC,mBAAA,SAAM+C,GACJ,gBADIA,MACmB,oBAAZzgD,QAAX,CAEA,IAAIylC,EAIFA,EAHEgb,GACGlkD,KAAKmpC,iBACRnpC,KAAKmpC,eAAiB,IAAIT,GAAc1oC,KAAKsvC,SACvCtvC,KAAKmpC,eAAej5B,OAEpBlQ,KAAKsvC,OAAOp/B,MAGtB,IAAMi0C,EAAc3kD,OAAO+J,KAAK2/B,GAAOkb,OACrC,SAACC,EAAeC,GACd,OAAApyC,KAAK2D,IAAIyuC,EAAa3jD,OAAQ0jD,IAChC,GAGFxyC,GAAKq3B,EAAO,SAACH,EAAc5mC,GAGzB,IAFA,IAAIoiD,EAAaxb,EAERvoC,EAAIuoC,EAAKpoC,OAAQH,EAAI2jD,EAAc,EAAG3jD,IAC7C+jD,GAAc,IAEhB9gD,QAAQkK,IAAI42C,EAAapiD,OAI7Bg/C,mCAAA,SAAsBqD,GACpBxkD,KAAKsvC,OAAOC,iBAAiBiV,GAC7BxkD,KAAKykD,eAAeC,YAAYF,IAG1BrD,kBAAR,eAAa,aAAA34C,mBAAAA,IAAAwH,kBACX,IAAIK,EAAS,GACTrQ,KAAKgkD,wBACP3zC,EAASrQ,KAAKgkD,sBAAsB9yC,GAAK,KAE3CvD,kBAAI0C,GAAWL,KAGjBmxC,oCAAA,SACE75C,EACAo/B,EACAiW,GAEIr1C,GACFyL,GAAe,WACb,GAAc,MAAV2zB,EACFp/B,EAAS,UACJ,CACL,IAAMa,GAAQu+B,GAAU,SAASI,cAC7B9iC,EAAUmE,EACVw0C,IAAa34C,GAAW,KAAO24C,GAEnC,IAAM75C,EAAQ,IAAIoB,MAAMF,GACvBlB,EAAcqF,KAAOA,EACtBb,EAASxE,OAMjBtD,sBAAI2hD,6BAAJ,WACE,OAAOnhD,KAAK2kD,aAAe3kD,KAAK2kD,WAAa,IAAIC,GAAS5kD,4CA/hB5D,YACSw2C,EACPqO,EACOC,GAHT,WACS9kD,eAAAw2C,EAEAx2C,SAAA8kD,EA5BT9kD,qBAAkB,EAKVA,oBAAuC,KACvCA,iBAAc,IAAI0pC,GAClB1pC,kBAAe,EAOfA,kCAEG,KAIHA,mBAAgB,IAAIwuB,GAG5BxuB,2BAAqD,KAOnD,IAAM+kD,EAAoB,IAAInd,GAAkBkd,GAIhD,GAFA9kD,KAAKsvC,OAASjH,GAAa+H,cAAcoG,GAErCqO,GpEyhBC,IAZc,iBAAX/8C,QACNA,OAAkB,WAClBA,OAAkB,UAAa,WACjC,IAOUk9C,OACR,4FoEvhBAhlD,KAAKspC,QAAU,IAAI4W,GACjBlgD,KAAKw2C,UACLx2C,KAAK88C,cAAcltC,KAAK5P,MACxB+kD,GAIF/xC,WAAWhT,KAAKs9C,iBAAiB1tC,KAAK5P,MAAM,GAAO,OAC9C,CACL,IAAMilD,EAAeH,EAAI7c,QAAsC,6BAE/D,GAAI,MAAOgd,EAAuD,CAChE,GAA4B,iBAAjBA,EACT,MAAM,IAAI/gD,MACR,sEAGJ,IACE4F,EAAUm7C,GACV,MAAO3iD,GACP,MAAM,IAAI4B,MAAM,kCAAoC5B,IAIxDtC,KAAKgkD,sBAAwB,IAAIhK,GAC/Bh6C,KAAKw2C,UACLx2C,KAAK88C,cAAcltC,KAAK5P,MACxBA,KAAKs9C,iBAAiB1tC,KAAK5P,MAC3BA,KAAKi/C,oBAAoBrvC,KAAK5P,MAC9B+kD,EACAE,GAGFjlD,KAAKspC,QAAUtpC,KAAKgkD,sBAGtBe,EAAkBG,uBAAuB,SAAAl7C,GACvCzC,EAAK+hC,QAAQ6b,iBAAiBn7C,KAKhChK,KAAKykD,eAAiBpc,GAAa+c,oBACjC5O,EACA,WAAM,OAAA,IAAIxN,GAAczhC,EAAK+nC,OAAQ/nC,EAAK+hC,WAG5CtpC,KAAKqlD,qBAGLrlD,KAAKohD,UAAY,IAAI3Z,GACrBznC,KAAKyiD,cAAgB,IAAIrgB,GAAS,CAChC8C,eAAgB,SAACvb,EAAOoZ,EAAKyX,EAAehgC,GAC1C,IAAI8qC,EAAsB,GACpBxpC,EAAOvU,EAAK65C,UAAUluB,QAAQvJ,EAAM/T,MAY1C,OATKkG,EAAKrR,YACR66C,EAAa/9C,EAAKk7C,cAAcR,qBAC9Bt4B,EAAM/T,KACNkG,GAEF9I,WAAW,WACTwH,EAAW,OACV,IAEE8qC,GAEThgB,cAAe,eAEjBtlC,KAAKsiD,YAAY,aAAa,GAE9BtiD,KAAK4hD,gBAAkB,IAAIxf,GAAS,CAClC8C,eAAgB,SAACvb,EAAOoZ,EAAKyX,EAAehgC,GAM1C,OALAjT,EAAK+hC,QAAQ+V,OAAO11B,EAAO6wB,EAAezX,EAAK,SAAC2D,EAAQj+B,GACtD,IAAMoyB,EAASrgB,EAAWksB,EAAQj+B,GAClClB,EAAK46C,YAAYC,0BAA0Bz4B,EAAM/T,KAAMilB,KAGlD,IAETyK,cAAe,SAAC3b,EAAOoZ,GACrBx7B,EAAK+hC,QAAQic,SAAS57B,EAAOoZ,MCxIrC,QA0CEyiB,0BAAA,WACE,OAAOxlD,KAAKylD,YAMdD,wBAAA,WACE,OAAOxlD,KAAK0lD,UAOdF,qBAAA,SAAQ1pC,GACN,OACE9b,KAAK6oB,OAAO5M,QAAQjc,KAAK2lD,eAAgB7pC,IAAS,GAClD9b,KAAK6oB,OAAO5M,QAAQH,EAAM9b,KAAK4lD,eAAiB,GAOpDJ,yBAAA,SACEv9B,EACAhf,EACAkoB,EACA0C,EACA9sB,EACA+sB,GAKA,OAHK9zB,KAAK08B,QAAQ,IAAI7gB,GAAU5S,EAAKkoB,MACnCA,EAAWxM,GAAapH,YAEnBvd,KAAK6lD,eAAehoC,YACzBoK,EACAhf,EACAkoB,EACA0C,EACA9sB,EACA+sB,IAOJ0xB,4BAAA,SACE7xB,EACAW,EACAR,GAEIQ,EAAQxX,eAEVwX,EAAU3P,GAAapH,YAEzB,IAAIuV,EAAWwB,EAAQD,UAAUr0B,KAAK6oB,QAEtCiK,EAAWA,EAASpV,eAAeiH,GAAapH,YAChD,IAAMuoC,EAAO9lD,KAMb,OALAs0B,EAAQ9O,aAAa1G,GAAgB,SAAS7V,EAAKuU,GAC5CsoC,EAAKppB,QAAQ,IAAI7gB,GAAU5S,EAAKuU,MACnCsV,EAAWA,EAASnV,qBAAqB1U,EAAK0b,GAAapH,eAGxDvd,KAAK6lD,eAAe7tB,eACzBrE,EACAb,EACAgB,IAOJ0xB,4BAAA,SAAe7xB,EAAe1O,GAE5B,OAAO0O,GAMT6xB,0BAAA,WACE,OAAO,GAMTA,8BAAA,WACE,OAAOxlD,KAAK6lD,gBAMdL,sBAAA,WACE,OAAOxlD,KAAK6oB,QAQC28B,iBAAf,SAA6B/uC,GAC3B,GAAIA,EAAO6U,WAAY,CACrB,IAAMy6B,EAAYtvC,EAAOmV,oBACzB,OAAOnV,EAAOoT,WAAWm8B,SAASvvC,EAAO8U,qBAAsBw6B,GAE/D,OAAOtvC,EAAOoT,WAAWxD,WASdm/B,eAAf,SAA2B/uC,GACzB,GAAIA,EAAO+U,SAAU,CACnB,IAAMy6B,EAAUxvC,EAAOoV,kBACvB,OAAOpV,EAAOoT,WAAWm8B,SAASvvC,EAAOgV,mBAAoBw6B,GAE7D,OAAOxvC,EAAOoT,WAAWpD,eAzI7B,YAAYhQ,GACVzW,KAAK6lD,eAAiB,IAAIjyB,GAAcnd,EAAOoT,YAC/C7pB,KAAK6oB,OAASpS,EAAOoT,WACrB7pB,KAAKylD,WAAaD,GAAaU,cAAczvC,GAC7CzW,KAAK0lD,SAAWF,GAAaW,YAAY1vC,GClC7C,QA0CE2vC,yBAAA,SACEn+B,EACAhf,EACAkoB,EACA0C,EACA9sB,EACA+sB,GAKA,OAHK9zB,KAAKqmD,cAAc3pB,QAAQ,IAAI7gB,GAAU5S,EAAKkoB,MACjDA,EAAWxM,GAAapH,YAEtB0K,EAAKlD,kBAAkB9b,GAAK4V,OAAOsS,GAE9BlJ,EACEA,EAAKc,cAAgB/oB,KAAKsmD,OAC5BtmD,KAAKqmD,cACTttB,mBACAlb,YACCoK,EACAhf,EACAkoB,EACA0C,EACA9sB,EACA+sB,GAGG9zB,KAAKumD,sBACVt+B,EACAhf,EACAkoB,EACApqB,EACA+sB,IAQNsyB,4BAAA,SACEzyB,EACAW,EACAR,GAEA,IAAIhB,EACJ,GAAIwB,EAAQxX,cAAgBwX,EAAQ7pB,UAElCqoB,EAAWnO,GAAapH,WAAW8W,UAAUr0B,KAAK6oB,aAElD,GACgB,EAAd7oB,KAAKsmD,OAAahyB,EAAQvL,eAC1BuL,EAAQP,UAAU/zB,KAAK6oB,QACvB,CAEAiK,EAAWnO,GAAapH,WAAW8W,UAAUr0B,KAAK6oB,QAElD,IAAI/mB,SAEFA,EADE9B,KAAKwmD,SACKlyB,EAAyB9N,uBACnCxmB,KAAKqmD,cAAcT,aACnB5lD,KAAK6oB,QAGKyL,EAAyBlO,gBACnCpmB,KAAKqmD,cAAcV,eACnB3lD,KAAK6oB,QAIT,IADA,IAAIhJ,EAAQ,EACL/d,EAAS2kD,WAAa5mC,EAAQ7f,KAAKsmD,QAAQ,CAChD,IAAM7kD,EAAOK,EAASkiB,UAStB,KAPIhkB,KAAKwmD,SAELxmD,KAAK6oB,OAAO5M,QAAQjc,KAAKqmD,cAAcV,eAAgBlkD,IAAS,EAGhEzB,KAAK6oB,OAAO5M,QAAQxa,EAAMzB,KAAKqmD,cAAcT,eAAiB,GAOhE,MAJA9yB,EAAWA,EAASnV,qBAAqBlc,EAAKmM,KAAMnM,EAAKqa,MACzD+D,SAMC,CAILiT,GAFAA,EAAWwB,EAAQD,UAAUr0B,KAAK6oB,SAEdnL,eAClBiH,GAAapH,YAEf,IAAI+I,SACAI,SACA7R,SAEJ,GADI/S,SACA9B,KAAKwmD,SAAU,CACjB1kD,EAAWgxB,EAAS4zB,mBAAmB1mD,KAAK6oB,QAC5CvC,EAAYtmB,KAAKqmD,cAAcT,aAC/Bl/B,EAAU1mB,KAAKqmD,cAAcV,eAC7B,IAAMgB,EAAe3mD,KAAK6oB,OAAO3E,aACjCrP,EAAM,SAACtJ,EAAchM,GAAiB,OAAAonD,EAAapnD,EAAGgM,SAEtDzJ,EAAWgxB,EAAShP,YAAY9jB,KAAK6oB,QACrCvC,EAAYtmB,KAAKqmD,cAAcV,eAC/Bj/B,EAAU1mB,KAAKqmD,cAAcT,aAC7B/wC,EAAM7U,KAAK6oB,OAAO3E,aAGhBrE,EAAQ,EAEZ,IAFA,IACI+mC,GAAiB,EACd9kD,EAAS2kD,WACVhlD,EAAOK,EAASkiB,WACf4iC,GAAkB/xC,EAAIyR,EAAW7kB,IAAS,IAE7CmlD,GAAiB,GAGjBA,GAAkB/mC,EAAQ7f,KAAKsmD,QAAUzxC,EAAIpT,EAAMilB,IAAY,EAE/D7G,IAEAiT,EAAWA,EAASnV,qBAClBlc,EAAKmM,KACL+W,GAAapH,YAMvB,OAAOvd,KAAKqmD,cACTttB,mBACAf,eAAerE,EAASb,EAAUgB,IAMvCsyB,4BAAA,SAAezyB,EAAe1O,GAE5B,OAAO0O,GAMTyyB,0BAAA,WACE,OAAO,GAMTA,8BAAA,WACE,OAAOpmD,KAAKqmD,cAActtB,oBAM5BqtB,sBAAA,WACE,OAAOpmD,KAAK6oB,QAYNu9B,mCAAR,SACEn+B,EACA0G,EACAmC,EACA/pB,EACA8/C,GAGA,IAAIhyC,EACJ,GAAI7U,KAAKwmD,SAAU,CACjB,IAAMM,EAAW9mD,KAAK6oB,OAAO3E,aAC7BrP,EAAM,SAACtJ,EAAchM,GAAiB,OAAAunD,EAASvnD,EAAGgM,SAElDsJ,EAAM7U,KAAK6oB,OAAO3E,aAEpB,IAAMsW,EAAgBvS,EACtBnkB,EAAO02B,EAAczR,eAAiB/oB,KAAKsmD,OAAQ,IACnD,IAAMS,EAAoB,IAAIlrC,GAAU8S,EAAUmC,GAC5Ck2B,EAAiBhnD,KAAKwmD,SACxBhsB,EAAcysB,cAAcjnD,KAAK6oB,QAChC2R,EAAc0sB,aAAalnD,KAAK6oB,QAC/Bs+B,EAAUnnD,KAAKqmD,cAAc3pB,QAAQqqB,GAC3C,GAAIvsB,EAAc9H,SAAS/D,GAAW,CAOpC,IANA,IAAMy4B,EAAe5sB,EAAczV,kBAAkB4J,GACjDgD,EAAY5qB,EAAOsgD,mBACrBrnD,KAAK6oB,OACLm+B,EACAhnD,KAAKwmD,UAGQ,MAAb70B,IACCA,EAAU/jB,MAAQ+gB,GAAY6L,EAAc9H,SAASf,EAAU/jB,QAKhE+jB,EAAY5qB,EAAOsgD,mBACjBrnD,KAAK6oB,OACL8I,EACA3xB,KAAKwmD,UAGT,IAAMc,EACS,MAAb31B,EAAoB,EAAI9c,EAAI8c,EAAWo1B,GAGzC,GADEI,IAAYr2B,EAAUrmB,WAA4B,GAAf68C,EAOnC,OALyB,MAArBT,GACFA,EAAkB5yB,iBAChBd,GAAOiB,mBAAmBzF,EAAUmC,EAAWs2B,IAG5C5sB,EAAc7c,qBAAqBgR,EAAUmC,GAE3B,MAArB+1B,GACFA,EAAkB5yB,iBAChBd,GAAOe,mBAAmBvF,EAAUy4B,IAGxC,IAAMzvB,EAAgB6C,EAAc7c,qBAClCgR,EACAhK,GAAapH,YAIf,OADe,MAAboU,GAAqB3xB,KAAKqmD,cAAc3pB,QAAQ/K,IAEvB,MAArBk1B,GACFA,EAAkB5yB,iBAChBd,GAAOgB,iBAAiBxC,EAAU/jB,KAAM+jB,EAAU7V,OAG/C6b,EAAcha,qBACnBgU,EAAU/jB,KACV+jB,EAAU7V,OAGL6b,EAGN,OAAI7G,EAAUrmB,UAEZwd,EACEk/B,GACqC,GAA1CtyC,EAAImyC,EAAgBD,IACG,MAArBF,IACFA,EAAkB5yB,iBAChBd,GAAOe,mBAAmB8yB,EAAep5C,KAAMo5C,EAAelrC,OAEhE+qC,EAAkB5yB,iBAChBd,GAAOgB,iBAAiBxF,EAAUmC,KAG/B0J,EACJ7c,qBAAqBgR,EAAUmC,GAC/BnT,qBAAqBqpC,EAAep5C,KAAM+W,GAAapH,aAKrD0K,OA5RX,YAAYxR,GACVzW,KAAKqmD,cAAgB,IAAIb,GAAa/uC,GACtCzW,KAAK6oB,OAASpS,EAAOoT,WACrB7pB,KAAKsmD,OAAS7vC,EAAO8wC,WACrBvnD,KAAKwmD,UAAY/vC,EAAO+wC,iBCpC5B,QA6DEC,sBAAA,WACE,OAAOznD,KAAK0nD,WAMdD,4BAAA,WACE,MAAuB,KAAnBznD,KAAK2nD,UAKA3nD,KAAK0nD,UAGV1nD,KAAK2nD,YAAcF,GAAYG,yBAAyBC,gBAS9DJ,gCAAA,WAEE,OADA3jD,EAAO9D,KAAK0nD,UAAW,oCAChB1nD,KAAK8nD,kBAQdL,+BAAA,WAEE,OADA3jD,EAAO9D,KAAK0nD,UAAW,oCACnB1nD,KAAK+nD,cACA/nD,KAAKgoD,gBAEL32C,IAOXo2C,oBAAA,WACE,OAAOznD,KAAKioD,SAOdR,8BAAA,WAEE,OADA3jD,EAAO9D,KAAKioD,QAAS,kCACdjoD,KAAKkoD,gBAQdT,6BAAA,WAEE,OADA3jD,EAAO9D,KAAKioD,QAAS,kCACjBjoD,KAAKmoD,YACAnoD,KAAKooD,cAEL92C,IAOXm2C,sBAAA,WACE,OAAOznD,KAAKqoD,WAMdZ,8BAAA,WACE,OAAOznD,KAAKqoD,WAAgC,KAAnBroD,KAAK2nD,WAOhCF,sBAAA,WAEE,OADA3jD,EAAO9D,KAAKqoD,UAAW,oCAChBroD,KAAKsmD,QAMdmB,sBAAA,WACE,OAAOznD,KAAK6oB,QAON4+B,mBAAR,WACE,IAAMvnC,EAAO,IAAIunC,GAajB,OAZAvnC,EAAKmoC,UAAYroD,KAAKqoD,UACtBnoC,EAAKomC,OAAStmD,KAAKsmD,OACnBpmC,EAAKwnC,UAAY1nD,KAAK0nD,UACtBxnC,EAAK4nC,iBAAmB9nD,KAAK8nD,iBAC7B5nC,EAAK6nC,cAAgB/nD,KAAK+nD,cAC1B7nC,EAAK8nC,gBAAkBhoD,KAAKgoD,gBAC5B9nC,EAAK+nC,QAAUjoD,KAAKioD,QACpB/nC,EAAKgoC,eAAiBloD,KAAKkoD,eAC3BhoC,EAAKioC,YAAcnoD,KAAKmoD,YACxBjoC,EAAKkoC,cAAgBpoD,KAAKooD,cAC1BloC,EAAK2I,OAAS7oB,KAAK6oB,OACnB3I,EAAKynC,UAAY3nD,KAAK2nD,UACfznC,GAOTunC,mBAAA,SAAMa,GACJ,IAAM56B,EAAY1tB,KAAKuoD,QAIvB,OAHA76B,EAAU26B,WAAY,EACtB36B,EAAU44B,OAASgC,EACnB56B,EAAUi6B,UAAY,GACfj6B,GAOT+5B,0BAAA,SAAaa,GACX,IAAM56B,EAAY1tB,KAAKuoD,QAIvB,OAHA76B,EAAU26B,WAAY,EACtB36B,EAAU44B,OAASgC,EACnB56B,EAAUi6B,UAAYF,GAAYG,yBAAyBC,eACpDn6B,GAOT+5B,yBAAA,SAAYa,GACV,IAAM56B,EAAY1tB,KAAKuoD,QAIvB,OAHA76B,EAAU26B,WAAY,EACtB36B,EAAU44B,OAASgC,EACnB56B,EAAUi6B,UAAYF,GAAYG,yBAAyBY,gBACpD96B,GAQT+5B,qBAAA,SAAQjrC,EAAiBvT,GACvB,IAAMykB,EAAY1tB,KAAKuoD,QAavB,OAZA76B,EAAUg6B,WAAY,OACHvgD,IAAfqV,IACFA,EAAa,MAEfkR,EAAUo6B,iBAAmBtrC,EAClB,MAAPvT,GACFykB,EAAUq6B,eAAgB,EAC1Br6B,EAAUs6B,gBAAkB/+C,IAE5BykB,EAAUq6B,eAAgB,EAC1Br6B,EAAUs6B,gBAAkB,IAEvBt6B,GAQT+5B,mBAAA,SAAMjrC,EAAiBvT,GACrB,IAAMykB,EAAY1tB,KAAKuoD,QAavB,OAZA76B,EAAUu6B,SAAU,OACD9gD,IAAfqV,IACFA,EAAa,MAEfkR,EAAUw6B,eAAiB1rC,OACfrV,IAAR8B,GACFykB,EAAUy6B,aAAc,EACxBz6B,EAAU06B,cAAgBn/C,IAE1BykB,EAAUy6B,aAAc,EACxBz6B,EAAU06B,cAAgB,IAErB16B,GAOT+5B,qBAAA,SAAQ3pC,GACN,IAAM4P,EAAY1tB,KAAKuoD,QAEvB,OADA76B,EAAU7E,OAAS/K,EACZ4P,GAMT+5B,4BAAA,WACE,IAAMgB,EAA0BhB,GAAYG,yBACtCr9C,EAA4B,GAalC,GAZIvK,KAAK0nD,YACPn9C,EAAIk+C,EAAwBC,mBAAqB1oD,KAAK8nD,iBAClD9nD,KAAK+nD,gBACPx9C,EAAIk+C,EAAwBE,kBAAoB3oD,KAAKgoD,kBAGrDhoD,KAAKioD,UACP19C,EAAIk+C,EAAwBG,iBAAmB5oD,KAAKkoD,eAChDloD,KAAKmoD,cACP59C,EAAIk+C,EAAwBI,gBAAkB7oD,KAAKooD,gBAGnDpoD,KAAKqoD,UAAW,CAClB99C,EAAIk+C,EAAwBK,OAAS9oD,KAAKsmD,OAC1C,IAAIyC,EAAW/oD,KAAK2nD,UACH,KAAboB,IAEAA,EADE/oD,KAAKwnD,iBACIiB,EAAwBZ,eAExBY,EAAwBD,iBAGvCj+C,EAAIk+C,EAAwBO,WAAaD,EAM3C,OAHI/oD,KAAK6oB,SAAW/J,KAClBvU,EAAIk+C,EAAwBQ,OAASjpD,KAAK6oB,OAAO3f,YAE5CqB,GAMTk9C,0BAAA,WACE,QAASznD,KAAK0nD,WAAa1nD,KAAKioD,SAAWjoD,KAAKqoD,YAMlDZ,uBAAA,WACE,OAAOznD,KAAKi8B,gBAAkBj8B,KAAK6oB,QAAU/J,IAM/C2oC,2BAAA,WACE,OAAIznD,KAAKi8B,eACA,IAAIrI,GAAc5zB,KAAK6pB,YACrB7pB,KAAK8rB,WACP,IAAIs6B,GAAcpmD,MAElB,IAAIwlD,GAAaxlD,OAS5BynD,yCAAA,WACE,IAOI95B,EAPEu7B,EAAiBzB,GAAY0B,sBAC7BC,EAAuC,GAE7C,OAAIppD,KAAKqmC,cAMP1Y,EADE3tB,KAAK6oB,SAAW/J,GACRoqC,EAAepqC,eAChB9e,KAAK6oB,SAAWhB,GACfqhC,EAAerhC,YAChB7nB,KAAK6oB,SAAWnM,GACfwsC,EAAexsC,WAEzB5Y,EAAO9D,KAAK6oB,kBAAkBb,GAAW,4BAC/BhoB,KAAK6oB,OAAO3f,YAExBkgD,EAAGF,EAAeG,UAAYv/C,EAAU6jB,GAEpC3tB,KAAK0nD,YACP0B,EAAGF,EAAeI,UAAYx/C,EAAU9J,KAAK8nD,kBACzC9nD,KAAK+nD,gBACPqB,EAAGF,EAAeI,WAAa,IAAMx/C,EAAU9J,KAAKgoD,mBAIpDhoD,KAAKioD,UACPmB,EAAGF,EAAeK,QAAUz/C,EAAU9J,KAAKkoD,gBACvCloD,KAAKmoD,cACPiB,EAAGF,EAAeK,SAAW,IAAMz/C,EAAU9J,KAAKooD,iBAIlDpoD,KAAKqoD,YACHroD,KAAKwnD,iBACP4B,EAAGF,EAAeM,gBAAkBxpD,KAAKsmD,OAEzC8C,EAAGF,EAAeO,eAAiBzpD,KAAKsmD,SAlCnC8C,GAxUa3B,4BAA2B,CACjDiB,kBAAmB,KACnBC,iBAAkB,KAClBC,gBAAiB,KACjBC,eAAgB,KAChBC,MAAO,IACPE,UAAW,KACXnB,eAAgB,IAChBW,gBAAiB,IACjBS,MAAO,KASexB,yBAAwB,CAC9C4B,SAAU,UACVvqC,eAAgB,YAChB+I,YAAa,SACbnL,UAAW,OACX4sC,SAAU,UACVC,OAAQ,QACRC,eAAgB,eAChBC,cAAe,eAQDhC,WAAU,IAAIA,OAxDhC,cACUznD,gBAAY,EACZA,gBAAY,EACZA,oBAAgB,EAChBA,cAAU,EACVA,kBAAc,EAEdA,YAAS,EACTA,eAAY,GACZA,sBAA+B,KAC/BA,qBAAkB,GAClBA,oBAA6B,KAC7BA,mBAAgB,GAEhBA,YAAS8e,cCNY5W,QAAAijB,IA2B7Bu+B,oBAAA,WAGE,OAFAv9C,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,QAE9CX,KAAK4V,KAAKnL,UAAkB,KACpBzK,KAAK4V,KAAK4C,WAOxBkxC,mBAAA,SAAM91C,GAUJ,OATAzH,EAAiB,kBAAmB,EAAG,EAAGzL,UAAUC,QAC1B,iBAAfiT,EACTA,EAAa1N,OAAO0N,GACTA,aAAsBJ,KACJ,OAAzBxT,KAAK4V,KAAKvB,WnE+SkB,SACpCjI,EACAM,EACAkH,EACAjH,GAIEiH,EAFEA,GAEWA,EAAW7K,QAAQ,mBAAoB,KAGtDiQ,GAAmB5M,EAAQM,EAAgBkH,EAAYjH,GmEzTjDg9C,CAAuB,kBAAmB,EAAG/1C,GAAY,GACtDoF,GAAmB,kBAAmB,EAAGpF,GAAY,IAGrD,IAAI81C,GAAU1pD,KAAKksB,KAAMlsB,KAAK4V,KAAKT,MAAMvB,KAIlD81C,uBAAA,WACEv9C,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QAErD,IAAMipD,EAAa5pD,KAAK4V,KAAKyjB,SAC7B,OAAsB,OAAfuwB,EAAsB,KAAO,IAAIF,GAAU1pD,KAAKksB,KAAM09B,IAI/DF,qBAAA,WACEv9C,EAAiB,iBAAkB,EAAG,EAAGzL,UAAUC,QAGnD,IADA,IAAIuoB,EAAMlpB,KACiB,OAApBkpB,EAAIC,aACTD,EAAMA,EAAIC,YAEZ,OAAOD,GAITwgC,0BAAA,WACE,OAAO1pD,KAAKksB,KAAK29B,UAQnBH,iBAAA,SAAI/G,EAAanoC,GACfrO,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,QAClDsY,GAAqB,gBAAiBjZ,KAAK4V,MAC3CsC,GAAwB,gBAAiB,EAAGyqC,EAAQ3iD,KAAK4V,MAAM,GAC/D/I,EAAiB,gBAAiB,EAAG2N,GAAY,GAEjD,IAAMC,EAAW,IAAIpT,EAOrB,OANArH,KAAKksB,KAAK49B,gBACR9pD,KAAK4V,KACL+sC,EACc,KACdloC,EAASG,aAAaJ,IAEjBC,EAAS/S,SAQlBgiD,oBAAA,SACE3uC,EACAP,GAKA,GAHArO,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QACrDsY,GAAqB,mBAAoBjZ,KAAK4V,MAE1CjW,MAAMoF,QAAQgW,GAAgB,CAEhC,IADA,IAAMC,EAAyC,GACtCxa,EAAI,EAAGA,EAAIua,EAAcpa,SAAUH,EAC1Cwa,EAAiB,GAAKxa,GAAKua,EAAcva,GAE3Cua,EAAgBC,EAChBtR,GACE,wMAMJ2O,GACE,mBACA,EACA0C,EACA/a,KAAK4V,MACL,GAEF/I,EAAiB,mBAAoB,EAAG2N,GAAY,GACpD,IAAMC,EAAW,IAAIpT,EAMrB,OALArH,KAAKksB,KAAKngB,OACR/L,KAAK4V,KACLmF,EACAN,EAASG,aAAaJ,IAEjBC,EAAS/S,SASlBgiD,6BAAA,SACE/G,EACA19B,EACAzK,GAcA,GAZArO,EAAiB,4BAA6B,EAAG,EAAGzL,UAAUC,QAC9DsY,GAAqB,4BAA6BjZ,KAAK4V,MACvDsC,GACE,4BACA,EACAyqC,EACA3iD,KAAK4V,MACL,GAEFgD,GAAiB,4BAA6B,EAAGqM,GAAa,GAC9DpY,EAAiB,4BAA6B,EAAG2N,GAAY,GAEvC,YAAlBxa,KAAK8oB,UAA4C,UAAlB9oB,KAAK8oB,SACtC,KAAM,qCACJ9oB,KAAK8oB,SACL,0BAEJ,IAAMrO,EAAW,IAAIpT,EAOrB,OANArH,KAAKksB,KAAK49B,gBACR9pD,KAAK4V,KACL+sC,EACA19B,EACAxK,EAASG,aAAaJ,IAEjBC,EAAS/S,SAOlBgiD,oBAAA,SAAOlvC,GAKL,OAJArO,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QACrDsY,GAAqB,mBAAoBjZ,KAAK4V,MAC9C/I,EAAiB,mBAAoB,EAAG2N,GAAY,GAE7Cxa,KAAK8P,IAAI,KAAM0K,IASxBkvC,yBAAA,SACEK,EACAvvC,EACAwvC,GAUA,GARA79C,EAAiB,wBAAyB,EAAG,EAAGzL,UAAUC,QAC1DsY,GAAqB,wBAAyBjZ,KAAK4V,MACnD/I,EAAiB,wBAAyB,EAAGk9C,GAAmB,GAChEl9C,EAAiB,wBAAyB,EAAG2N,GAAY,GnEwM9B,SAC7BpO,EACAM,EACAu9C,EACAt9C,GAEA,KAAIA,QAAqBxF,IAAT8iD,IACI,kBAATA,EACT,MAAM,IAAI/lD,MACRkU,EAAehM,EAAQM,EAAgBC,GAAY,sBmE9MrDu9C,CAAgB,wBAAyB,EAAGF,GAAc,GAEpC,YAAlBhqD,KAAK8oB,UAA4C,UAAlB9oB,KAAK8oB,SACtC,KAAM,iCACJ9oB,KAAK8oB,SACL,+BAEiB3hB,IAAjB6iD,IAA4BA,GAAe,GAE/C,IAAMvvC,EAAW,IAAIpT,EA0BrB,MAzB0B,mBAAfmT,GACTC,EAAS/S,QAAQC,MAAM,cAiBzB3H,KAAKksB,KAAKi+B,iBACRnqD,KAAK4V,KACLm0C,EAhBsB,SACtBjnD,EACAqY,EACAC,GAEItY,EACF2X,EAASjT,OAAO1E,GAEhB2X,EAAShT,QAAQ,IAAIyT,GAAkBC,EAAWC,IAE1B,mBAAfZ,GACTA,EAAW1X,EAAOqY,EAAWC,IAO/B4uC,GAGKvvC,EAAS/S,SAQlBgiD,yBAAA,SACEzxC,EACAuC,GAEArO,EAAiB,wBAAyB,EAAG,EAAGzL,UAAUC,QAC1DsY,GAAqB,wBAAyBjZ,KAAK4V,MACnDgD,GAAiB,wBAAyB,EAAGX,GAAU,GACvDpL,EAAiB,wBAAyB,EAAG2N,GAAY,GAEzD,IAAMC,EAAW,IAAIpT,EAOrB,OANArH,KAAKksB,KAAK49B,gBACR9pD,KAAK4V,KAAKT,MAAM,aAChB8C,EACA,KACAwC,EAASG,aAAaJ,IAEjBC,EAAS/S,SAQlBgiD,kBAAA,SAAKvnD,EAAaqY,GAChBrO,EAAiB,iBAAkB,EAAG,EAAGzL,UAAUC,QACnDsY,GAAqB,iBAAkBjZ,KAAK4V,MAC5CsC,GAAwB,iBAAkB,EAAG/V,EAAOnC,KAAK4V,MAAM,GAC/D/I,EAAiB,iBAAkB,EAAG2N,GAAY,GAElD,IAWI9S,EAXE6F,EAAMvN,KAAKksB,KAAKo1B,aAChB1zC,EAAO6N,GAAWlO,GAOlB68C,EAAmBpqD,KAAKmV,MAAMvH,GAC9By8C,EAAUrqD,KAAKmV,MAAMvH,GAgB3B,OAZElG,EADW,MAATvF,EACQioD,EAAiBt6C,IAAI3N,EAAOqY,GAAYutB,KAAK,WAAM,OAAAsiB,IAEnDziD,QAAQH,QAAQ4iD,GAG5BD,EAAiBriB,KAAOrgC,EAAQqgC,KAAKn4B,KAAKlI,GAC1C0iD,EAAiBziD,MAAQD,EAAQqgC,KAAKn4B,KAAKlI,OAASP,GAE1B,mBAAfqT,GACT9S,EAAQC,MAAM,cAGTyiD,GAMTV,0BAAA,WAEE,OADAzwC,GAAqB,yBAA0BjZ,KAAK4V,MAC7C,IAAI2E,GAAava,KAAKksB,KAAMlsB,KAAK4V,OAG1CpW,sBAAIkqD,6BAAJ,WACE,OAAO1pD,KAAKsqD,gDAGd9qD,sBAAIkqD,wBAAJ,WACE,OAAO1pD,KAAK8oB,0CAGdtpB,sBAAIkqD,2BAAJ,WACE,OAAO1pD,KAAKmpB,6CAGd3pB,sBAAIkqD,yBAAJ,WACE,OAAO1pD,KAAKuqD,+CAxTd,YAAYr+B,EAAYtW,GACtB,KAAMsW,aAAgBi1B,IACpB,MAAM,IAAIj9C,MACR,oEAKJkE,aAAM8jB,EAAMtW,EAAM6xC,GAAY+C,SAAS,SA0T3Cr/B,GAAMZ,uBAAyBm/B,GAC/BlsB,GAAUjT,uBAAyBm/B,GCrWnC,ICgBYe,GAAAA,MDhBZ,WAGEzqD,cAA4C,GAC5CA,gBAAa,EACbA,WAAkB,UA2BlB0qD,qBAAA,SAAQC,GAKN,IAHA,IAEElpD,EAFEmU,EAAO+0C,aAAmBn3C,GAAOm3C,EAAU,IAAIn3C,GAAKm3C,GACpDx1C,EAAQnV,KAEwB,QAA5ByB,EAAOmU,EAAKvB,aAElBc,EAAQ,IAAIu1C,GAAKjpD,EAAM0T,EADL3K,EAAQ2K,EAAMoT,MAAMkG,SAAUhtB,IAAS,IAAImpD,IAE7Dh1C,EAAOA,EAAKpB,WAGd,OAAOW,GAQTu1C,sBAAA,WACE,OAAO1qD,KAAKuoB,MAAMpmB,OAQpBuoD,sBAAA,SAASvoD,GACP2B,OAAwB,IAAV3B,EAAuB,iCACrCnC,KAAKuoB,MAAMpmB,MAAQA,EACnBnC,KAAK6qD,kBAMPH,mBAAA,WACE1qD,KAAKuoB,MAAMpmB,MAAQ,KACnBnC,KAAKuoB,MAAMkG,SAAW,GACtBzuB,KAAKuoB,MAAMuiC,WAAa,EACxB9qD,KAAK6qD,kBAMPH,yBAAA,WACE,OAA+B,EAAxB1qD,KAAKuoB,MAAMuiC,YAMpBJ,qBAAA,WACE,OAA2B,OAApB1qD,KAAKke,aAAwBle,KAAK+qD,eAQ3CL,0BAAA,SAAa3sC,GAAb,WACElM,GAAK7R,KAAKuoB,MAAMkG,SAAU,SAACtZ,EAAe0N,GACxC9E,EAAO,IAAI2sC,GAAQv1C,EAAO5N,EAAMsb,OAapC6nC,+BAAA,SACE3sC,EACAitC,EACAC,GAEID,IAAgBC,GAAeltC,EAAO/d,MAE1CA,KAAKwlB,aAAa,SAASrQ,GACzBA,EAAM+1C,kBAAkBntC,GAAyB,EAAMktC,KAGrDD,GAAeC,GAAeltC,EAAO/d,OAW3C0qD,6BAAA,SACE3sC,EACAitC,GAGA,IADA,IAAIlvC,EAAOkvC,EAAchrD,KAAOA,KAAKq5B,SACrB,OAATvd,GAAe,CACpB,GAAIiC,EAAOjC,GACT,OAAO,EAETA,EAAOA,EAAKud,SAEd,OAAO,GAUTqxB,iDAAA,SAAoC3sC,GAClC/d,KAAKwlB,aAAa,SAASrQ,GACA,OAArBA,EAAM+I,WAAqBH,EAAO5I,GACjCA,EAAMg2C,oCAAoCptC,MAOnD2sC,kBAAA,WACE,OAAO,IAAIl3C,GACQ,OAAjBxT,KAAKorD,QACDprD,KAAKqrD,MACLrrD,KAAKorD,QAAQx1C,OAAS,IAAM5V,KAAKqrD,QAOzCX,kBAAA,WACE,OAAO1qD,KAAKqrD,OAMdX,oBAAA,WACE,OAAO1qD,KAAKorD,SAQNV,4BAAR,WACuB,OAAjB1qD,KAAKorD,SAAkBprD,KAAKorD,QAAQE,aAAatrD,KAAKqrD,MAAOrrD,OAU3D0qD,0BAAR,SAAqBptC,EAAmBnI,GACtC,IAAMo2C,EAAap2C,EAAM1K,UACnB+gD,EAAclhD,EAAStK,KAAKuoB,MAAMkG,SAAUnR,GAC9CiuC,GAAcC,UACTxrD,KAAKuoB,MAAMkG,SAASnR,GAC3Btd,KAAKuoB,MAAMuiC,aACX9qD,KAAK6qD,kBACKU,GAAeC,IACzBxrD,KAAKuoB,MAAMkG,SAASnR,GAAanI,EAAMoT,MACvCvoB,KAAKuoB,MAAMuiC,aACX9qD,KAAK6qD,uBA/LT,YACUQ,EACAD,EACA7iC,gBAFA8iC,mBACAD,qBACA7iC,MAAyBqiC,IAFzB5qD,WAAAqrD,EACArrD,aAAAorD,EACAprD,WAAAuoB,GCPAkiC,GAAAA,GAAAA,wBAQVA,qBAIAA,+BAIAA,6CAGAA,mCAUDtJ,GAAasK,yBAA2B,GAuCxCtK,GAAKjhD,UAAkBmlD,mBAAqB,WAO3CrlD,KAAK0rD,sBAAwB,IAAIhB,IAsBnCvJ,GAAKjhD,UAAUiqD,iBAAmB,SAChCv0C,EACAm0C,EACAvvC,EACAwvC,GAEAhqD,KAAK4sC,KAAK,kBAAoBh3B,GAGR,SAAhB+1C,KAAN,IACMC,EAAW,IAAIlC,GAAU1pD,KAAM4V,GACrCg2C,EAASz+B,GAAG,QAASw+B,GACrB,IAKME,EAA2B,CAC/Bj2C,OACA7J,OAAQg+C,EACRvvC,aAGAksB,OAAQ,KAGRolB,MAAO16C,KAGP44C,aAAcA,EAGd+B,WAAY,EAGZC,UAvBgB,WAChBJ,EAAS1+B,IAAI,QAASy+B,IAyBtBM,YAAa,KAEbC,eAAgB,KAEhBC,qBAAsB,KAEtBC,yBAA0B,KAE1BC,8BAA+B,MAI3BC,EAAetsD,KAAKusD,gBAAgB32C,GAC1Ci2C,EAAYM,qBAAuBG,EACnC,IAAM3J,EAASkJ,EAAY9/C,OAAOugD,EAAal+C,OAC/C,QAAejH,IAAXw7C,GAKF,GAHAkJ,EAAYG,YACZH,EAAYO,yBAA2B,KACvCP,EAAYQ,8BAAgC,KACxCR,EAAYrxC,WAAY,CAE1B,IAAMY,EAAW,IAAIkN,GACnBujC,EAAYM,qBACZ,IAAIzC,GAAU1pD,KAAM6rD,EAAYj2C,MAChCkJ,IAEF+sC,EAAYrxC,WAAW,MAAM,EAAOY,QAEjC,CACLjD,GACE,qCACAwqC,EACAkJ,EAAYj2C,MAIdi2C,EAAYnlB,OAAS+jB,GAAkB+B,IACvC,IAAMC,EAAYzsD,KAAK0rD,sBAAsBgB,QAAQ92C,GAC/C+2C,EAAYF,EAAUvuC,YAAc,GAC1CyuC,EAAUtqD,KAAKwpD,GAEfY,EAAUG,SAASD,GAKnB,IAAIE,SACJ,GACoB,iBAAXlK,GACI,OAAXA,GACAr4C,EAASq4C,EAAQ,aAEjBkK,EAAkBriD,EAAQm4C,EAAQ,aAClC7+C,EACEkU,GAAgB60C,GAChB,yHAOFA,GAFE7sD,KAAK4hD,gBAAgB1pB,uBAAuBtiB,IAC5C+O,GAAapH,YACeR,cAAc3O,MAE9Cy+C,EAAoDA,EAEpD,IAAMn9B,EAAe1vB,KAAK4iD,uBACpBC,EAAoB5lC,GAAa0lC,EAAQkK,GACzC1wC,EAAUyT,GACdizB,EACAnzB,GAEFm8B,EAAYO,yBAA2BvJ,EACvCgJ,EAAYQ,8BAAgClwC,EAC5C0vC,EAAYK,eAAiBlsD,KAAK8iD,kBAElC,IAAMjoB,EAAS76B,KAAK4hD,gBAAgBmB,mBAClCntC,EACAuG,EACA0vC,EAAYK,eACZL,EAAY7B,cAEdhqD,KAAKmiD,YAAYC,0BAA0BxsC,EAAMilB,GAEjD76B,KAAK8sD,2BAUR3L,GAAKjhD,UAAkBqsD,gBAAkB,SACxC32C,EACAm3C,GAEA,OACE/sD,KAAK4hD,gBAAgB1pB,uBAAuBtiB,EAAMm3C,IAClDpoC,GAAapH,YAchB4jC,GAAKjhD,UAAkB4sD,uBAAyB,SAC/ChxC,GAD+C,WAQ/C,gBAPAA,EAA4B9b,KAAK0rD,uBAG5B5vC,GACH9b,KAAKgtD,qCAAqClxC,GAGpB,OAApBA,EAAKoC,WAAqB,CAC5B,IAAM+uC,EAAQjtD,KAAKktD,uBAAuBpxC,GAC1ChY,EAAsB,EAAfmpD,EAAMtsD,OAAY,yCAEVssD,EAAMjiC,MACnB,SAAC6gC,GAA6B,OAAAA,EAAYnlB,SAAW+jB,GAAkB+B,OAKvExsD,KAAKmtD,sBAAsBrxC,EAAKlG,OAAQq3C,QAEjCnxC,EAAKivC,eACdjvC,EAAK0J,aAAa,SAAAhI,GAChBjW,EAAKulD,uBAAuBtvC,MAYjC2jC,GAAKjhD,UAAkBitD,sBAAwB,SAC9Cv3C,EACAq3C,GASA,IAX8C,WAKxCG,EAAeH,EAAMviD,IAAI,SAAS2iD,GACtC,OAAOA,EAAInB,iBAEPoB,EAActtD,KAAKusD,gBAAgB32C,EAAMw3C,GAC3CG,EAAaD,EACXE,EAAaF,EAAY1nC,OACtBplB,EAAI,EAAGA,EAAIysD,EAAMtsD,OAAQH,IAAK,CACrC,IAAM6sD,EAAMJ,EAAMzsD,GAClBsD,EACEupD,EAAI3mB,SAAW+jB,GAAkB+B,IACjC,iEAEFa,EAAI3mB,OAAS+jB,GAAkBgD,KAC/BJ,EAAItB,aACJ,IAAMx3C,EAAef,GAAKe,aAAaqB,EAAMy3C,EAAIz3C,MAEjD23C,EAAaA,EAAW1vC,YACtBtJ,EACA84C,EAAIjB,0BAIR,IAAMsB,EAAaH,EAAWn/C,KAAI,GAC5Bu/C,EAAa/3C,EAGnB5V,KAAKspC,QAAQ6V,IACXwO,EAAWzkD,WACXwkD,EACA,SAAChnB,GACCn/B,EAAKqlC,KAAK,2BAA4B,CACpCh3B,KAAM+3C,EAAWzkD,WACjBw9B,WAGF,IAAI7L,EAAkB,GACtB,GAAe,OAAX6L,EAAiB,CAInB,IADA,IAAMla,EAAY,GACThsB,EAAI,EAAGA,EAAIysD,EAAMtsD,OAAQH,IAAK,CAKrC,GAJAysD,EAAMzsD,GAAGkmC,OAAS+jB,GAAkBmD,UACpC/yB,EAASA,EAAO73B,OACduE,EAAKq6C,gBAAgB/qB,aAAao2B,EAAMzsD,GAAG0rD,iBAEzCe,EAAMzsD,GAAGga,WAAY,CAEvB,IAAMsB,EAAOmxC,EAAMzsD,GAAG6rD,8BAChBnjC,EAAM,IAAIwgC,GAAUniD,EAAM0lD,EAAMzsD,GAAGoV,MACnCwF,EAAW,IAAIkN,GAAaxM,EAAMoN,EAAKpK,IAC7C0N,EAAUnqB,KACR4qD,EAAMzsD,GAAGga,WAAW5K,KAAK,KAAM,MAAM,EAAMwL,IAG/C6xC,EAAMzsD,GAAGwrD,YAIXzkD,EAAKylD,qCACHzlD,EAAKmkD,sBAAsBgB,QAAQ92C,IAGrCrO,EAAKulD,yBAELvlD,EAAK46C,YAAYC,0BAA0BxsC,EAAMilB,GAGjD,IAASr6B,EAAI,EAAGA,EAAIgsB,EAAU7rB,OAAQH,IACpCuS,GAAeyZ,EAAUhsB,QAEtB,CAEL,GAAe,cAAXkmC,EACF,IAASlmC,EAAI,EAAGA,EAAIysD,EAAMtsD,OAAQH,IAC5BysD,EAAMzsD,GAAGkmC,SAAW+jB,GAAkBoD,iBACxCZ,EAAMzsD,GAAGkmC,OAAS+jB,GAAkBqD,YACjCb,EAAMzsD,GAAGkmC,OAAS+jB,GAAkB+B,QAEtC,CACL9iD,GACE,kBAAoBikD,EAAWzkD,WAAa,YAAcw9B,GAE5D,IAASlmC,EAAI,EAAGA,EAAIysD,EAAMtsD,OAAQH,IAChCysD,EAAMzsD,GAAGkmC,OAAS+jB,GAAkBqD,YACpCb,EAAMzsD,GAAGyrD,YAAcvlB,EAI3Bn/B,EAAK26C,mBAAmBtsC,KAG5B43C,IAgBHrM,GAAKjhD,UAAkBgiD,mBAAqB,SAAS/X,GACpD,IAAM4jB,EAA0B/tD,KAAKguD,4BAA4B7jB,GAC3Dv0B,EAAOm4C,EAAwBn4C,OAE/Bq3C,EAAQjtD,KAAKktD,uBAAuBa,GAG1C,OAFA/tD,KAAKiuD,uBAAuBhB,EAAOr3C,GAE5BA,GAURurC,GAAKjhD,UAAkB+tD,uBAAyB,SAC/ChB,EACAr3C,GAEA,GAAqB,IAAjBq3C,EAAMtsD,OAAV,CAeA,IATA,IAgGcqrD,EAhGRx/B,EAAY,GACdqO,EAAkB,GAKhBuyB,EAHcH,EAAM7xB,OAAO,SAASgkB,GACxC,OAAOA,EAAE1Y,SAAW+jB,GAAkB+B,MAEP9hD,IAAI,SAAS00C,GAC5C,OAAOA,EAAE8M,iBAEF1rD,EAAI,EAAGA,EAAIysD,EAAMtsD,OAAQH,IAAK,CACrC,IAAMqrD,EAAcoB,EAAMzsD,GACpB+T,EAAef,GAAKe,aAAaqB,EAAMi2C,EAAYj2C,MACrDs4C,GAAmB,EACrBjC,SAMF,GALAnoD,EACmB,OAAjByQ,EACA,iEAGEs3C,EAAYnlB,SAAW+jB,GAAkBqD,YAC3CI,GAAmB,EACnBjC,EAAcJ,EAAYI,YAC1BpxB,EAASA,EAAO73B,OACdhD,KAAK4hD,gBAAgB/qB,aAAag1B,EAAYK,gBAAgB,SAE3D,GAAIL,EAAYnlB,SAAW+jB,GAAkB+B,IAClD,GAAIX,EAAYE,YAAe5K,GAAasK,yBAC1CyC,GAAmB,EACnBjC,EAAc,WACdpxB,EAASA,EAAO73B,OACdhD,KAAK4hD,gBAAgB/qB,aAAag1B,EAAYK,gBAAgB,QAE3D,CAEL,IAAMiC,EAAcnuD,KAAKusD,gBACvBV,EAAYj2C,KACZw3C,GAEFvB,EAAYM,qBAAuBgC,EACnC,IAAM9rB,EAAU4qB,EAAMzsD,GAAGuL,OAAOoiD,EAAY//C,OAC5C,QAAgBjH,IAAZk7B,EAAuB,CACzBlqB,GACE,qCACAkqB,EACAwpB,EAAYj2C,MAEd,IAAIw4C,EAAcnxC,GAAaolB,GAEV,iBAAZA,GACI,MAAXA,GACA/3B,EAAS+3B,EAAS,eAGlB+rB,EAAcA,EAAY1wC,eAAeywC,EAAYpxC,gBAGvD,IAAMsxC,EAAaxC,EAAYK,eACzBx8B,EAAe1vB,KAAK4iD,uBACpB0L,EAAkB1+B,GACtBw+B,EACA1+B,GAGFm8B,EAAYO,yBAA2BgC,EACvCvC,EAAYQ,8BAAgCiC,EAC5CzC,EAAYK,eAAiBlsD,KAAK8iD,kBAElCsK,EAAajtB,OAAOitB,EAAal2C,QAAQm3C,GAAa,GAStDxzB,GARAA,EAASA,EAAO73B,OACdhD,KAAK4hD,gBAAgBmB,mBACnB8I,EAAYj2C,KACZ04C,EACAzC,EAAYK,eACZL,EAAY7B,gBAGAhnD,OACdhD,KAAK4hD,gBAAgB/qB,aAAaw3B,GAAY,SAGhDH,GAAmB,EACnBjC,EAAc,SACdpxB,EAASA,EAAO73B,OACdhD,KAAK4hD,gBAAgB/qB,aAAag1B,EAAYK,gBAAgB,IAOtE,GAFAlsD,KAAKmiD,YAAYC,0BAA0BxsC,EAAMilB,GACjDA,EAAS,GACLqzB,IAEFjB,EAAMzsD,GAAGkmC,OAAS+jB,GAAkBmD,UAI1B5B,EAEPiB,EAAMzsD,GAAGwrD,UADVh5C,WAAWg5C,EAAW95C,KAAKI,MAAM,IAG/B26C,EAAMzsD,GAAGga,YACX,GAAoB,WAAhByxC,EAA0B,CAC5B,IAAM/iC,EAAM,IAAIwgC,GAAU1pD,KAAMitD,EAAMzsD,GAAGoV,MAEnC24C,EAAiCtB,EAAMzsD,GAAG2rD,qBAC1C/wC,EAAW,IAAIkN,GAAaimC,EAAWrlC,EAAKpK,IAClD0N,EAAUnqB,KAAK4qD,EAAMzsD,GAAGga,WAAW5K,KAAK,KAAM,MAAM,EAAOwL,SAE3DoR,EAAUnqB,KACR4qD,EAAMzsD,GAAGga,WAAW5K,KAAK,KAAM,IAAI1L,MAAM+nD,IAAc,EAAO,OAQxEjsD,KAAKgtD,qCAAqChtD,KAAK0rD,uBAG/C,IAASlrD,EAAI,EAAGA,EAAIgsB,EAAU7rB,OAAQH,IACpCuS,GAAeyZ,EAAUhsB,IAI3BR,KAAK8sD,2BAWN3L,GAAKjhD,UAAkB8tD,4BAA8B,SACpDp4C,GAMA,IAJA,IAAIgI,EAGA4wC,EAAkBxuD,KAAK0rD,sBAEK,QAA7B9tC,EAAQhI,EAAKvB,aACiB,OAA/Bm6C,EAAgBtwC,YAEhBswC,EAAkBA,EAAgB9B,QAAQ9uC,GAC1ChI,EAAOA,EAAKpB,WAGd,OAAOg6C,GAURrN,GAAKjhD,UAAkBgtD,uBAAyB,SAC/CsB,GAGA,IAAMC,EAAkC,GAQxC,OAPAzuD,KAAK0uD,mCAAmCF,EAAiBC,GAGzDA,EAAiB78C,KAAK,SAASrG,EAAGhM,GAChC,OAAOgM,EAAEugD,MAAQvsD,EAAEusD,QAGd2C,GAQRtN,GAAKjhD,UAAkBwuD,mCAAqC,SAC3D5yC,EACAmxC,GAF2D,WAIrDN,EAAY7wC,EAAKoC,WACvB,GAAkB,OAAdyuC,EACF,IAAK,IAAInsD,EAAI,EAAGA,EAAImsD,EAAUhsD,OAAQH,IACpCysD,EAAM5qD,KAAKsqD,EAAUnsD,IAIzBsb,EAAK0J,aAAa,SAAArQ,GAChB5N,EAAKmnD,mCAAmCv5C,EAAO83C,MAUlD9L,GAAKjhD,UAAkB8sD,qCAAuC,SAC7DlxC,GAD6D,WAGvDmxC,EAAQnxC,EAAKoC,WACnB,GAAI+uC,EAAO,CAET,IADA,IAAI0B,EAAK,EACAh6B,EAAO,EAAGA,EAAOs4B,EAAMtsD,OAAQg0B,IAClCs4B,EAAMt4B,GAAM+R,SAAW+jB,GAAkBmD,YAC3CX,EAAM0B,GAAM1B,EAAMt4B,GAClBg6B,KAGJ1B,EAAMtsD,OAASguD,EACf7yC,EAAK8wC,SAAwB,EAAfK,EAAMtsD,OAAassD,EAAQ,MAG3CnxC,EAAK0J,aAAa,SAAAhI,GAChBjW,EAAKylD,qCAAqCxvC,MAY7C2jC,GAAKjhD,UAAkBijD,mBAAqB,SAASvtC,GAAT,WACrCie,EAAe7zB,KAAKguD,4BAA4Bp4C,GAAMA,OAEtD44C,EAAkBxuD,KAAK0rD,sBAAsBgB,QAAQ92C,GAY3D,OAVA44C,EAAgBI,gBAAgB,SAAC9yC,GAC/BvU,EAAKsnD,yBAAyB/yC,KAGhC9b,KAAK6uD,yBAAyBL,GAE9BA,EAAgBtD,kBAAkB,SAACpvC,GACjCvU,EAAKsnD,yBAAyB/yC,KAGzB+X,GASRstB,GAAKjhD,UAAkB2uD,yBAA2B,SACjD/yC,GAEA,IAAMmxC,EAAQnxC,EAAKoC,WACnB,GAAc,OAAV+uC,EAAgB,CASlB,IANA,IAAMzgC,EAAY,GAIdqO,EAAkB,GAClBi0B,GAAY,EACPtuD,EAAI,EAAGA,EAAIysD,EAAMtsD,OAAQH,IAChC,GAAIysD,EAAMzsD,GAAGkmC,SAAW+jB,GAAkBoD,uBAEnC,GAAIZ,EAAMzsD,GAAGkmC,SAAW+jB,GAAkBgD,KAC/C3pD,EACEgrD,IAAatuD,EAAI,EACjB,mDAIFysD,EAFA6B,EAAWtuD,GAEFkmC,OAAS+jB,GAAkBoD,iBACpCZ,EAAMzsD,GAAGyrD,YAAc,WAWvB,GATAnoD,EACEmpD,EAAMzsD,GAAGkmC,SAAW+jB,GAAkB+B,IACtC,0CAGFS,EAAMzsD,GAAGwrD,YACTnxB,EAASA,EAAO73B,OACdhD,KAAK4hD,gBAAgB/qB,aAAao2B,EAAMzsD,GAAG0rD,gBAAgB,IAEzDe,EAAMzsD,GAAGga,WAAY,CAEvBgS,EAAUnqB,KACR4qD,EAAMzsD,GAAGga,WAAW5K,KAAK,KAAM,IAAI1L,MAAM,QAAQ,EAFb,QAO1B,IAAd4qD,EAEFhzC,EAAK8wC,SAAS,MAGdK,EAAMtsD,OAASmuD,EAAW,EAI5B9uD,KAAKmiD,YAAYC,0BAA0BtmC,EAAKlG,OAAQilB,GACxD,IAASr6B,EAAI,EAAGA,EAAIgsB,EAAU7rB,OAAQH,IACpCuS,GAAeyZ,EAAUhsB,MC1uB/B,IAYIuuD,GAZEC,GAAsB,kBAiCnBC,eAAP,WAIE,OAFEF,GADGA,IACe,IAAIE,IAM1BA,uBAAA,WACE,IAAK,IAAMC,KAAWlvD,KAAKmvD,OACzB,IAAK,IAAMC,KAASpvD,KAAKmvD,OAAOD,GAC9BlvD,KAAKmvD,OAAOD,GAASE,GAAOrQ,aAKlCkQ,oBAAA,WACE,IAAK,IAAMC,KAAWlvD,KAAKmvD,OACzB,IAAK,IAAMC,KAASpvD,KAAKmvD,OAAOD,GAC9BlvD,KAAKmvD,OAAOD,GAASE,GAAOnL,UAWlCgL,6BAAA,SAAgBnK,EAAkBlT,GAChC,IAAIwd,EAA4Bxd,GAAOkT,EAAI7c,QAAQ+mB,SACrC7nD,IAAVioD,GACF9+C,GACE,8DACE0+C,GACA,kDAIN,IAAM33C,EAAYF,GAAci4C,GAC1Bz3C,EAAWN,EAAUM,SAEvB03C,OAAqCloD,EAkBzC,MAjBuB,oBAAZosC,UACT8b,EAAiB9b,QAAQE,IAAuC,iCAE9D4b,IACFD,EAAQ,UAAUC,SAAqB13C,EAASd,WAGlDqC,GAAY,gCAAiC,EAAG7B,GAC3CA,EAAUzB,KAAKnL,WAClB6F,GACE,4FAKStQ,KAAKsvD,WAAW33C,EAAUmtC,GAE3B+E,UAQdoF,wBAAA,SAAW/iC,GACT,IAAMqjC,EAAW/kD,EAAQxK,KAAKmvD,OAAQjjC,EAAK44B,IAAIl3C,MAE1C2hD,GAAY/kD,EAAQ+kD,EAAUrjC,EAAKsqB,UAAUz/B,iBAAmBmV,GACnE5b,GACE,YAAY4b,EAAK44B,IAAIl3C,SAAQse,EAAKsqB,yCAGtCtqB,EAAK6yB,mBACEwQ,EAASrjC,EAAKsqB,UAAUz/B,gBAWjCk4C,wBAAA,SAAWt3C,EAAoBmtC,GAC7B,IAAIyK,EAAW/kD,EAAQxK,KAAKmvD,OAAQrK,EAAIl3C,MAEnC2hD,IACHA,EAAW,GACXvvD,KAAKmvD,OAAOrK,EAAIl3C,MAAQ2hD,GAG1B,IAAIrjC,EAAO1hB,EAAQ+kD,EAAU53C,EAASZ,eAStC,OARImV,GACF5b,GACE,2HAGJ4b,EAAO,IAAIi1B,GAAKxpC,EAAU3X,KAAKwvD,eAAgB1K,GAC/CyK,EAAS53C,EAASZ,eAAiBmV,GASrC+iC,6BAAA,SAAgBpK,GACd7kD,KAAKwvD,eAAiB3K,OAlI1B,cAIU7kD,YAIJ,GAMIA,qBAA0B,EC1BpC,QA2BER,sBAAIolD,wBAAJ,WACE,OAAO5kD,KAAK0a,MAAMoqC,qCAepBF,iBAAA,SAAIhvC,GAIF,OAHA5V,KAAKyvD,cAAc,OACnBtjD,EAAiB,eAAgB,EAAG,EAAGzL,UAAUC,QAE7CiV,aAAgB8zC,GACX1pD,KAAK0vD,WAAW95C,EAAK1M,iBAGd/B,IAATyO,EAAqB5V,KAAKqhB,MAAMlM,MAAMS,GAAQ5V,KAAKqhB,OAU5DujC,wBAAA,SAAWhT,GAET,IAAM+d,EAAU,sBAChB3vD,KAAKyvD,cAAcE,GACnBxjD,EAAiBwjD,EAAS,EAAG,EAAGjvD,UAAUC,QAC1C,IAAMivD,EAAYz4C,GAAcy6B,GAChC14B,GAAYy2C,EAAS,EAAGC,GAExB,IAAMj4C,EAAWi4C,EAAUj4C,SAa3B,OAZIA,EAASzB,OAAWlW,KAAK0a,MAAc87B,UAAuBtgC,MAChE5F,GACEq/C,EACE,2DAEAh4C,EAASzB,KACT,iBACElW,KAAK0a,MAAc87B,UAAuBtgC,KAC5C,KAIClW,KAAKkpB,IAAI0mC,EAAUh6C,KAAK1M,aAMzB07C,2BAAR,SAAsB+K,GACD,OAAf3vD,KAAK0a,OACPpK,GAAM,eAAiBq/C,EAAU,4BAKrC/K,uBAAA,WACEz4C,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QACvDX,KAAKyvD,cAAc,aACnBzvD,KAAK0a,MAAMqkC,aAGb6F,sBAAA,WACEz4C,EAAiB,oBAAqB,EAAG,EAAGzL,UAAUC,QACtDX,KAAKyvD,cAAc,YACnBzvD,KAAK0a,MAAMupC,UApGGW,eAAc,CAC5BiL,UAAW,CACTC,MAAO,kBAQX,YAAoBp1C,IAAA1a,WAAA0a,aACKymC,IACrB7wC,GACE,wEAKJtQ,KAAKqhB,MAAQ,IAAIqoC,GAAUhvC,EAAOlH,GAAKid,OAEvCzwB,KAAK+vD,SAAW,IAAIC,GAAkBhwD,MAoF1C,QAKQgwD,oBAAN,kB9F/EK,SAAmBjvD,EAASkvD,EAAYC,EAAGC,GAC9C,OAAO,IAAWD,EAANA,GAAUtoD,SAAU,SAAUH,EAASD,GAC/C,SAAS4oD,EAAUjuD,GAAS,IAAMI,EAAK4tD,EAAU1uD,KAAKU,IAAW,MAAOG,GAAKkF,EAAOlF,IACpF,SAAS+tD,EAASluD,GAAS,IAAMI,EAAK4tD,EAAiB,MAAEhuD,IAAW,MAAOG,GAAKkF,EAAOlF,IACvF,SAASC,EAAK+c,GAAUA,EAAOpd,KAAOuF,EAAQ6X,EAAOnd,OAAS,IAAI+tD,EAAE,SAAUzoD,GAAWA,EAAQ6X,EAAOnd,SAAW4lC,KAAKqoB,EAAWC,GACnI9tD,GAAM4tD,EAAYA,EAAUtvD,MAAME,EAASkvD,GAAc,KAAKxuD,0E8F2EjEzB,KAAK6pD,SAAiB4F,cAAc,UACrCR,GAAYpP,cAAcyQ,WAAYtwD,KAAK6pD,SAAiBnvC,OAE3D1a,KAAK6pD,SAAiBnvC,MAAQ,KAC9B1a,KAAK6pD,SAAiBxoC,MAAQ,KAC/BrhB,KAAK6pD,SAASkG,SAAW,KACzB/vD,KAAK6pD,SAAW,kBAVlB,YAAmBA,GAAA7pD,cAAA6pD,EClHrB,uCAAgC,WAC9B3W,GAAoBqd,gBACpBnkB,GAAsBokB,8BAGO,WAC7BpkB,GAAsBmkB,uCAIa,WACnC,OAAOrd,GAAiC,wCAGF,SACtChqB,EACA5hB,GAEC4hB,EAAIgD,KAAK83B,sBAA8BtE,uBAAyBp4C,SAG9C,SAAS4hB,EAAgBg7B,GAC5Ch7B,EAAIgD,KAAKgd,MAAMgb,0BAGoB,SAASh7B,EAAgBs7B,GAC5Dt7B,EAAIgD,KAAKukC,sBAAsBjM,oBAGF,SAASt7B,GACtC,OAAOA,EAAIgD,KAAKs1B,qCAGiB,SACjCt4B,EACA5hB,GAEA,OAAO4hB,EAAIgD,KAAKwkC,qBAAqBppD,MC3C1BqpD,GAAiB3W,GAM7BA,GAAqB95C,UAAkB0wD,aAAe,SACrDh9C,EACA4G,GAEAxa,KAAKs6C,YAAY,IAAK,CAAE16C,EAAGgU,GAAc4G,IAO1Cw/B,GAAqB95C,UAAkB2wD,KAAO,SAC7CpoD,EACAqoD,GAEA9wD,KAAKs6C,YAAY,OAAQ,CAAEh7C,EAAGmJ,GAAQqoD,IAIjC,IlB3BuB3X,GmBaGhsC,GDcpB4jD,GAAqB7a,GA2BrB8a,GAAmB/6C,wEArBN,SAASg7C,GACjC,IAAMC,EAASlX,GAAqB95C,UAAUi/C,IAY9C,OAXAnF,GAAqB95C,UAAUi/C,IAAM,SACnCvrC,EACAnL,EACA0oD,EACAC,QAEiBjqD,IAAbiqD,IACFA,EAAWH,KAEbC,EAAOtwD,KAAKZ,KAAM4T,EAAYnL,EAAM0oD,EAAgBC,IAE/C,WACLpX,GAAqB95C,UAAUi/C,IAAM+R,wCAaV,SAASvnC,GACtC,OAAOA,EAAM2E,mCAQgB,SAASu2B,GACtCoK,GAAYpP,cAAcgF,gBAAgBA,MC3DtCwM,GAAczM,GAASyM,YnBXClY,ImBaGhsC,GA4BhBmkD,IA1BQztD,YnBdvBA,GAAcs1C,GmBiBKhsC,GAAgC4iD,SAASwB,gBAC1D,WACA,SAACzM,EAAK0M,EAAQ5f,GAAQ,OAAAqd,GAAYpP,cAAc4R,gBAAgB3M,EAAKlT,IAErE,CACE8X,aACAv+B,SACAy5B,YACAt8B,gBACA/Y,gBACAwgD,YACAsB,eACAK,gBAEF,MACA"}