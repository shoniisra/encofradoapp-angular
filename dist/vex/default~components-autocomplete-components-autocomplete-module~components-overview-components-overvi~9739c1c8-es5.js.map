{"version":3,"sources":["default~components-autocomplete-components-autocomplete-module~components-overview-components-overvi~9739c1c8-es5.js","webpack:///node_modules/@angular/material/esm2015/autocomplete.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~components-autocomplete-components-autocomplete-module~components-overview-components-overvi~9739c1c8\"],{\n\n/***/ \"./node_modules/@angular/material/esm2015/autocomplete.js\":\n/*!****************************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/autocomplete.js ***!\n  \\****************************************************************/\n/*! exports provided: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\", function() { return MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatAutocompleteSelectedEvent\", function() { return MatAutocompleteSelectedEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_AUTOCOMPLETE_DEFAULT_OPTIONS\", function() { return MAT_AUTOCOMPLETE_DEFAULT_OPTIONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatAutocomplete\", function() { return MatAutocomplete; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatAutocompleteModule\", function() { return MatAutocompleteModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\", function() { return MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMatAutocompleteMissingPanelError\", function() { return getMatAutocompleteMissingPanelError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AUTOCOMPLETE_OPTION_HEIGHT\", function() { return AUTOCOMPLETE_OPTION_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AUTOCOMPLETE_PANEL_HEIGHT\", function() { return AUTOCOMPLETE_PANEL_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_AUTOCOMPLETE_SCROLL_STRATEGY\", function() { return MAT_AUTOCOMPLETE_SCROLL_STRATEGY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\", function() { return MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_AUTOCOMPLETE_VALUE_ACCESSOR\", function() { return MAT_AUTOCOMPLETE_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatAutocompleteTrigger\", function() { return MatAutocompleteTrigger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatAutocompleteOrigin\", function() { return MatAutocompleteOrigin; });\n/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ \"./node_modules/@angular/cdk/esm2015/a11y.js\");\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ \"./node_modules/@angular/cdk/esm2015/bidi.js\");\n/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/keycodes */ \"./node_modules/@angular/cdk/esm2015/keycodes.js\");\n/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ \"./node_modules/@angular/cdk/esm2015/overlay.js\");\n/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/platform */ \"./node_modules/@angular/cdk/esm2015/platform.js\");\n/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/portal */ \"./node_modules/@angular/cdk/esm2015/portal.js\");\n/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/scrolling */ \"./node_modules/@angular/cdk/esm2015/scrolling.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/forms */ \"./node_modules/@angular/forms/fesm2015/forms.js\");\n/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/form-field */ \"./node_modules/@angular/material/esm2015/form-field.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"mixinDisableRipple\"])(MatAutocompleteBase);\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"InjectionToken\"]('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"]();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"]();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"]();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__[\"ActiveDescendantKeyManager\"](this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Component\"], args: [{selector: 'mat-autocomplete',\n                template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ChangeDetectionStrategy\"].OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"MAT_OPTION_PARENT_COMPONENT\"], useExisting: MatAutocomplete }\n                ]\n            },] },\n];\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ChangeDetectorRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ElementRef\"] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Inject\"], args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ViewChild\"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"TemplateRef\"], { static: true },] }],\n    panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ViewChild\"], args: ['panel', { static: false },] }],\n    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ContentChildren\"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"MatOption\"], { descendants: true },] }],\n    optionGroups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ContentChildren\"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"MatOptgroup\"],] }],\n    displayWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"] }],\n    autoActiveFirstOption: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"] }],\n    panelWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"] }],\n    optionSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Output\"] }],\n    opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Output\"] }],\n    closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Output\"] }],\n    classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"], args: ['class',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Directive\"], args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin',\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ElementRef\"] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"InjectionToken\"]('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__[\"Overlay\"]],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_11__[\"NG_VALUE_ACCESSOR\"],\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"forwardRef\"])((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = rxjs__WEBPACK_IMPORTED_MODULE_13__[\"Subscription\"].EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new rxjs__WEBPACK_IMPORTED_MODULE_13__[\"Subject\"]();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_13__[\"defer\"])((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__[\"merge\"])(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"take\"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"switchMap\"])((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n            if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__[\"_supportsShadowDom\"])()) {\n                /** @type {?} */\n                const element = this._element.nativeElement;\n                /** @type {?} */\n                const rootNode = element.getRootNode ? element.getRootNode() : null;\n                // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n                // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n                this._isInsideShadowRoot = rootNode instanceof ((/** @type {?} */ (window))).ShadowRoot;\n            }\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__[\"merge\"])(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"filter\"])((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"filter\"])((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            Object(rxjs__WEBPACK_IMPORTED_MODULE_13__[\"of\"])()).pipe(\n        // Normalize the output so we return a consistent type.\n        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"map\"])((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof _angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"MatOptionSelectionChange\"] ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__[\"merge\"])((/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_13__[\"fromEvent\"])(this._document, 'click'))), (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_13__[\"fromEvent\"])(this._document, 'touchend'))))\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"filter\"])((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"ESCAPE\"]) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"ENTER\"] && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"UP_ARROW\"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"DOWN_ARROW\"];\n            if (this.panelOpen || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"TAB\"]) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"_countGroupLabelsBeforeOption\"])(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"_getOptionScrollPosition\"])(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"take\"])(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"tap\"])((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"delay\"])(0));\n        // When the zone is stable initially, and when the option list changes...\n        return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__[\"merge\"])(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"switchMap\"])((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__[\"take\"])(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__[\"TemplatePortal\"](this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"ESCAPE\"] || (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"UP_ARROW\"] && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__[\"OverlayConfig\"]({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        /** @type {?} */\n        const belowPosition = {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        };\n        /** @type {?} */\n        const abovePosition = {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            // The overlay edge connected to the trigger should have squared corners, while\n            // the opposite end has rounded corners. We apply a CSS class to swap the\n            // border-radius based on the overlay position.\n            panelClass: 'mat-autocomplete-panel-above'\n        };\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = [abovePosition];\n        }\n        else if (this.position === 'below') {\n            positions = [belowPosition];\n        }\n        else {\n            positions = [belowPosition, abovePosition];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Directive\"], args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ElementRef\"] },\n    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__[\"Overlay\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ViewContainerRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"NgZone\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ChangeDetectorRef\"] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Inject\"], args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__[\"Directionality\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"] }] },\n    { type: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__[\"MatFormField\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Host\"] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Inject\"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_10__[\"DOCUMENT\"],] }] },\n    { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__[\"ViewportRuler\"] }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"], args: ['matAutocomplete',] }],\n    position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"], args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"], args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"], args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"], args: ['matAutocompleteDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"NgModule\"], args: [{\n                imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"MatOptionModule\"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__[\"OverlayModule\"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"MatCommonModule\"], _angular_common__WEBPACK_IMPORTED_MODULE_10__[\"CommonModule\"]],\n                exports: [\n                    MatAutocomplete,\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"MatOptionModule\"],\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"MatCommonModule\"]\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=autocomplete.js.map\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~components-autocomplete-components-autocomplete-module~components-overview-components-overvi~9739c1c8-es2015.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { defer, fromEvent, merge, of, Subject, Subscription } from 'rxjs';\nimport { delay, filter, map, switchMap, take, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.decorators = [\n    { type: Component, args: [{selector: 'mat-autocomplete',\n                template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ]\n            },] },\n];\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin',\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n            if (_supportsShadowDom()) {\n                /** @type {?} */\n                const element = this._element.nativeElement;\n                /** @type {?} */\n                const rootNode = element.getRootNode ? element.getRootNode() : null;\n                // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n                // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n                this._isInsideShadowRoot = rootNode instanceof ((/** @type {?} */ (window))).ShadowRoot;\n            }\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        /** @type {?} */\n        const belowPosition = {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        };\n        /** @type {?} */\n        const abovePosition = {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            // The overlay edge connected to the trigger should have squared corners, while\n            // the opposite end has rounded corners. We apply a CSS class to swap the\n            // border-radius based on the overlay position.\n            panelClass: 'mat-autocomplete-panel-above'\n        };\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = [abovePosition];\n        }\n        else if (this.position === 'below') {\n            positions = [belowPosition];\n        }\n        else {\n            positions = [belowPosition, abovePosition];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin };\n//# sourceMappingURL=autocomplete.js.map\n"]}