{"version":3,"sources":["default~contacts-table-contacts-table-module~pages-apps-clientes-aio-table-module~pages-apps-contrat~601e5afe-es5.js","webpack:///node_modules/@angular/material/esm2015/select.js","webpack:///node_modules/@iconify/icons-ic/twotone-more-vert.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~contacts-table-contacts-table-module~pages-apps-clientes-aio-table-module~pages-apps-contrat~601e5afe\"],{\n\n/***/ \"./node_modules/@angular/material/esm2015/select.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/select.js ***!\n  \\**********************************************************/\n/*! exports provided: MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSelectModule\", function() { return MatSelectModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\", function() { return MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_PANEL_MAX_HEIGHT\", function() { return SELECT_PANEL_MAX_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_PANEL_PADDING_X\", function() { return SELECT_PANEL_PADDING_X; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_PANEL_INDENT_PADDING_X\", function() { return SELECT_PANEL_INDENT_PADDING_X; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_ITEM_HEIGHT_EM\", function() { return SELECT_ITEM_HEIGHT_EM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_MULTIPLE_PANEL_PADDING_X\", function() { return SELECT_MULTIPLE_PANEL_PADDING_X; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SELECT_PANEL_VIEWPORT_PADDING\", function() { return SELECT_PANEL_VIEWPORT_PADDING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SELECT_SCROLL_STRATEGY\", function() { return MAT_SELECT_SCROLL_STRATEGY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SELECT_SCROLL_STRATEGY_PROVIDER\", function() { return MAT_SELECT_SCROLL_STRATEGY_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSelectChange\", function() { return MatSelectChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSelectTrigger\", function() { return MatSelectTrigger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSelect\", function() { return MatSelect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"matSelectAnimations\", function() { return matSelectAnimations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformPanel\", function() { return transformPanel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fadeInContent\", function() { return fadeInContent; });\n/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ \"./node_modules/@angular/animations/fesm2015/animations.js\");\n/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ \"./node_modules/@angular/cdk/esm2015/a11y.js\");\n/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ \"./node_modules/@angular/cdk/esm2015/bidi.js\");\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/collections */ \"./node_modules/@angular/cdk/esm2015/collections.js\");\n/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/keycodes */ \"./node_modules/@angular/cdk/esm2015/keycodes.js\");\n/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ \"./node_modules/@angular/cdk/esm2015/overlay.js\");\n/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/scrolling */ \"./node_modules/@angular/cdk/esm2015/scrolling.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/forms */ \"./node_modules/@angular/forms/fesm2015/forms.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/form-field */ \"./node_modules/@angular/material/esm2015/form-field.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"trigger\"])('transformPanelWrap', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"transition\"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"query\"])('@transformPanel', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"animateChild\"])()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"trigger\"])('transformPanel', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"state\"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"style\"])({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"state\"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"style\"])({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"state\"])('showing-multiple', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"style\"])({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"transition\"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"animate\"])('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"transition\"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"animate\"])('100ms 25ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"style\"])({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n    fadeInContent: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"trigger\"])('fadeInContent', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"state\"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"style\"])({ opacity: 1 })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"transition\"])('void => showing', [\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"style\"])({ opacity: 0 }),\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__[\"animate\"])('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"InjectionToken\"]('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__[\"Overlay\"]],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatSelectMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"mixinDisableRipple\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"mixinTabIndex\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"mixinDisabled\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"mixinErrorState\"])(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Directive\"], args: [{\n                selector: 'mat-select-trigger'\n            },] },\n];\nclass MatSelect extends _MatSelectMixinBase {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _parentFormField\n     * @param {?} ngControl\n     * @param {?} tabIndex\n     * @param {?} scrollStrategyFactory\n     * @param {?=} _liveAnnouncer\n     */\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        /**\n         * Unique id for this input.\n         */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new rxjs__WEBPACK_IMPORTED_MODULE_12__[\"Subject\"]();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this._panelDoneAnimatingStream = new rxjs__WEBPACK_IMPORTED_MODULE_12__[\"Subject\"]();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_12__[\"defer\"])((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"startWith\"])(options), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"switchMap\"])((/**\n                 * @return {?}\n                 */\n                () => Object(rxjs__WEBPACK_IMPORTED_MODULE_12__[\"merge\"])(...options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange))))));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"take\"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"switchMap\"])((/**\n             * @return {?}\n             */\n            () => this.optionSelectionChanges)));\n        }))));\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        this.openedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"EventEmitter\"]();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        this._openedStream = this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"filter\"])((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => o)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"map\"])((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        this._closedStream = this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"filter\"])((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => !o)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"map\"])((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"EventEmitter\"]();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"EventEmitter\"]();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /**\n     * Whether the select is focused.\n     * @return {?}\n     */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    set focused(value) {\n        this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n    get placeholder() { return this._placeholder; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__[\"coerceBooleanProperty\"])(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__[\"SelectionModel\"](this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"distinctUntilChanged\"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"takeUntil\"])(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n        this._viewportRuler.change()\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"takeUntil\"])(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"takeUntil\"])(this._destroy)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.added.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.select()));\n            event.removed.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.deselect()));\n        }));\n        this.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"startWith\"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"takeUntil\"])(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._resetOptions();\n            this._initializeSelection();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"take\"])(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        }));\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            /** @type {?} */\n            const selectedOptions = this._selectionModel.selected.map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.viewValue));\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClosedKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"DOWN_ARROW\"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"UP_ARROW\"] ||\n            keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"LEFT_ARROW\"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"RIGHT_ARROW\"];\n        /** @type {?} */\n        const isOpenKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"ENTER\"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"SPACE\"];\n        /** @type {?} */\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((isOpenKey && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"hasModifierKey\"])(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            /** @type {?} */\n            const previouslySelectedOption = this.selected;\n            if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"HOME\"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"END\"]) {\n                keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"HOME\"] ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            /** @type {?} */\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n            if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(((/** @type {?} */ (selectedOption))).viewValue, 10000);\n            }\n        }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleOpenKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"DOWN_ARROW\"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"UP_ARROW\"];\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"HOME\"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"END\"]) {\n            event.preventDefault();\n            keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"HOME\"] ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"ENTER\"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"SPACE\"]) && manager.activeItem &&\n            !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"hasModifierKey\"])(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__[\"A\"] && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            const hasDeselectedOptions = this.options.some((/**\n             * @param {?} opt\n             * @return {?}\n             */\n            opt => !opt.disabled && !opt.selected));\n            this.options.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            }));\n        }\n        else {\n            /** @type {?} */\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"take\"])(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        }));\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.setActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this.options.find((/**\n         * @param {?} option\n         * @return {?}\n         */\n        (option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_8__[\"isDevMode\"])()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        }));\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _initKeyManager() {\n        this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__[\"ActiveDescendantKeyManager\"](this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"takeUntil\"])(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        }));\n        this._keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"takeUntil\"])(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        }));\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    _resetOptions() {\n        /** @type {?} */\n        const changedOrDestroyed = Object(rxjs__WEBPACK_IMPORTED_MODULE_12__[\"merge\"])(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"takeUntil\"])(changedOrDestroyed)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        }));\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        Object(rxjs__WEBPACK_IMPORTED_MODULE_12__[\"merge\"])(...this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option._stateChanges)))\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[\"takeUntil\"])(changedOrDestroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }));\n        this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _onSelect(option, isUserInput) {\n        /** @type {?} */\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this.multiple) {\n            /** @type {?} */\n            const options = this.options.toArray();\n            this._selectionModel.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = ((/** @type {?} */ (this.selected))).map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.value));\n        }\n        else {\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    _setOptionIds() {\n        this._optionIds = this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option.id)).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    _scrollActiveOptionIntoView() {\n        /** @type {?} */\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"_countGroupLabelsBeforeOption\"])(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"_getOptionScrollPosition\"])(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.reduce((/**\n         * @param {?} result\n         * @param {?} current\n         * @param {?} index\n         * @return {?}\n         */\n        (result, current, index) => {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }), undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayPosition() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const items = this._getItemCount();\n        /** @type {?} */\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        /** @type {?} */\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        /** @type {?} */\n        let selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"_countGroupLabelsBeforeOption\"])(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /** @type {?} */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        /** @type {?} */\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayOffsetX() {\n        /** @type {?} */\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        /** @type {?} */\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            /** @type {?} */\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    _getOriginBasedOnOption() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Component\"], args: [{selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\",\n                styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ChangeDetectionStrategy\"].OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__[\"MatFormFieldControl\"], useExisting: MatSelect },\n                    { provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"MAT_OPTION_PARENT_COMPONENT\"], useExisting: MatSelect }\n                ],\n            },] },\n];\n/** @nocollapse */\nMatSelect.ctorParameters = () => [\n    { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_7__[\"ViewportRuler\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ChangeDetectorRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"NgZone\"] },\n    { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"ErrorStateMatcher\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ElementRef\"] },\n    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__[\"Directionality\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Optional\"] }] },\n    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_9__[\"NgForm\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Optional\"] }] },\n    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_9__[\"FormGroupDirective\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Optional\"] }] },\n    { type: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__[\"MatFormField\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Optional\"] }] },\n    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_9__[\"NgControl\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Optional\"] }] },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Attribute\"], args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Inject\"], args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__[\"LiveAnnouncer\"] }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ViewChild\"], args: ['trigger', { static: false },] }],\n    panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ViewChild\"], args: ['panel', { static: false },] }],\n    overlayDir: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ViewChild\"], args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__[\"CdkConnectedOverlay\"], { static: false },] }],\n    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ContentChildren\"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"MatOption\"], { descendants: true },] }],\n    optionGroups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ContentChildren\"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"MatOptgroup\"],] }],\n    panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    customTrigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"ContentChild\"], args: [MatSelectTrigger, { static: false },] }],\n    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    multiple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    disableOptionCentering: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"], args: ['aria-label',] }],\n    ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"], args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    typeaheadDebounceInterval: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    sortComparator: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Input\"] }],\n    openedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Output\"] }],\n    _openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Output\"], args: ['opened',] }],\n    _closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Output\"], args: ['closed',] }],\n    selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Output\"] }],\n    valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"Output\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSelectModule {\n}\nMatSelectModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__[\"NgModule\"], args: [{\n                imports: [\n                    _angular_common__WEBPACK_IMPORTED_MODULE_14__[\"CommonModule\"],\n                    _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__[\"OverlayModule\"],\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"MatOptionModule\"],\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"MatCommonModule\"],\n                ],\n                exports: [_angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__[\"MatFormFieldModule\"], MatSelect, MatSelectTrigger, _angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"MatOptionModule\"], _angular_material_core__WEBPACK_IMPORTED_MODULE_10__[\"MatCommonModule\"]],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=select.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@iconify/icons-ic/twotone-more-vert.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/@iconify/icons-ic/twotone-more-vert.js ***!\n  \\*************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar data = {\n\t\"body\": \"<path d=\\\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\\\" fill=\\\"currentColor\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~contacts-table-contacts-table-module~pages-apps-clientes-aio-table-module~pages-apps-contrat~601e5afe-es2015.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-select-trigger'\n            },] },\n];\nclass MatSelect extends _MatSelectMixinBase {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _parentFormField\n     * @param {?} ngControl\n     * @param {?} tabIndex\n     * @param {?} scrollStrategyFactory\n     * @param {?=} _liveAnnouncer\n     */\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        /**\n         * Unique id for this input.\n         */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap((/**\n                 * @return {?}\n                 */\n                () => merge(...options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange))))));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelectionChanges)));\n        }))));\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        this._openedStream = this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        this._closedStream = this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => !o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /**\n     * Whether the select is focused.\n     * @return {?}\n     */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    set focused(value) {\n        this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n    get placeholder() { return this._placeholder; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.added.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.select()));\n            event.removed.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.deselect()));\n        }));\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._resetOptions();\n            this._initializeSelection();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        }));\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            /** @type {?} */\n            const selectedOptions = this._selectionModel.selected.map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.viewValue));\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClosedKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        /** @type {?} */\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        /** @type {?} */\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            /** @type {?} */\n            const previouslySelectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            /** @type {?} */\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n            if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(((/** @type {?} */ (selectedOption))).viewValue, 10000);\n            }\n        }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleOpenKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            const hasDeselectedOptions = this.options.some((/**\n             * @param {?} opt\n             * @return {?}\n             */\n            opt => !opt.disabled && !opt.selected));\n            this.options.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            }));\n        }\n        else {\n            /** @type {?} */\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        }));\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.setActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this.options.find((/**\n         * @param {?} option\n         * @return {?}\n         */\n        (option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        }));\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        }));\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        }));\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    _resetOptions() {\n        /** @type {?} */\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        }));\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option._stateChanges)))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }));\n        this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _onSelect(option, isUserInput) {\n        /** @type {?} */\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this.multiple) {\n            /** @type {?} */\n            const options = this.options.toArray();\n            this._selectionModel.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = ((/** @type {?} */ (this.selected))).map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.value));\n        }\n        else {\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    _setOptionIds() {\n        this._optionIds = this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option.id)).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    _scrollActiveOptionIntoView() {\n        /** @type {?} */\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.reduce((/**\n         * @param {?} result\n         * @param {?} current\n         * @param {?} index\n         * @return {?}\n         */\n        (result, current, index) => {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }), undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayPosition() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const items = this._getItemCount();\n        /** @type {?} */\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        /** @type {?} */\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        /** @type {?} */\n        let selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /** @type {?} */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        /** @type {?} */\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayOffsetX() {\n        /** @type {?} */\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        /** @type {?} */\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            /** @type {?} */\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    _getOriginBasedOnOption() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.decorators = [\n    { type: Component, args: [{selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\",\n                styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n            },] },\n];\n/** @nocollapse */\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger', { static: false },] }],\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: false },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MatSelectTrigger, { static: false },] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSelectModule {\n}\nMatSelectModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n//# sourceMappingURL=select.js.map\n","var data = {\n\t\"body\": \"<path d=\\\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\\\" fill=\\\"currentColor\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n"]}