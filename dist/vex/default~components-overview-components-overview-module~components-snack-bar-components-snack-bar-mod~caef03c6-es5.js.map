{"version":3,"sources":["default~components-overview-components-overview-module~components-snack-bar-components-snack-bar-mod~caef03c6-es5.js","webpack:///node_modules/@angular/material/esm2015/snack-bar.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~components-overview-components-overview-module~components-snack-bar-components-snack-bar-mod~caef03c6\"],{\n\n/***/ \"./node_modules/@angular/material/esm2015/snack-bar.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/snack-bar.js ***!\n  \\*************************************************************/\n/*! exports provided: MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSnackBarModule\", function() { return MatSnackBarModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\", function() { return MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SNACK_BAR_DEFAULT_OPTIONS\", function() { return MAT_SNACK_BAR_DEFAULT_OPTIONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSnackBar\", function() { return MatSnackBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSnackBarContainer\", function() { return MatSnackBarContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SNACK_BAR_DATA\", function() { return MAT_SNACK_BAR_DATA; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSnackBarConfig\", function() { return MatSnackBarConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSnackBarRef\", function() { return MatSnackBarRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SimpleSnackBar\", function() { return SimpleSnackBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"matSnackBarAnimations\", function() { return matSnackBarAnimations; });\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/animations */ \"./node_modules/@angular/animations/fesm2015/animations.js\");\n/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/portal */ \"./node_modules/@angular/cdk/esm2015/portal.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/overlay */ \"./node_modules/@angular/cdk/esm2015/overlay.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/button */ \"./node_modules/@angular/material/esm2015/button.js\");\n/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/a11y */ \"./node_modules/@angular/cdk/esm2015/a11y.js\");\n/* harmony import */ var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/layout */ \"./node_modules/@angular/cdk/esm2015/layout.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new rxjs__WEBPACK_IMPORTED_MODULE_0__[\"Subject\"]();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new rxjs__WEBPACK_IMPORTED_MODULE_0__[\"Subject\"]();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new rxjs__WEBPACK_IMPORTED_MODULE_0__[\"Subject\"]();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        () => this.dismiss()));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        () => this._finishDismiss()));\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => this.dismiss()), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"InjectionToken\"]('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar',\n                }\n            },] },\n];\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [MAT_SNACK_BAR_DATA,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"trigger\"])('state', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"state\"])('void, hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"style\"])({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"state\"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"style\"])({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"transition\"])('* => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"animate\"])('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"transition\"])('* => void, * => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"animate\"])('75ms cubic-bezier(0.4, 0.0, 1, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__[\"style\"])({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__[\"BasePortalOutlet\"] {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new rxjs__WEBPACK_IMPORTED_MODULE_0__[\"Subject\"]();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new rxjs__WEBPACK_IMPORTED_MODULE_0__[\"Subject\"]();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                onEnter.next();\n                onEnter.complete();\n            }));\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__[\"take\"])(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._onExit.next();\n            this._onExit.complete();\n        }));\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                cssClass => element.classList.add(cssClass)));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n            },] },\n];\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgZone\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectorRef\"] },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewChild\"], args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__[\"CdkPortalOutlet\"], { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"], args: [{\n                imports: [\n                    _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__[\"OverlayModule\"],\n                    _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__[\"PortalModule\"],\n                    _angular_common__WEBPACK_IMPORTED_MODULE_6__[\"CommonModule\"],\n                    _angular_material_button__WEBPACK_IMPORTED_MODULE_8__[\"MatButtonModule\"],\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"MatCommonModule\"],\n                ],\n                exports: [MatSnackBarContainer, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"MatCommonModule\"]],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"InjectionToken\"]('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__[\"PortalInjector\"](userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__[\"ComponentPortal\"](MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"TemplateRef\"]) {\n            /** @type {?} */\n            const portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__[\"TemplatePortal\"](content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__[\"ComponentPortal\"](content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_10__[\"Breakpoints\"].HandsetPortrait).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__[\"takeUntil\"])(overlayRef.detachments())).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state$$1 => {\n            /** @type {?} */\n            const classList = overlayRef.overlayElement.classList;\n            /** @type {?} */\n            const className = 'mat-snack-bar-handset';\n            state$$1.matches ? classList.add(className) : classList.remove(className);\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__[\"OverlayConfig\"]();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__[\"PortalInjector\"](userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Injectable\"], args: [{ providedIn: MatSnackBarModule },] },\n];\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__[\"Overlay\"] },\n    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__[\"LiveAnnouncer\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Injector\"] },\n    { type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_10__[\"BreakpointObserver\"] },\n    { type: MatSnackBar, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"SkipSelf\"] }] },\n    { type: MatSnackBarConfig, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵdefineInjectable\"])({ factory: function MatSnackBar_Factory() { return new MatSnackBar(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵinject\"])(_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__[\"Overlay\"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵinject\"])(_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__[\"LiveAnnouncer\"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵinject\"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"INJECTOR\"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵinject\"])(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_10__[\"BreakpointObserver\"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵinject\"])(MatSnackBar, 12), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵinject\"])(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=snack-bar.js.map\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~components-overview-components-overview-module~components-snack-bar-components-snack-bar-mod~caef03c6-es2015.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        () => this.dismiss()));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        () => this._finishDismiss()));\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => this.dismiss()), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.decorators = [\n    { type: Component, args: [{selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar',\n                }\n            },] },\n];\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                onEnter.next();\n                onEnter.complete();\n            }));\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._onExit.next();\n            this._onExit.complete();\n        }));\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                cssClass => element.classList.add(cssClass)));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.decorators = [\n    { type: Component, args: [{selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n            },] },\n];\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state$$1 => {\n            /** @type {?} */\n            const classList = overlayRef.overlayElement.classList;\n            /** @type {?} */\n            const className = 'mat-snack-bar-handset';\n            state$$1.matches ? classList.add(className) : classList.remove(className);\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.decorators = [\n    { type: Injectable, args: [{ providedIn: MatSnackBarModule },] },\n];\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n//# sourceMappingURL=snack-bar.js.map\n"]}