{"version":3,"sources":["default~contacts-table-contacts-table-module~pages-apps-clientes-aio-table-module~pages-apps-contrat~d964ba47-es5.js","webpack:///node_modules/@angular/cdk/esm2015/table.js","webpack:///node_modules/@angular/material/esm2015/paginator.js","webpack:///node_modules/@angular/material/esm2015/sort.js","webpack:///node_modules/@angular/material/esm2015/table.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,+GAA+G,CAAC,EAAC;QAEhL,KAAK,CAAC,8CAA8C;QACpD;;gEAEwD;QACxD,4cAA4c;QAC5c,KAAK,CAAC,CAAC,UAAS,MAAM,EAAE,mBAAmB,EAAE,mBAAmB;YAEhE,YAAY,CAAC;YCTb;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;;;;;;eAMG;YAWH;;;eAGG;YACH;;;;;;;;eAQG;YACH,SAAS,mBAAmB,CAAC,IAAI;gBAC7B;oBAAqB,2BAAI;oBACrB;;uBAEG;oBACH;wBAAY,cAAO;6BAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;4BAAP,yBAAO;;wBAAnB,+BACa,IAAI,UAMhB;wBALG,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;wBACrB;;2BAEG;wBACH,KAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;;oBACnC,CAAC;oBAKD,sBAAI,2BAAM;wBAJV;;;2BAGG;6BACH,cAAe,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;wBACrC;;;2BAGG;6BACH,UAAW,CAAC;4BACR,gBAAgB;4BAChB,IAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC;4BAC/B,IAAI,CAAC,OAAO,GAAG,mFAAqB,CAAC,CAAC,CAAC,CAAC;4BACxC,IAAI,CAAC,iBAAiB,GAAG,SAAS,KAAK,IAAI,CAAC,OAAO,CAAC;wBACxD,CAAC;;;uBAVoC;oBAWrC;;;uBAGG;oBACH,kCAAgB,GAAhB;wBACI,gBAAgB;wBAChB,IAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC;wBAChD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;wBAC/B,OAAO,gBAAgB,CAAC;oBAC5B,CAAC;oBACD;;;uBAGG;oBACH,oCAAkB,GAAlB;wBACI,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;oBACnC,CAAC;oBACL,cAAC;gBAAD,CAAC,CA5CoB,IAAI,GA4CvB;YACN,CAAC;YAED;;;eAGG;YACH;;;eAGG;YACH;gBACI;;mBAEG;gBACH,oBAAY,oBAAoB,CAAC,QAAQ;oBACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBACL,iBAAC;YAAD,CAAC;YACD,UAAU,CAAC,UAAU,GAAG;gBACpB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,cAAc,EAAE,EAAE,EAAE;aAC7D,CAAC;YACF,kBAAkB;YAClB,UAAU,CAAC,cAAc,GAAG,cAAM;gBAC9B,EAAE,IAAI,EAAE,yDAAW,EAAE;aACxB,EAFiC,CAEjC,CAAC;YACF;;;eAGG;YACH;gBACI;;mBAEG;gBACH,0BAAY,oBAAoB,CAAC,QAAQ;oBACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBACL,uBAAC;YAAD,CAAC;YACD,gBAAgB,CAAC,UAAU,GAAG;gBAC1B,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,oBAAoB,EAAE,EAAE,EAAE;aACnE,CAAC;YACF,kBAAkB;YAClB,gBAAgB,CAAC,cAAc,GAAG,cAAM;gBACpC,EAAE,IAAI,EAAE,yDAAW,EAAE;aACxB,EAFuC,CAEvC,CAAC;YACF;;;eAGG;YACH;gBACI;;mBAEG;gBACH,0BAAY,oBAAoB,CAAC,QAAQ;oBACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBACL,uBAAC;YAAD,CAAC;YACD,gBAAgB,CAAC,UAAU,GAAG;gBAC1B,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,oBAAoB,EAAE,EAAE,EAAE;aACnE,CAAC;YACF,kBAAkB;YAClB,gBAAgB,CAAC,cAAc,GAAG,cAAM;gBACpC,EAAE,IAAI,EAAE,yDAAW,EAAE;aACxB,EAFuC,CAEvC,CAAC;YACF,mDAAmD;YACnD;;eAEG;YACH;gBAAA;gBACA,CAAC;gBAAD,uBAAC;YAAD,CAAC;YACD,gBAAgB;YAChB,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;YAChE;;;eAGG;YACH;gBAA2B,gCAAiB;gBACxC;oBAAA,+BACa,SAAS,UAErB;oBADG,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;;gBAC5B,CAAC;gBAKD,sBAAI,8BAAI;oBAJR;;;uBAGG;yBACH;wBACI,OAAO,IAAI,CAAC,KAAK,CAAC;oBACtB,CAAC;oBACD;;;uBAGG;yBACH,UAAS,IAAI;wBACT,0FAA0F;wBAC1F,uFAAuF;wBACvF,IAAI,CAAC,IAAI,EAAE;4BACP,OAAO;yBACV;wBACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;wBAClB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;oBACnE,CAAC;;;mBAbA;gBAoBD,sBAAI,mCAAS;oBANb;;;;;uBAKG;yBACH;wBACI,OAAO,IAAI,CAAC,UAAU,CAAC;oBAC3B,CAAC;oBACD;;;uBAGG;yBACH,UAAc,CAAC;wBACX,gBAAgB;wBAChB,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;wBAClC,IAAI,CAAC,UAAU,GAAG,mFAAqB,CAAC,CAAC,CAAC,CAAC;wBAC3C,IAAI,CAAC,iBAAiB,GAAG,SAAS,KAAK,IAAI,CAAC,UAAU,CAAC;oBAC3D,CAAC;;;mBAVA;gBAWL,mBAAC;YAAD,CAAC,CA5C0B,iBAAiB,GA4C3C;YACD,YAAY,CAAC,UAAU,GAAG;gBACtB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,gBAAgB;4BAC1B,MAAM,EAAE,CAAC,QAAQ,CAAC;4BAClB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;yBACpF,EAAE,EAAE;aAChB,CAAC;YACF,YAAY,CAAC,cAAc,GAAG;gBAC1B,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,IAAI,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC;gBAChD,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC;gBAClD,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,0DAAY,EAAE,IAAI,EAAE,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;gBACtE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,0DAAY,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;gBAClF,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,0DAAY,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;aACrF,CAAC;YACF;;eAEG;YACH;gBACI;;;mBAGG;gBACH,qBAAY,SAAS,EAAE,UAAU;oBAC7B,gBAAgB;oBAChB,IAAM,eAAe,GAAG,gBAAc,SAAS,CAAC,oBAAsB,CAAC;oBACvE,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBAC5D,CAAC;gBACL,kBAAC;YAAD,CAAC;YACD;;eAEG;YACH;gBAA4B,iCAAW;gBACnC;;;mBAGG;gBACH,uBAAY,SAAS,EAAE,UAAU;2BAC7B,kBAAM,SAAS,EAAE,UAAU,CAAC;gBAChC,CAAC;gBACL,oBAAC;YAAD,CAAC,CAR2B,WAAW,GAQtC;YACD,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,sCAAsC;4BAChD,IAAI,EAAE;gCACF,OAAO,EAAE,iBAAiB;gCAC1B,MAAM,EAAE,cAAc;6BACzB;yBACJ,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,aAAa,CAAC,cAAc,GAAG,cAAM;gBACjC,EAAE,IAAI,EAAE,YAAY,EAAE;gBACtB,EAAE,IAAI,EAAE,wDAAU,EAAE;aACvB,EAHoC,CAGpC,CAAC;YACF;;eAEG;YACH;gBAA4B,iCAAW;gBACnC;;;mBAGG;gBACH,uBAAY,SAAS,EAAE,UAAU;2BAC7B,kBAAM,SAAS,EAAE,UAAU,CAAC;gBAChC,CAAC;gBACL,oBAAC;YAAD,CAAC,CAR2B,WAAW,GAQtC;YACD,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,sCAAsC;4BAChD,IAAI,EAAE;gCACF,OAAO,EAAE,iBAAiB;gCAC1B,MAAM,EAAE,UAAU;6BACrB;yBACJ,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,aAAa,CAAC,cAAc,GAAG,cAAM;gBACjC,EAAE,IAAI,EAAE,YAAY,EAAE;gBACtB,EAAE,IAAI,EAAE,wDAAU,EAAE;aACvB,EAHoC,CAGpC,CAAC;YACF;;eAEG;YACH;gBAAsB,2BAAW;gBAC7B;;;mBAGG;gBACH,iBAAY,SAAS,EAAE,UAAU;2BAC7B,kBAAM,SAAS,EAAE,UAAU,CAAC;gBAChC,CAAC;gBACL,cAAC;YAAD,CAAC,CARqB,WAAW,GAQhC;YACD,OAAO,CAAC,UAAU,GAAG;gBACjB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,wBAAwB;4BAClC,IAAI,EAAE;gCACF,OAAO,EAAE,UAAU;gCACnB,MAAM,EAAE,UAAU;6BACrB;yBACJ,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,OAAO,CAAC,cAAc,GAAG,cAAM;gBAC3B,EAAE,IAAI,EAAE,YAAY,EAAE;gBACtB,EAAE,IAAI,EAAE,wDAAU,EAAE;aACvB,EAH8B,CAG9B,CAAC;YAEF;;;eAGG;YACH;;;;eAIG;YACH,IAAM,gBAAgB,GAAG,6CAA6C,CAAC;YACvE;;;;eAIG;YACH;gBACI;;;mBAGG;gBACH,oBAAY,QAAQ,EAAE,QAAQ;oBAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBACD;;;mBAGG;gBACH,gCAAW,GAAX,UAAY,OAAO;oBACf,8FAA8F;oBAC9F,iEAAiE;oBACjE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;wBACtB,gBAAgB;wBAChB,IAAM,OAAO,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;wBAC9E,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;wBAC3D,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACrC;gBACL,CAAC;gBACD;;;;mBAIG;gBACH,mCAAc,GAAd;oBACI,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAClD,CAAC;gBACD;;;;mBAIG;gBACH,wCAAmB,GAAnB,UAAoB,MAAM;oBACtB,IAAI,IAAI,YAAY,eAAe,EAAE;wBACjC,OAAO,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;qBACrC;oBACD,IAAI,IAAI,YAAY,eAAe,EAAE;wBACjC,OAAO,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;qBACrC;yBACI;wBACD,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;qBAC/B;gBACL,CAAC;gBACL,iBAAC;YAAD,CAAC;YACD,sDAAsD;YACtD;;eAEG;YACH;gBAAkC,uCAAU;gBAA5C;;gBACA,CAAC;gBAAD,0BAAC;YAAD,CAAC,CADiC,UAAU,GAC3C;YACD,gBAAgB;YAChB,IAAM,oBAAoB,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;YACtE;;;eAGG;YACH;gBAA8B,mCAAoB;gBAC9C;;;mBAGG;gBACH,yBAAY,QAAQ,EAAE,QAAQ;2BAC1B,kBAAM,QAAQ,EAAE,QAAQ,CAAC;gBAC7B,CAAC;gBACD,6FAA6F;gBAC7F,sFAAsF;gBACtF;;;mBAGG;gBACH,qCAAW,GAAX,UAAY,OAAO;oBACf,iBAAM,WAAW,YAAC,OAAO,CAAC,CAAC;gBAC/B,CAAC;gBACL,sBAAC;YAAD,CAAC,CAjB6B,oBAAoB,GAiBjD;YACD,eAAe,CAAC,UAAU,GAAG;gBACzB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,mBAAmB;4BAC7B,MAAM,EAAE,CAAC,0BAA0B,EAAE,+BAA+B,CAAC;yBACxE,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,eAAe,CAAC,cAAc,GAAG,cAAM;gBACnC,EAAE,IAAI,EAAE,yDAAW,EAAE;gBACrB,EAAE,IAAI,EAAE,6DAAe,EAAE;aAC5B,EAHsC,CAGtC,CAAC;YACF,sDAAsD;YACtD;;eAEG;YACH;gBAAkC,uCAAU;gBAA5C;;gBACA,CAAC;gBAAD,0BAAC;YAAD,CAAC,CADiC,UAAU,GAC3C;YACD,gBAAgB;YAChB,IAAM,oBAAoB,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;YACtE;;;eAGG;YACH;gBAA8B,mCAAoB;gBAC9C;;;mBAGG;gBACH,yBAAY,QAAQ,EAAE,QAAQ;2BAC1B,kBAAM,QAAQ,EAAE,QAAQ,CAAC;gBAC7B,CAAC;gBACD,6FAA6F;gBAC7F,sFAAsF;gBACtF;;;mBAGG;gBACH,qCAAW,GAAX,UAAY,OAAO;oBACf,iBAAM,WAAW,YAAC,OAAO,CAAC,CAAC;gBAC/B,CAAC;gBACL,sBAAC;YAAD,CAAC,CAjB6B,oBAAoB,GAiBjD;YACD,eAAe,CAAC,UAAU,GAAG;gBACzB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,mBAAmB;4BAC7B,MAAM,EAAE,CAAC,0BAA0B,EAAE,+BAA+B,CAAC;yBACxE,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,eAAe,CAAC,cAAc,GAAG,cAAM;gBACnC,EAAE,IAAI,EAAE,yDAAW,EAAE;gBACrB,EAAE,IAAI,EAAE,6DAAe,EAAE;aAC5B,EAHsC,CAGtC,CAAC;YACF;;;;;eAKG;YACH;gBAAwB,6BAAU;gBAC9B,gFAAgF;gBAChF,qCAAqC;gBACrC;;;mBAGG;gBACH,mBAAY,QAAQ,EAAE,QAAQ;2BAC1B,kBAAM,QAAQ,EAAE,QAAQ,CAAC;gBAC7B,CAAC;gBACL,gBAAC;YAAD,CAAC,CAVuB,UAAU,GAUjC;YACD,SAAS,CAAC,UAAU,GAAG;gBACnB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,aAAa;4BACvB,MAAM,EAAE,CAAC,2BAA2B,EAAE,qBAAqB,CAAC;yBAC/D,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,SAAS,CAAC,cAAc,GAAG,cAAM;gBAC7B,EAAE,IAAI,EAAE,yDAAW,EAAE;gBACrB,EAAE,IAAI,EAAE,6DAAe,EAAE;aAC5B,EAHgC,CAGhC,CAAC;YACF;;;eAGG;YACH;gBACI;;mBAEG;gBACH,uBAAY,cAAc;oBACtB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;oBACrC,aAAa,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBAC9C,CAAC;gBACD;;mBAEG;gBACH,mCAAW,GAAX;oBACI,+EAA+E;oBAC/E,gFAAgF;oBAChF,IAAI,aAAa,CAAC,oBAAoB,KAAK,IAAI,EAAE;wBAC7C,aAAa,CAAC,oBAAoB,GAAG,IAAI,CAAC;qBAC7C;gBACL,CAAC;gBACL,oBAAC;YAAD,CAAC;YACD;;;;;;eAMG;YACH,aAAa,CAAC,oBAAoB,GAAG,IAAI,CAAC;YAC1C,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,iBAAiB,EAAE,EAAE,EAAE;aAChE,CAAC;YACF,kBAAkB;YAClB,aAAa,CAAC,cAAc,GAAG,cAAM;gBACjC,EAAE,IAAI,EAAE,8DAAgB,EAAE;aAC7B,EAFoC,CAEpC,CAAC;YACF;;eAEG;YACH;gBAAA;gBACA,CAAC;gBAAD,mBAAC;YAAD,CAAC;YACD,YAAY,CAAC,UAAU,GAAG;gBACtB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,oCAAoC;4BAC7D,QAAQ,EAAE,gBAAgB;4BAC1B,IAAI,EAAE;gCACF,OAAO,EAAE,gBAAgB;gCACzB,MAAM,EAAE,KAAK;6BAChB;4BACD,+FAA+F;4BAC/F,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;4BAChD,aAAa,EAAE,+DAAiB,CAAC,IAAI;yBACxC,EAAE,EAAE;aAChB,CAAC;YACF;;eAEG;YACH;gBAAA;gBACA,CAAC;gBAAD,mBAAC;YAAD,CAAC;YACD,YAAY,CAAC,UAAU,GAAG;gBACtB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,oCAAoC;4BAC7D,QAAQ,EAAE,gBAAgB;4BAC1B,IAAI,EAAE;gCACF,OAAO,EAAE,gBAAgB;gCACzB,MAAM,EAAE,KAAK;6BAChB;4BACD,+FAA+F;4BAC/F,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;4BAChD,aAAa,EAAE,+DAAiB,CAAC,IAAI;yBACxC,EAAE,EAAE;aAChB,CAAC;YACF;;eAEG;YACH;gBAAA;gBACA,CAAC;gBAAD,aAAC;YAAD,CAAC;YACD,MAAM,CAAC,UAAU,GAAG;gBAChB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,sBAAsB;4BAC/C,QAAQ,EAAE,gBAAgB;4BAC1B,IAAI,EAAE;gCACF,OAAO,EAAE,SAAS;gCAClB,MAAM,EAAE,KAAK;6BAChB;4BACD,+FAA+F;4BAC/F,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;4BAChD,aAAa,EAAE,+DAAiB,CAAC,IAAI;yBACxC,EAAE,EAAE;aAChB,CAAC;YAEF;;;eAGG;YAEH;;;;eAIG;YACH,IAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAC7D;;;eAGG;YACH;gBACI;;;;;;;;mBAQG;gBACH,sBAAY,kBAAkB,EAAE,aAAa,EAAE,SAAS,EAAE,UAAiB;oBAAjB,8CAAiB;oBACvE,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;oBAC7C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;oBACnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBACjC,CAAC;gBACD;;;;;;mBAMG;gBACH,6CAAsB,GAAtB,UAAuB,IAAI,EAAE,gBAAgB;oBACzC,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;wBAAnB,IAAM,GAAG;wBACV,gEAAgE;wBAChE,2DAA2D;wBAC3D,IAAI,GAAG,CAAC,QAAQ,KAAK,GAAG,CAAC,YAAY,EAAE;4BACnC,SAAS;yBACZ;wBACD,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;wBAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BAC1C,gBAAgB;4BAChB,IAAM,IAAI,GAAG,EAAC,gBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAClD,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;yBACnD;qBACJ;gBACL,CAAC;gBACD;;;;;;;;;mBASG;gBACH,0CAAmB,GAAnB,UAAoB,IAAI,EAAE,iBAAiB,EAAE,eAAe;oBACxD,gBAAgB;oBAChB,IAAM,gBAAgB,GAAG,iBAAiB,CAAC,IAAI,CAAC,EAAC;;;uBAIjD,UAJiD;;;uBAG9C,CACH,KAAK,IAAI,YAAK,EAAL,CAAK,CAAC,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,EAAC;;;uBAI1C,UAJ0C;;;uBAGvC,CACH,KAAK,IAAI,YAAK,EAAL,CAAK,CAAC,CAAC,CAAC;oBACjB,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;wBACvD,OAAO;qBACV;oBACD,gBAAgB;oBAChB,IAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACzB,gBAAgB;oBAChB,IAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAC1C,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;oBACjD,gBAAgB;oBAChB,IAAM,cAAc,GAAG,IAAI,CAAC,8BAA8B,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;oBAC1F,gBAAgB;oBAChB,IAAM,YAAY,GAAG,IAAI,CAAC,4BAA4B,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;oBACpF,gBAAgB;oBAChB,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;oBACvC,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;wBAAnB,IAAM,GAAG;wBACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;4BAC/B,gBAAgB;4BAChB,IAAM,IAAI,GAAG,EAAC,gBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAClD,IAAI,iBAAiB,CAAC,CAAC,CAAC,EAAE;gCACtB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC3E;4BACD,IAAI,eAAe,CAAC,CAAC,CAAC,EAAE;gCACpB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;6BACzE;yBACJ;qBACJ;gBACL,CAAC;gBACD;;;;;;;;;;;mBAWG;gBACH,gCAAS,GAAT,UAAU,WAAW,EAAE,YAAY,EAAE,QAAQ;oBACzC,mFAAmF;oBACnF,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;wBAClB,OAAO;qBACV;oBACD,wFAAwF;oBACxF,yEAAyE;oBACzE,gBAAgB;oBAChB,IAAM,IAAI,GAAG,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;oBACzE,gBAAgB;oBAChB,IAAI,YAAY,GAAG,CAAC,CAAC;oBACrB,KAAK,IAAI,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE;wBACvD,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;4BACzB,SAAS;yBACZ;wBACD,gBAAgB;wBAChB,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAC3B,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gCAC1C,gBAAgB;gCAChB,IAAM,IAAI,GAAG,EAAC,gBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCAClD,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;6BACtD;yBACJ;6BACI;4BACD,4FAA4F;4BAC5F,4FAA4F;4BAC5F,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;yBACrD;wBACD,IAAI,QAAQ,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;4BAC9B,0DAA0D;4BAC1D,OAAO;yBACV;wBACD,YAAY,IAAI,GAAG,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAC;qBACtD;gBACL,CAAC;gBACD;;;;;;;;mBAQG;gBACH,kDAA2B,GAA3B,UAA4B,YAAY,EAAE,YAAY;oBAClD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;wBAC1B,OAAO;qBACV;oBACD,gBAAgB;oBAChB,IAAM,KAAK,GAAG,EAAC,gBAAiB,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBACvE,IAAI,YAAY,CAAC,IAAI,CAAC,EAAC;;;uBAIvB,UAJuB;;;uBAGpB,CACH,KAAK,IAAI,QAAC,KAAK,EAAN,CAAM,CAAC,CAAC,EAAE;wBACf,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;qBAC9C;yBACI;wBACD,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;qBAC5C;gBACL,CAAC;gBACD;;;;;;;mBAOG;gBACH,yCAAkB,GAAlB,UAAmB,OAAO,EAAE,gBAAgB;oBACxC,KAAkB,UAAgB,EAAhB,qCAAgB,EAAhB,8BAAgB,EAAhB,IAAgB,EAAE;wBAA/B,IAAM,GAAG;wBACV,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;qBAC3B;oBACD,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;oBAC1D,yFAAyF;oBACzF,wBAAwB;oBACxB,gBAAgB;oBAChB,IAAM,YAAY,GAAG,iBAAiB,CAAC,IAAI,CAAC,EAAC;;;uBAI7C,UAJ6C;;;uBAG1C,CACH,GAAG,IAAI,QAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAApB,CAAoB,CAAC,CAAC,CAAC;oBAC9B,IAAI,CAAC,YAAY,EAAE;wBACf,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC;wBAC5B,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;qBAChD;gBACL,CAAC;gBACD;;;;;;;;mBAQG;gBACH,sCAAe,GAAf,UAAgB,OAAO,EAAE,GAAG,EAAE,QAAQ;oBAClC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC1C,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAM,QAAQ,OAAI,CAAC;oBACrC,OAAO,CAAC,KAAK,CAAC,OAAO,IAAI,8CAA8C,CAAC;oBACxE,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;gBAC9D,CAAC;gBACD;;;;;;;;;;;;mBAYG;gBACH,2CAAoB,GAApB,UAAqB,OAAO;oBACxB,gBAAgB;oBAChB,IAAM,gBAAgB,GAAG;wBACrB,GAAG,EAAE,GAAG;wBACR,MAAM,EAAE,EAAE;wBACV,IAAI,EAAE,CAAC;wBACP,KAAK,EAAE,CAAC;qBACX,CAAC;oBACF,gBAAgB;oBAChB,IAAI,MAAM,GAAG,CAAC,CAAC;oBACf,KAAkB,UAAiB,EAAjB,uCAAiB,EAAjB,+BAAiB,EAAjB,IAAiB,EAAE;wBAAhC,IAAM,GAAG;wBACV,IAAI,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;4BACpB,MAAM,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;yBACnC;qBACJ;oBACD,OAAO,MAAM,CAAC,CAAC,CAAC,KAAG,MAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;gBACrC,CAAC;gBACD;;;;mBAIG;gBACH,qCAAc,GAAd,UAAe,GAAG;oBACd,gBAAgB;oBAChB,IAAM,UAAU,GAAG,EAAE,CAAC;oBACtB,gBAAgB;oBAChB,IAAM,aAAa,GAAG,GAAG,CAAC,QAAQ,CAAC;oBACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC3C,gBAAgB;wBAChB,IAAI,IAAI,GAAG,EAAC,gBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjD,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC,CAAC;qBACvD;oBACD,OAAO,UAAU,CAAC;gBACtB,CAAC;gBACD;;;;;;;mBAOG;gBACH,qDAA8B,GAA9B,UAA+B,MAAM,EAAE,YAAY;oBAC/C,gBAAgB;oBAChB,IAAM,SAAS,GAAG,EAAE,CAAC;oBACrB,gBAAgB;oBAChB,IAAI,YAAY,GAAG,CAAC,CAAC;oBACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACpC,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;4BACjB,SAAS,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;4BAC5B,YAAY,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;yBAC7B;qBACJ;oBACD,OAAO,SAAS,CAAC;gBACrB,CAAC;gBACD;;;;;;;mBAOG;gBACH,mDAA4B,GAA5B,UAA6B,MAAM,EAAE,YAAY;oBAC7C,gBAAgB;oBAChB,IAAM,SAAS,GAAG,EAAE,CAAC;oBACrB,gBAAgB;oBAChB,IAAI,YAAY,GAAG,CAAC,CAAC;oBACrB,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;wBACpC,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;4BACjB,SAAS,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;4BAC5B,YAAY,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;yBAC7B;qBACJ;oBACD,OAAO,SAAS,CAAC;gBACrB,CAAC;gBACL,mBAAC;YAAD,CAAC;YAED;;;eAGG;YAEH;;;;;eAKG;YACH,SAAS,0BAA0B,CAAC,EAAE;gBAClC,OAAO,KAAK,CAAC,qCAAkC,EAAE,QAAI,CAAC,CAAC;YAC3D,CAAC;YACD;;;;;eAKG;YACH,SAAS,gCAAgC,CAAC,IAAI;gBAC1C,OAAO,KAAK,CAAC,kDAA+C,IAAI,QAAI,CAAC,CAAC;YAC1E,CAAC;YACD;;;;eAIG;YACH,SAAS,mCAAmC;gBACxC,OAAO,KAAK,CAAC,sEAAsE,CAAC,CAAC;YACzF,CAAC;YACD;;;;;eAKG;YACH,SAAS,kCAAkC,CAAC,IAAI;gBAC5C,OAAO,KAAK,CAAC,kDAAkD;qBAC3D,wBAAsB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAG,EAAC,CAAC;YACtD,CAAC;YACD;;;;eAIG;YACH,SAAS,2BAA2B;gBAChC,OAAO,KAAK,CAAC,mDAAmD;oBAC5D,oDAAoD,CAAC,CAAC;YAC9D,CAAC;YACD;;;;eAIG;YACH,SAAS,8BAA8B;gBACnC,OAAO,KAAK,CAAC,wEAAwE,CAAC,CAAC;YAC3F,CAAC;YACD;;;;eAIG;YACH,SAAS,yCAAyC;gBAC9C,OAAO,KAAK,CAAC,6DAA6D,CAAC,CAAC;YAChF,CAAC;YACD;;;;eAIG;YACH,SAAS,kCAAkC;gBACvC,OAAO,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACxD,CAAC;YAED;;;eAGG;YACH;;;eAGG;YACH;gBACI;;;mBAGG;gBACH,uBAAY,aAAa,EAAE,UAAU;oBACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;oBACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBACjC,CAAC;gBACL,oBAAC;YAAD,CAAC;YACD,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,EAAE,EAAE;aAC5D,CAAC;YACF,kBAAkB;YAClB,aAAa,CAAC,cAAc,GAAG,cAAM;gBACjC,EAAE,IAAI,EAAE,8DAAgB,EAAE;gBAC1B,EAAE,IAAI,EAAE,wDAAU,EAAE;aACvB,EAHoC,CAGpC,CAAC;YACF;;;eAGG;YACH;gBACI;;;mBAGG;gBACH,yBAAY,aAAa,EAAE,UAAU;oBACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;oBACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBACjC,CAAC;gBACL,sBAAC;YAAD,CAAC;YACD,eAAe,CAAC,UAAU,GAAG;gBACzB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE,EAAE,EAAE;aAClE,CAAC;YACF,kBAAkB;YAClB,eAAe,CAAC,cAAc,GAAG,cAAM;gBACnC,EAAE,IAAI,EAAE,8DAAgB,EAAE;gBAC1B,EAAE,IAAI,EAAE,wDAAU,EAAE;aACvB,EAHsC,CAGtC,CAAC;YACF;;;eAGG;YACH;gBACI;;;mBAGG;gBACH,yBAAY,aAAa,EAAE,UAAU;oBACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;oBACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBACjC,CAAC;gBACL,sBAAC;YAAD,CAAC;YACD,eAAe,CAAC,UAAU,GAAG;gBACzB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE,EAAE,EAAE;aAClE,CAAC;YACF,kBAAkB;YAClB,eAAe,CAAC,cAAc,GAAG,cAAM;gBACnC,EAAE,IAAI,EAAE,8DAAgB,EAAE;gBAC1B,EAAE,IAAI,EAAE,wDAAU,EAAE;aACvB,EAHsC,CAGtC,CAAC;YACF;;;;;eAKG;YACH,IAAM,kBAAkB;YACxB,yFAAyF;YACzF,8FAA8F;YAC9F,iMAKC,CAAC;YACF;;;;;;eAMG;YACH;gBACI;;;;;;;;mBAQG;gBACH,kBAAY,QAAQ,EAAE,kBAAkB,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS;oBACnF,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;oBAC7C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;oBAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B;;uBAEG;oBACH,IAAI,CAAC,UAAU,GAAG,IAAI,4CAAO,EAAE,CAAC;oBAChC;;;;uBAIG;oBACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;oBACnC;;;;uBAIG;oBACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;oBACnC;;;;uBAIG;oBACH,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;oBAChC;;;;uBAIG;oBACH,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,EAAE,CAAC;oBACtC;;;;uBAIG;oBACH,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,EAAE,CAAC;oBACtC;;;uBAGG;oBACH,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;oBACjC;;;uBAGG;oBACH,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;oBACjC;;;;;;;;;;;;uBAYG;oBACH,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,EAAE,CAAC;oBACtC;;;uBAGG;oBACH,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC;oBACzC,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;oBACpC,wDAAwD;oBACxD,uDAAuD;oBACvD;;;;;uBAKG;oBACH,IAAI,CAAC,UAAU,GAAG,IAAI,oDAAe,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;oBAC3E,IAAI,CAAC,IAAI,EAAE;wBACP,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;qBAC/D;oBACD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,KAAK,OAAO,CAAC;gBAClF,CAAC;gBAQD,sBAAI,6BAAO;oBAPX;;;;;;uBAMG;yBACH;wBACI,OAAO,IAAI,CAAC,UAAU,CAAC;oBAC3B,CAAC;oBACD;;;uBAGG;yBACH,UAAY,EAAE;wBACV,IAAI,+DAAS,EAAE,IAAI,EAAE,IAAI,IAAI,IAAI,OAAO,EAAE,KAAK,UAAU,IAAI,EAAC,gBAAiB,CAAC,OAAO,CAAC,CAAC;4BACrF,EAAC,gBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE;4BACnC,OAAO,CAAC,IAAI,CAAC,8CAA4C,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAG,CAAC,CAAC;yBACnF;wBACD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;oBACzB,CAAC;;;mBAXA;gBAiCD,sBAAI,gCAAU;oBArBd;;;;;;;;;;;;;;;;;;;;uBAoBG;yBACH;wBACI,OAAO,IAAI,CAAC,WAAW,CAAC;oBAC5B,CAAC;oBACD;;;uBAGG;yBACH,UAAe,UAAU;wBACrB,IAAI,IAAI,CAAC,WAAW,KAAK,UAAU,EAAE;4BACjC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;yBACtC;oBACL,CAAC;;;mBATA;gBAiBD,sBAAI,2CAAqB;oBAPzB;;;;;;uBAMG;yBACH;wBACI,OAAO,IAAI,CAAC,sBAAsB,CAAC;oBACvC,CAAC;oBACD;;;uBAGG;yBACH,UAA0B,CAAC;wBACvB,IAAI,CAAC,sBAAsB,GAAG,mFAAqB,CAAC,CAAC,CAAC,CAAC;wBACvD,2FAA2F;wBAC3F,2FAA2F;wBAC3F,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,EAAE;4BACzD,IAAI,CAAC,oBAAoB,EAAE,CAAC;yBAC/B;oBACL,CAAC;;;mBAZA;gBAaD;;mBAEG;gBACH,2BAAQ,GAAR;oBAAA,iBAgBC;oBAfG,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,IAAI,IAAI,CAAC,kBAAkB,EAAE;wBACzB,IAAI,CAAC,yBAAyB,EAAE,CAAC;qBACpC;oBACD,6FAA6F;oBAC7F,0FAA0F;oBAC1F,uDAAuD;oBACvD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,EAAC;;;;uBAKlD,UAAC,EAAE,EAAE,OAAO;wBACR,OAAO,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;oBAClF,CAAC,CAAC,CAAC,CAAC;gBACR,CAAC;gBACD;;mBAEG;gBACH,wCAAqB,GAArB;oBACI,+FAA+F;oBAC/F,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBACxB,8EAA8E;oBAC9E,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACrF,MAAM,2BAA2B,EAAE,CAAC;qBACvC;oBACD,+FAA+F;oBAC/F,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC7B,qFAAqF;oBACrF,IAAI,IAAI,CAAC,oBAAoB,EAAE;wBAC3B,IAAI,CAAC,sBAAsB,EAAE,CAAC;wBAC9B,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;qBACrC;oBACD,qFAAqF;oBACrF,IAAI,IAAI,CAAC,oBAAoB,EAAE;wBAC3B,IAAI,CAAC,sBAAsB,EAAE,CAAC;wBAC9B,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;qBACrC;oBACD,qFAAqF;oBACrF,oCAAoC;oBACpC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;wBAChF,IAAI,CAAC,qBAAqB,EAAE,CAAC;qBAChC;oBACD,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC9B,CAAC;gBACD;;mBAEG;gBACH,8BAAW,GAAX;oBACI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;oBACtC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;oBAC5C,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;oBAC5C,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAAC;oBAClC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;oBACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;oBAC3B,IAAI,6EAAY,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;wBAC/B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;qBACpC;gBACL,CAAC;gBACD;;;;;;;;;;mBAUG;gBACH,6BAAU,GAAV;oBAAA,iBA0CC;oBAzCG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBAC5C,gBAAgB;oBAChB,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACxD,IAAI,CAAC,OAAO,EAAE;wBACV,OAAO;qBACV;oBACD,gBAAgB;oBAChB,IAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;oBACpD,OAAO,CAAC,gBAAgB,CAAC,EAAC;;;;;uBAM1B,UAAC,MAAM,EAAE,SAAS,EAAE,YAAY;wBAC5B,IAAI,MAAM,CAAC,aAAa,IAAI,IAAI,EAAE;4BAC9B,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,gBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;yBACnE;6BACI,IAAI,YAAY,IAAI,IAAI,EAAE;4BAC3B,aAAa,CAAC,MAAM,CAAC,EAAC,gBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;yBACxD;6BACI;4BACD,gBAAgB;4BAChB,IAAM,IAAI,GAAG,EAAC,gBAAiB,CAAC,aAAa,CAAC,GAAG,CAAC,EAAC,gBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACpF,aAAa,CAAC,IAAI,CAAC,EAAC,gBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;yBAC/D;oBACL,CAAC,CAAC,CAAC,CAAC;oBACJ,mFAAmF;oBACnF,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAC9B,4FAA4F;oBAC5F,uFAAuF;oBACvF,OAAO,CAAC,qBAAqB,CAAC,EAAC;;;uBAI/B,UAAC,MAAM;wBACH,gBAAgB;wBAChB,IAAM,OAAO,GAAG,EAAC,gBAAiB,CAAC,aAAa,CAAC,GAAG,CAAC,EAAC,gBAAiB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjG,OAAO,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;oBACjD,CAAC,CAAC,CAAC,CAAC;oBACJ,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBACpC,CAAC;gBACD;;;;;;;;;mBASG;gBACH,kCAAe,GAAf,UAAgB,YAAY;oBACxB,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACpD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACrC,CAAC;gBACD;;;;;;;;;mBASG;gBACH,kCAAe,GAAf,UAAgB,YAAY;oBACxB,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACpD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACrC,CAAC;gBACD;;;;mBAIG;gBACH,+BAAY,GAAZ,UAAa,SAAS;oBAClB,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC1C,CAAC;gBACD;;;;mBAIG;gBACH,kCAAe,GAAf,UAAgB,SAAS;oBACrB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC7C,CAAC;gBACD;;;;mBAIG;gBACH,4BAAS,GAAT,UAAU,MAAM;oBACZ,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACpC,CAAC;gBACD;;;;mBAIG;gBACH,+BAAY,GAAZ,UAAa,MAAM;oBACf,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACvC,CAAC;gBACD;;;;mBAIG;gBACH,kCAAe,GAAf,UAAgB,YAAY;oBACxB,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;oBAC5C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACrC,CAAC;gBACD;;;;mBAIG;gBACH,qCAAkB,GAAlB,UAAmB,YAAY;oBAC3B,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;oBAC/C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACrC,CAAC;gBACD;;;;mBAIG;gBACH,kCAAe,GAAf,UAAgB,YAAY;oBACxB,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;oBAC5C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACrC,CAAC;gBACD;;;;mBAIG;gBACH,qCAAkB,GAAlB,UAAmB,YAAY;oBAC3B,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;oBAC/C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACrC,CAAC;gBACD;;;;;;;mBAOG;gBACH,8CAA2B,GAA3B;oBACI,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;oBAChE,gBAAgB;oBAChB,IAAM,YAAY,GAAG,EAAC,gBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;oBACzE,mFAAmF;oBACnF,sFAAsF;oBACtF,wBAAwB;oBACxB,gBAAgB;oBAChB,IAAM,KAAK,GAAG,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;oBAClD,IAAI,KAAK,EAAE;wBACP,KAAK,CAAC,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;qBACzD;oBACD,gBAAgB;oBAChB,IAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC;;;uBAI9C,UAJ8C;;;uBAG3C,CACH,GAAG,IAAI,UAAG,CAAC,MAAM,EAAV,CAAU,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC/D,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,UAAU,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;oBAC9D,2EAA2E;oBAC3E,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAC;;;uBAI7B,UAJ6B;;;uBAG1B,CACH,GAAG,IAAI,UAAG,CAAC,kBAAkB,EAAE,EAAxB,CAAwB,CAAC,CAAC,CAAC;gBACtC,CAAC;gBACD;;;;;;;mBAOG;gBACH,8CAA2B,GAA3B;oBACI,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;oBAChE,gBAAgB;oBAChB,IAAM,YAAY,GAAG,EAAC,gBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;oBACzE,mFAAmF;oBACnF,sFAAsF;oBACtF,wBAAwB;oBACxB,gBAAgB;oBAChB,IAAM,KAAK,GAAG,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;oBAClD,IAAI,KAAK,EAAE;wBACP,KAAK,CAAC,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;qBACzD;oBACD,gBAAgB;oBAChB,IAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC;;;uBAI9C,UAJ8C;;;uBAG3C,CACH,GAAG,IAAI,UAAG,CAAC,MAAM,EAAV,CAAU,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAClE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,UAAU,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;oBACjE,IAAI,CAAC,aAAa,CAAC,2BAA2B,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;oBAC7F,2EAA2E;oBAC3E,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAC;;;uBAI7B,UAJ6B;;;uBAG1B,CACH,GAAG,IAAI,UAAG,CAAC,kBAAkB,EAAE,EAAxB,CAAwB,CAAC,CAAC,CAAC;gBACtC,CAAC;gBACD;;;;;;;mBAOG;gBACH,2CAAwB,GAAxB;oBAAA,iBAkDC;oBAjDG,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;oBAChE,gBAAgB;oBAChB,IAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACxD,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;oBAChE,2FAA2F;oBAC3F,uEAAuE;oBACvE,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAK,UAAU,QAAK,QAAQ,EAAK,UAAU,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;oBAC1G,mFAAmF;oBACnF,UAAU,CAAC,OAAO,CAAC,EAAC;;;;uBAKpB,UAAC,SAAS,EAAE,CAAC;wBACT,KAAI,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,EAAE,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrE,CAAC,CAAC,CAAC,CAAC;oBACJ,iFAAiF;oBACjF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAC;;;uBAIvB,UAJuB;;;uBAGpB,CACH,MAAM;wBACF,0DAA0D;wBAC1D,gBAAgB;wBAChB,IAAM,IAAI,GAAG,EAAE,CAAC;wBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACtC,IAAI,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,EAAE;gCACvC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC1B;yBACJ;wBACD,KAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAC9C,CAAC,CAAC,CAAC,CAAC;oBACJ,mFAAmF;oBACnF,UAAU,CAAC,OAAO,CAAC,EAAC;;;;uBAKpB,UAAC,SAAS,EAAE,CAAC;wBACT,KAAI,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,EAAE,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrE,CAAC,CAAC,CAAC,CAAC;oBACJ,2EAA2E;oBAC3E,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,EAAC;;;uBAIrD,UAJqD;;;uBAGlD,CACH,GAAG,IAAI,UAAG,CAAC,kBAAkB,EAAE,EAAxB,CAAwB,CAAC,CAAC,CAAC;gBACtC,CAAC;gBACD;;;;;;mBAMG;gBACH,oCAAiB,GAAjB;oBACI,gBAAgB;oBAChB,IAAM,UAAU,GAAG,EAAE,CAAC;oBACtB,6FAA6F;oBAC7F,sEAAsE;oBACtE,gBAAgB;oBAChB,IAAM,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;oBACvD,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,EAAE,CAAC;oBACtC,yFAAyF;oBACzF,6EAA6E;oBAC7E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACxC,gBAAgB;wBAChB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACzB,gBAAgB;wBAChB,IAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC,EAAE,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC9F,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;4BACtC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,OAAO,EAAE,CAAC,CAAC;yBACtD;wBACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BAC/C,gBAAgB;4BAChB,IAAI,SAAS,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;4BACrC,gBAAgB;4BAChB,IAAM,KAAK,GAAG,EAAC,gBAAiB,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACjF,IAAI,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;gCAC7B,EAAC,gBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;6BACpE;iCACI;gCACD,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;6BAC5C;4BACD,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;yBAC9B;qBACJ;oBACD,OAAO,UAAU,CAAC;gBACtB,CAAC;gBACD;;;;;;;;;mBASG;gBACH,wCAAqB,GAArB,UAAsB,IAAI,EAAE,SAAS,EAAE,KAAK;oBACxC,gBAAgB;oBAChB,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;oBAClD,OAAO,OAAO,CAAC,GAAG,CAAC,EAAC;;;uBAIpB,UAJoB;;;uBAGjB,CACH,MAAM;wBACF,gBAAgB;wBAChB,IAAM,gBAAgB,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,gBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;wBACpG,IAAI,gBAAgB,CAAC,MAAM,EAAE;4BACzB,gBAAgB;4BAChB,IAAM,OAAO,GAAG,EAAC,gBAAiB,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;4BAC9D,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;4BAC9B,OAAO,OAAO,CAAC;yBAClB;6BACI;4BACD,OAAO,EAAE,IAAI,QAAE,MAAM,UAAE,SAAS,aAAE,CAAC;yBACtC;oBACL,CAAC,CAAC,CAAC,CAAC;gBACR,CAAC;gBACD;;;;mBAIG;gBACH,mCAAgB,GAAhB;oBAAA,iBAcC;oBAbG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;oBAC/B,gBAAgB;oBAChB,IAAM,UAAU,GAAG,oBAAoB,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBACzF,UAAU,CAAC,OAAO,CAAC,EAAC;;;uBAIpB,UAJoB;;;uBAGjB,CACH,SAAS;wBACL,IAAI,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;4BAC5C,MAAM,gCAAgC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;yBAC1D;wBACD,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;oBAC1D,CAAC,CAAC,CAAC,CAAC;gBACR,CAAC;gBACD;;;;mBAIG;gBACH,gCAAa,GAAb;oBACI,IAAI,CAAC,cAAc;wBACf,oBAAoB,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;oBAChF,IAAI,CAAC,cAAc;wBACf,oBAAoB,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;oBAChF,IAAI,CAAC,QAAQ,GAAG,oBAAoB,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;oBAChF,8FAA8F;oBAC9F,gBAAgB;oBAChB,IAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAC;;;uBAI7C,UAJ6C;;;uBAG1C,CACH,GAAG,IAAI,QAAC,GAAG,CAAC,IAAI,EAAT,CAAS,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,IAAI,CAAC,qBAAqB,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC1D,MAAM,mCAAmC,EAAE,CAAC;qBAC/C;oBACD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC5C,CAAC;gBACD;;;;;;mBAMG;gBACH,wCAAqB,GAArB;oBACI,gBAAgB;oBAChB,IAAM,kBAAkB,GAAG,EAAC;;;;uBAK5B,UAAC,GAAG,EAAE,GAAG,IAAK,UAAG,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,EAA7B,CAA6B,CAAC,CAAC;oBAC7C,4EAA4E;oBAC5E,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE;wBACjD,IAAI,CAAC,oBAAoB,EAAE,CAAC;qBAC/B;oBACD,sFAAsF;oBACtF,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE;wBACvD,IAAI,CAAC,sBAAsB,EAAE,CAAC;qBACjC;oBACD,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE;wBACvD,IAAI,CAAC,sBAAsB,EAAE,CAAC;qBACjC;gBACL,CAAC;gBACD;;;;;;;mBAOG;gBACH,oCAAiB,GAAjB,UAAkB,UAAU;oBACxB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;oBAChB,IAAI,6EAAY,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;wBAC/B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;qBACpC;oBACD,yDAAyD;oBACzD,IAAI,IAAI,CAAC,yBAAyB,EAAE;wBAChC,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;wBAC7C,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;qBACzC;oBACD,IAAI,CAAC,UAAU,EAAE;wBACb,IAAI,IAAI,CAAC,WAAW,EAAE;4BAClB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;yBAC7B;wBACD,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;qBACzC;oBACD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;gBAClC,CAAC;gBACD;;;;mBAIG;gBACH,wCAAqB,GAArB;oBAAA,iBA2BC;oBA1BG,2EAA2E;oBAC3E,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;wBAClB,OAAO;qBACV;oBACD,gBAAgB;oBAChB,IAAI,UAAU,CAAC;oBACf,IAAI,6EAAY,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;wBAC/B,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;qBAC9C;yBACI,IAAI,IAAI,CAAC,UAAU,YAAY,+CAAU,EAAE;wBAC5C,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;qBAChC;yBACI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;wBACrC,UAAU,GAAG,+CAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;qBACpC;oBACD,IAAI,UAAU,KAAK,SAAS,EAAE;wBAC1B,MAAM,8BAA8B,EAAE,CAAC;qBAC1C;oBACD,IAAI,CAAC,yBAAyB,GAAG,UAAU,CAAC,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,EAAC;;;uBAIxF,UAJwF;;;uBAGrF,CACH,IAAI;wBACA,KAAI,CAAC,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;wBACxB,KAAI,CAAC,UAAU,EAAE,CAAC;oBACtB,CAAC,CAAC,CAAC,CAAC;gBACR,CAAC;gBACD;;;;;mBAKG;gBACH,yCAAsB,GAAtB;oBAAA,iBAaC;oBAZG,qDAAqD;oBACrD,IAAI,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;wBAChD,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;qBAC/C;oBACD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAC;;;;uBAK7B,UAAC,GAAG,EAAE,CAAC,IAAK,YAAI,CAAC,UAAU,CAAC,KAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,CAAC,EAA9C,CAA8C,CAAC,CAAC,CAAC;oBAC7D,IAAI,CAAC,2BAA2B,EAAE,CAAC;oBACnC,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBACpC,CAAC;gBACD;;;;;mBAKG;gBACH,yCAAsB,GAAtB;oBAAA,iBAaC;oBAZG,qDAAqD;oBACrD,IAAI,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;wBAChD,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;qBAC/C;oBACD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAC;;;;uBAK7B,UAAC,GAAG,EAAE,CAAC,IAAK,YAAI,CAAC,UAAU,CAAC,KAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,CAAC,EAA9C,CAA8C,CAAC,CAAC,CAAC;oBAC7D,IAAI,CAAC,2BAA2B,EAAE,CAAC;oBACnC,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBACpC,CAAC;gBACD;;;;;;mBAMG;gBACH,yCAAsB,GAAtB,UAAuB,IAAI,EAAE,MAAM;oBAAnC,iBA2BC;oBA1BG,gBAAgB;oBAChB,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,EAAC;;;uBAIzD,UAJyD;;;uBAGtD,CACH,UAAU;wBACN,gBAAgB;wBAChB,IAAM,SAAS,GAAG,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;wBACzD,IAAI,CAAC,SAAS,EAAE;4BACZ,MAAM,0BAA0B,CAAC,UAAU,CAAC,CAAC;yBAChD;wBACD,OAAO,EAAC,gBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC,CAAC;oBACJ,gBAAgB;oBAChB,IAAM,iBAAiB,GAAG,UAAU,CAAC,GAAG,CAAC,EAAC;;;uBAI1C,UAJ0C;;;uBAGvC,CACH,SAAS,IAAI,gBAAS,CAAC,MAAM,EAAhB,CAAgB,CAAC,CAAC,CAAC;oBAChC,gBAAgB;oBAChB,IAAM,eAAe,GAAG,UAAU,CAAC,GAAG,CAAC,EAAC;;;uBAIxC,UAJwC;;;uBAGrC,CACH,SAAS,IAAI,gBAAS,CAAC,SAAS,EAAnB,CAAmB,CAAC,CAAC,CAAC;oBACnC,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,EAAE,iBAAiB,EAAE,eAAe,CAAC,CAAC;gBACrF,CAAC;gBACD;;;;mBAIG;gBACH,mCAAgB,GAAhB,UAAiB,SAAS;oBACtB,gBAAgB;oBAChB,IAAM,YAAY,GAAG,EAAE,CAAC;oBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACrD,gBAAgB;wBAChB,IAAM,OAAO,GAAG,CAAC,EAAC,gBAAiB,CAAC,EAAC,gBAAiB,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC3F,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC3C;oBACD,OAAO,YAAY,CAAC;gBACxB,CAAC;gBACD;;;;;;;;mBAQG;gBACH,8BAAW,GAAX,UAAY,IAAI,EAAE,SAAS;oBACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;wBAC3B,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC7B;oBACD,gBAAgB;oBAChB,IAAI,OAAO,GAAG,EAAE,CAAC;oBACjB,IAAI,IAAI,CAAC,qBAAqB,EAAE;wBAC5B,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAC;;;2BAIhC,UAJgC;;;2BAG7B,CACH,GAAG,IAAI,QAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAtC,CAAsC,CAAC,CAAC,CAAC;qBACnD;yBACI;wBACD,gBAAgB;wBAChB,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC;;;2BAIjC,UAJiC;;;2BAG9B,CACH,GAAG,IAAI,UAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAArC,CAAqC,CAAC,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC;wBACtE,IAAI,MAAM,EAAE;4BACR,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;yBACxB;qBACJ;oBACD,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;wBACjB,MAAM,kCAAkC,CAAC,IAAI,CAAC,CAAC;qBAClD;oBACD,OAAO,OAAO,CAAC;gBACnB,CAAC;gBACD;;;;;;;mBAOG;gBACH,6BAAU,GAAV,UAAW,SAAS,EAAE,WAAW;oBAC7B,gBAAgB;oBAChB,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;oBAChC,gBAAgB;oBAChB,IAAM,OAAO,GAAG,EAAE,SAAS,EAAE,SAAS,CAAC,IAAI,EAAE,CAAC;oBAC9C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;gBACnE,CAAC;gBACD;;;;;;;;;;mBAUG;gBACH,6BAAU,GAAV,UAAW,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAY;oBAAZ,sCAAY;oBAC1C,uFAAuF;oBACvF,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;oBACzE,KAAyB,UAA8B,EAA9B,SAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAA9B,cAA8B,EAA9B,IAA8B,EAAE;wBAApD,IAAI,YAAY;wBACjB,IAAI,aAAa,CAAC,oBAAoB,EAAE;4BACpC,aAAa,CAAC,oBAAoB,CAAC,cAAc,CAAC,kBAAkB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;yBAC/F;qBACJ;oBACD,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;gBAC3C,CAAC;gBACD;;;;;mBAKG;gBACH,yCAAsB,GAAtB;oBACI,gBAAgB;oBAChB,IAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;oBACpD,KAAK,IAAI,WAAW,GAAG,CAAC,EAAE,KAAK,GAAG,aAAa,CAAC,MAAM,EAAE,WAAW,GAAG,KAAK,EAAE,WAAW,EAAE,EAAE;wBACxF,gBAAgB;wBAChB,IAAM,OAAO,GAAG,EAAC,gBAAiB,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBACpE,gBAAgB;wBAChB,IAAM,OAAO,GAAG,EAAC,gBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;wBACrD,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;wBACtB,OAAO,CAAC,KAAK,GAAG,WAAW,KAAK,CAAC,CAAC;wBAClC,OAAO,CAAC,IAAI,GAAG,WAAW,KAAK,KAAK,GAAG,CAAC,CAAC;wBACzC,OAAO,CAAC,IAAI,GAAG,WAAW,GAAG,CAAC,KAAK,CAAC,CAAC;wBACrC,OAAO,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;wBAC5B,IAAI,IAAI,CAAC,qBAAqB,EAAE;4BAC5B,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC;4BAC5D,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;yBACrC;6BACI;4BACD,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC;yBAC3D;qBACJ;gBACL,CAAC;gBACD;;;;;mBAKG;gBACH,oCAAiB,GAAjB,UAAkB,MAAM;oBAAxB,iBAgBC;oBAfG,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;wBAC5B,OAAO,EAAE,CAAC;qBACb;oBACD,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAC;;;uBAInC,UAJmC;;;uBAGhC,CACH,QAAQ;wBACJ,gBAAgB;wBAChB,IAAM,MAAM,GAAG,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;wBACpD,IAAI,CAAC,MAAM,EAAE;4BACT,MAAM,0BAA0B,CAAC,QAAQ,CAAC,CAAC;yBAC9C;wBACD,OAAO,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;oBAC9C,CAAC,CAAC,CAAC,CAAC;gBACR,CAAC;gBACD;;;;mBAIG;gBACH,4CAAyB,GAAzB;oBACI,gBAAgB;oBAChB,IAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,sBAAsB,EAAE,CAAC;oBACjE,gBAAgB;oBAChB,IAAM,QAAQ,GAAG;wBACb,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAE;wBAC/C,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE;wBACzC,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAE;qBAClD,CAAC;oBACF,KAAsB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;wBAA3B,IAAM,OAAO;wBACd,gBAAgB;wBAChB,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBAC1D,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;wBACzC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;wBAC7D,gBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;qBACzC;oBACD,oEAAoE;oBACpE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;gBACjE,CAAC;gBACD;;;;;;mBAMG;gBACH,uCAAoB,GAApB;oBACI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBAC1B,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;oBACtC,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBACpC,CAAC;gBACD;;;;;;mBAMG;gBACH,qCAAkB,GAAlB;oBACI,gBAAgB;oBAChB,IAAM,kBAAkB,GAAG,EAAC;;;;uBAK5B,UAAC,GAAG,EAAE,CAAC;wBACH,OAAO,GAAG,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;oBACvC,CAAC,CAAC,CAAC;oBACH,2FAA2F;oBAC3F,0FAA0F;oBAC1F,8DAA8D;oBAC9D,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE;wBACvD,IAAI,CAAC,2BAA2B,EAAE,CAAC;qBACtC;oBACD,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE;wBACvD,IAAI,CAAC,2BAA2B,EAAE,CAAC;qBACtC;oBACD,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE;wBAC/E,IAAI,CAAC,wBAAwB,EAAE,CAAC;qBACnC;gBACL,CAAC;gBACD;;;;;;mBAMG;gBACH,qCAAkB,GAAlB;oBAAA,iBAcC;oBAbG,gBAAgB;oBAChB,IAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;oBACtD,IAAI,CAAC,aAAa,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,cAAc,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;oBACzH,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,+CAAE,EAAE,CAAC;yBAChC,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;yBAChC,SAAS,CAAC,EAAC;;;mBAIhB,UAJgB;;;mBAGb,CACH,KAAK;wBACD,KAAI,CAAC,aAAa,CAAC,SAAS,GAAG,KAAK,CAAC;wBACrC,KAAI,CAAC,wBAAwB,EAAE,CAAC;oBACpC,CAAC,CAAC,CAAC,CAAC;gBACR,CAAC;gBACL,eAAC;YAAD,CAAC;YACD,QAAQ,CAAC,UAAU,GAAG;gBAClB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,6BAA6B;4BACtD,QAAQ,EAAE,UAAU;4BACpB,QAAQ,EAAE,kBAAkB;4BAC5B,IAAI,EAAE;gCACF,OAAO,EAAE,WAAW;6BACvB;4BACD,aAAa,EAAE,+DAAiB,CAAC,IAAI;4BACrC,iGAAiG;4BACjG,8FAA8F;4BAC9F,kFAAkF;4BAClF,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;yBACnD,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,QAAQ,CAAC,cAAc,GAAG,cAAM;gBAC5B,EAAE,IAAI,EAAE,6DAAe,EAAE;gBACzB,EAAE,IAAI,EAAE,+DAAiB,EAAE;gBAC3B,EAAE,IAAI,EAAE,wDAAU,EAAE;gBACpB,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACpE,EAAE,IAAI,EAAE,gEAAc,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,sDAAQ,EAAE,CAAC,EAAE;gBAC1D,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,oDAAM,EAAE,IAAI,EAAE,CAAC,wDAAQ,EAAE,EAAE,CAAC,EAAE;gBACtE,EAAE,IAAI,EAAE,8DAAQ,EAAE;aACrB,EAR+B,CAQ/B,CAAC;YACF,QAAQ,CAAC,cAAc,GAAG;gBACtB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAC1B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAC7B,qBAAqB,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBACxC,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBAC3E,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBACnF,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBACnF,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,6DAAe,EAAE,IAAI,EAAE,CAAC,YAAY,EAAE,EAAE,CAAC;gBACtE,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,6DAAe,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC;gBAChE,qBAAqB,EAAE,CAAC,EAAE,IAAI,EAAE,6DAAe,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,EAAE,CAAC;gBAC5E,qBAAqB,EAAE,CAAC,EAAE,IAAI,EAAE,6DAAe,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,EAAE,CAAC;aAC/E,CAAC;YACF;;;;;;eAMG;YACH,SAAS,oBAAoB,CAAC,SAAS,EAAE,GAAG;gBACxC,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACvD,CAAC;YAED;;;eAGG;YACH;;;eAGG;YACH,IAAM,mBAAmB,GAAG,IAAI,4DAAc,CAAC,qBAAqB,CAAC,CAAC;YACtE;;;;;;;;;eASG;YACH;gBACI;;;mBAGG;gBACH,uBAAY,MAAM,EAAE,QAAQ;oBACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB;;uBAEG;oBACH,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;oBACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;gBACnC,CAAC;gBAKD,sBAAI,+BAAI;oBAJR;;;uBAGG;yBACH;wBACI,OAAO,IAAI,CAAC,KAAK,CAAC;oBACtB,CAAC;oBACD;;;uBAGG;yBACH,UAAS,IAAI;wBACT,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;wBAClB,sEAAsE;wBACtE,gFAAgF;wBAChF,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC9B,CAAC;;;mBAVA;gBAWD;;mBAEG;gBACH,gCAAQ,GAAR;oBACI,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;wBAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;qBACrD;oBACD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;wBACpB,IAAI,CAAC,YAAY;4BACb,IAAI,CAAC,QAAQ,CAAC,mBAAmB,IAAI,CAAC,EAAC;;;;+BAKvC,UAAC,IAAI,EAAE,IAAI,IAAK,QAAC,EAAC,gBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAjC,CAAiC,CAAC,CAAC,CAAC;qBAC3D;oBACD,IAAI,IAAI,CAAC,MAAM,EAAE;wBACb,2FAA2F;wBAC3F,2FAA2F;wBAC3F,yCAAyC;wBACzC,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;wBAChC,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;wBAC5C,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAC5C;yBACI;wBACD,MAAM,yCAAyC,EAAE,CAAC;qBACrD;gBACL,CAAC;gBACD;;mBAEG;gBACH,mCAAW,GAAX;oBACI,IAAI,IAAI,CAAC,MAAM,EAAE;wBACb,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAC/C;gBACL,CAAC;gBACD;;;;mBAIG;gBACH,gDAAwB,GAAxB;oBACI,gBAAgB;oBAChB,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACvB,IAAI,+DAAS,EAAE,IAAI,CAAC,IAAI,EAAE;wBACtB,MAAM,kCAAkC,EAAE,CAAC;qBAC9C;oBACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,0BAA0B,EAAE;wBAC3D,OAAO,IAAI,CAAC,QAAQ,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;qBACzD;oBACD,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjD,CAAC;gBACD;;;;mBAIG;gBACH,0CAAkB,GAAlB;oBACI,IAAI,IAAI,CAAC,SAAS,EAAE;wBAChB,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;qBACnC;gBACL,CAAC;gBACL,oBAAC;YAAD,CAAC;YACD,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,iBAAiB;4BAC1C,QAAQ,EAAE,8SASvB;4BACa,aAAa,EAAE,+DAAiB,CAAC,IAAI;4BACrC,kGAAkG;4BAClG,kGAAkG;4BAClG,+FAA+F;4BAC/F,kGAAkG;4BAClG,mDAAmD;4BACnD,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;yBACnD,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,aAAa,CAAC,cAAc,GAAG,cAAM;gBACjC,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,sDAAQ,EAAE,CAAC,EAAE;gBACpD,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,sDAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,oDAAM,EAAE,IAAI,EAAE,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAE;aACxG,EAHoC,CAGpC,CAAC;YACF,aAAa,CAAC,cAAc,GAAG;gBAC3B,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBACvB,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAC7B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAC/B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAC1B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBACzE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBAClE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;aACjF,CAAC;YAEF;;;eAGG;YACH,gBAAgB;YAChB,IAAM,qBAAqB,GAAG;gBAC1B,QAAQ;gBACR,SAAS;gBACT,UAAU;gBACV,aAAa;gBACb,gBAAgB;gBAChB,gBAAgB;gBAChB,YAAY;gBACZ,OAAO;gBACP,MAAM;gBACN,aAAa;gBACb,aAAa;gBACb,YAAY;gBACZ,eAAe;gBACf,YAAY;gBACZ,eAAe;gBACf,aAAa;gBACb,eAAe;gBACf,eAAe;gBACf,aAAa;aAChB,CAAC;YACF;gBAAA;gBACA,CAAC;gBAAD,qBAAC;YAAD,CAAC;YACD,cAAc,CAAC,UAAU,GAAG;gBACxB,EAAE,IAAI,EAAE,sDAAQ,EAAE,IAAI,EAAE,CAAC;4BACb,OAAO,EAAE,CAAC,4DAAY,CAAC;4BACvB,OAAO,EAAE,qBAAqB;4BAC9B,YAAY,EAAE,qBAAqB;yBACtC,EAAE,EAAE;aAChB,CAAC;YAEF;;;eAGG;YAEH;;;eAGG;YAGH,iCAAiC;YDoDjC,KAAK;QAAC,CAAC,CAAC;QAER,KAAK,CAAC,uDAAuD;QAC7D;;yEAEiE;QACjE,wJAAwJ;QACxJ,KAAK,CAAC,CAAC,UAAS,MAAM,EAAE,mBAAmB,EAAE,mBAAmB;YAEhE,YAAY,CAAC;YEt0Eb;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;;;;;;eAMG;YAUH;;;eAGG;YACH;;;eAGG;YACH;gBACI;oBACI;;;uBAGG;oBACH,IAAI,CAAC,OAAO,GAAG,IAAI,4CAAO,EAAE,CAAC;oBAC7B;;uBAEG;oBACH,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;oBAC3C;;uBAEG;oBACH,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC;oBACjC;;uBAEG;oBACH,IAAI,CAAC,iBAAiB,GAAG,eAAe,CAAC;oBACzC;;uBAEG;oBACH,IAAI,CAAC,cAAc,GAAG,YAAY,CAAC;oBACnC;;uBAEG;oBACH,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC;oBACjC;;uBAEG;oBACH,IAAI,CAAC,aAAa,GAAG,EAAC;;;;;uBAMtB,UAAC,IAAI,EAAE,QAAQ,EAAE,MAAM;wBACnB,IAAI,MAAM,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC,EAAE;4BAC9B,OAAO,UAAQ,MAAQ,CAAC;yBAC3B;wBACD,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;wBAC7B,gBAAgB;wBAChB,IAAM,UAAU,GAAG,IAAI,GAAG,QAAQ,CAAC;wBACnC,2FAA2F;wBAC3F,gBAAgB;wBAChB,IAAM,QAAQ,GAAG,UAAU,GAAG,MAAM,CAAC,CAAC;4BAClC,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;4BACzC,UAAU,GAAG,QAAQ,CAAC;wBAC1B,OAAU,UAAU,GAAG,CAAC,gBAAM,QAAQ,YAAO,MAAQ,CAAC;oBAC1D,CAAC,CAAC,CAAC;gBACP,CAAC;gBACL,uBAAC;YAAD,CAAC;YACD,gBAAgB,CAAC,UAAU,GAAG;gBAC1B,EAAE,IAAI,EAAE,wDAAU,EAAE,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,EAAE;aACxD,CAAC;YACF,kBAAkB,CAAC,gBAAgB,CAAC,eAAe,GAAG,wEAAkB,CAAC,EAAE,OAAO,EAAE,SAAS,wBAAwB,KAAK,OAAO,IAAI,gBAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;YAC3M;;;;eAIG;YACH,SAAS,mCAAmC,CAAC,UAAU;gBACnD,OAAO,UAAU,IAAI,IAAI,gBAAgB,EAAE,CAAC;YAChD,CAAC;YACD;;;eAGG;YACH,IAAM,2BAA2B,GAAG;gBAChC,6FAA6F;gBAC7F,OAAO,EAAE,gBAAgB;gBACzB,IAAI,EAAE,CAAC,CAAC,IAAI,sDAAQ,EAAE,EAAE,IAAI,sDAAQ,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBAC1D,UAAU,EAAE,mCAAmC;aAClD,CAAC;YAEF;;;eAGG;YACH;;;eAGG;YACH,IAAM,iBAAiB,GAAG,EAAE,CAAC;YAC7B;;;eAGG;YACH;gBAAA;gBACA,CAAC;gBAAD,gBAAC;YAAD,CAAC;YACD,mDAAmD;YACnD;;eAEG;YACH;gBAAA;gBACA,CAAC;gBAAD,uBAAC;YAAD,CAAC;YACD,gBAAgB;YAChB,IAAM,iBAAiB,GAAG,4EAAa,CAAC,+EAAgB,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC5E;;;;eAIG;YACH;gBAA2B,gCAAiB;gBACxC;;;mBAGG;gBACH,sBAAY,KAAK,EAAE,kBAAkB;oBAArC,YACI,iBAAO,SAgBV;oBAfG,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,KAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;oBAC7C,KAAI,CAAC,UAAU,GAAG,CAAC,CAAC;oBACpB,KAAI,CAAC,OAAO,GAAG,CAAC,CAAC;oBACjB,KAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;oBAC3B,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC;oBAC3B,KAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;oBACnC;;uBAEG;oBACH,KAAI,CAAC,IAAI,GAAG,IAAI,0DAAY,EAAE,CAAC;oBAC/B,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAC;;uBAG7C,cAAM,YAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,EAAtC,CAAsC,CAAC,CAAC,CAAC;;gBACnD,CAAC;gBAKD,sBAAI,mCAAS;oBAJb;;;uBAGG;yBACH,cAAkB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC3C;;;uBAGG;yBACH,UAAc,KAAK;wBACf,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,kFAAoB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC3D,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;oBAC3C,CAAC;;;mBAR0C;gBAa3C,sBAAI,gCAAM;oBAJV;;;uBAGG;yBACH,cAAe,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBACrC;;;uBAGG;yBACH,UAAW,KAAK;wBACZ,IAAI,CAAC,OAAO,GAAG,kFAAoB,CAAC,KAAK,CAAC,CAAC;wBAC3C,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;oBAC3C,CAAC;;;mBARoC;gBAarC,sBAAI,kCAAQ;oBAJZ;;;uBAGG;yBACH,cAAiB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACzC;;;uBAGG;yBACH,UAAa,KAAK;wBACd,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,kFAAoB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC1D,IAAI,CAAC,+BAA+B,EAAE,CAAC;oBAC3C,CAAC;;;mBARwC;gBAazC,sBAAI,yCAAe;oBAJnB;;;uBAGG;yBACH,cAAwB,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACvD;;;uBAGG;yBACH,UAAoB,KAAK;wBACrB,IAAI,CAAC,gBAAgB,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,EAAC;;;2BAI3C,UAJ2C;;;2BAGxC,CACH,CAAC,IAAI,yFAAoB,CAAC,CAAC,CAAC,EAAvB,CAAuB,CAAC,CAAC,CAAC;wBAC/B,IAAI,CAAC,+BAA+B,EAAE,CAAC;oBAC3C,CAAC;;;mBAZsD;gBAiBvD,sBAAI,sCAAY;oBAJhB;;;uBAGG;yBACH,cAAqB,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBACjD;;;uBAGG;yBACH,UAAiB,KAAK;wBAClB,IAAI,CAAC,aAAa,GAAG,mFAAqB,CAAC,KAAK,CAAC,CAAC;oBACtD,CAAC;;;mBAPgD;gBAYjD,sBAAI,8CAAoB;oBAJxB;;;uBAGG;yBACH,cAA6B,OAAO,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBACjE;;;uBAGG;yBACH,UAAyB,KAAK;wBAC1B,IAAI,CAAC,qBAAqB,GAAG,mFAAqB,CAAC,KAAK,CAAC,CAAC;oBAC9D,CAAC;;;mBAPgE;gBAQjE;;mBAEG;gBACH,+BAAQ,GAAR;oBACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBACzB,IAAI,CAAC,+BAA+B,EAAE,CAAC;oBACvC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC5B,CAAC;gBACD;;mBAEG;gBACH,kCAAW,GAAX;oBACI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;gBACpC,CAAC;gBACD;;;mBAGG;gBACH,+BAAQ,GAAR;oBACI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;wBACrB,OAAO;qBACV;oBACD,gBAAgB;oBAChB,IAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC;oBACzC,IAAI,CAAC,SAAS,EAAE,CAAC;oBACjB,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;gBAC3C,CAAC;gBACD;;;mBAGG;gBACH,mCAAY,GAAZ;oBACI,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;wBACzB,OAAO;qBACV;oBACD,gBAAgB;oBAChB,IAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC;oBACzC,IAAI,CAAC,SAAS,EAAE,CAAC;oBACjB,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;gBAC3C,CAAC;gBACD;;;mBAGG;gBACH,gCAAS,GAAT;oBACI,mDAAmD;oBACnD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;wBACzB,OAAO;qBACV;oBACD,gBAAgB;oBAChB,IAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC;oBACzC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;oBACnB,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;gBAC3C,CAAC;gBACD;;;mBAGG;gBACH,+BAAQ,GAAR;oBACI,6CAA6C;oBAC7C,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;wBACrB,OAAO;qBACV;oBACD,gBAAgB;oBAChB,IAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC;oBACzC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;oBAC7C,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;gBAC3C,CAAC;gBACD;;;mBAGG;gBACH,sCAAe,GAAf;oBACI,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;gBACrD,CAAC;gBACD;;;mBAGG;gBACH,kCAAW,GAAX;oBACI,gBAAgB;oBAChB,IAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;oBACjD,OAAO,IAAI,CAAC,SAAS,GAAG,YAAY,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;gBAC/D,CAAC;gBACD;;;mBAGG;gBACH,uCAAgB,GAAhB;oBACI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;wBAChB,OAAO,CAAC,CAAC;qBACZ;oBACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAClD,CAAC;gBACD;;;;;;;;;mBASG;gBACH,sCAAe,GAAf,UAAgB,QAAQ;oBACpB,sFAAsF;oBACtF,6CAA6C;oBAC7C,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAClD,gBAAgB;oBAChB,IAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC;oBACzC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACxD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;gBAC3C,CAAC;gBACD;;;mBAGG;gBACH,2CAAoB,GAApB;oBACI,OAAO,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBAChD,CAAC;gBACD;;;mBAGG;gBACH,+CAAwB,GAAxB;oBACI,OAAO,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;gBACpD,CAAC;gBACD;;;;;mBAKG;gBACH,sDAA+B,GAA/B;oBACI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;wBACpB,OAAO;qBACV;oBACD,wFAAwF;oBACxF,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;wBAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;4BAC/C,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;4BACzB,iBAAiB,CAAC;qBACzB;oBACD,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;oBAC9D,IAAI,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;wBAC9D,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBACtD;oBACD,0DAA0D;oBAC1D,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAC;;;;uBAKrC,UAAC,CAAC,EAAE,CAAC,IAAK,QAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC,CAAC;oBAClB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;gBAC3C,CAAC;gBACD;;;;;mBAKG;gBACH,qCAAc,GAAd,UAAe,iBAAiB;oBAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACX,iBAAiB;wBACjB,SAAS,EAAE,IAAI,CAAC,SAAS;wBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,MAAM,EAAE,IAAI,CAAC,MAAM;qBACtB,CAAC,CAAC;gBACP,CAAC;gBACL,mBAAC;YAAD,CAAC,CAnR0B,iBAAiB,GAmR3C;YACD,YAAY,CAAC,UAAU,GAAG;gBACtB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,eAAe;4BACxC,QAAQ,EAAE,cAAc;4BACxB,QAAQ,EAAE,2wFAA2wF;4BACrxF,MAAM,EAAE,CAAC,m0BAAm0B,CAAC;4BAC70B,MAAM,EAAE,CAAC,UAAU,CAAC;4BACpB,IAAI,EAAE;gCACF,OAAO,EAAE,eAAe;6BAC3B;4BACD,eAAe,EAAE,qEAAuB,CAAC,MAAM;4BAC/C,aAAa,EAAE,+DAAiB,CAAC,IAAI;yBACxC,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,YAAY,CAAC,cAAc,GAAG,cAAM;gBAChC,EAAE,IAAI,EAAE,gBAAgB,EAAE;gBAC1B,EAAE,IAAI,EAAE,+DAAiB,EAAE;aAC9B,EAHmC,CAGnC,CAAC;YACF,YAAY,CAAC,cAAc,GAAG;gBAC1B,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBACxB,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAC5B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBACzB,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAC3B,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAClC,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAC/B,oBAAoB,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBACvC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,oDAAM,EAAE,CAAC;aAC3B,CAAC;YAEF;;;eAGG;YACH;gBAAA;gBACA,CAAC;gBAAD,yBAAC;YAAD,CAAC;YACD,kBAAkB,CAAC,UAAU,GAAG;gBAC5B,EAAE,IAAI,EAAE,sDAAQ,EAAE,IAAI,EAAE,CAAC;4BACb,OAAO,EAAE;gCACL,4DAAY;gCACZ,wEAAe;gCACf,wEAAe;gCACf,0EAAgB;6BACnB;4BACD,OAAO,EAAE,CAAC,YAAY,CAAC;4BACvB,YAAY,EAAE,CAAC,YAAY,CAAC;4BAC5B,SAAS,EAAE,CAAC,2BAA2B,CAAC;yBAC3C,EAAE,EAAE;aAChB,CAAC;YAEF;;;eAGG;YAEH;;;eAGG;YAGH,qCAAqC;YFy1ErC,KAAK;QAAC,CAAC,CAAC;QAER,KAAK,CAAC,kDAAkD;QACxD;;oEAE4D;QAC5D,0KAA0K;QAC1K,KAAK,CAAC,CAAC,UAAS,MAAM,EAAE,mBAAmB,EAAE,mBAAmB;YAEhE,YAAY,CAAC;YGjzFb;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;;;;;;eAMG;YAQH;;;eAGG;YAEH;;;;eAIG;YACH,SAAS,+BAA+B,CAAC,EAAE;gBACvC,OAAO,KAAK,CAAC,oDAAkD,EAAE,OAAI,CAAC,CAAC;YAC3E,CAAC;YACD;;;eAGG;YACH,SAAS,wCAAwC;gBAC7C,OAAO,KAAK,CAAC,kFAAkF,CAAC,CAAC;YACrG,CAAC;YACD;;;eAGG;YACH,SAAS,2BAA2B;gBAChC,OAAO,KAAK,CAAC,kDAAkD,CAAC,CAAC;YACrE,CAAC;YACD;;;;eAIG;YACH,SAAS,4BAA4B,CAAC,SAAS;gBAC3C,OAAO,KAAK,CAAI,SAAS,sDAAmD,CAAC,CAAC;YAClF,CAAC;YAED;;;eAGG;YACH,8CAA8C;YAC9C;;eAEG;YACH;gBAAA;gBACA,CAAC;gBAAD,kBAAC;YAAD,CAAC;YACD,gBAAgB;YAChB,IAAM,iBAAiB,GAAG,+EAAgB,CAAC,4EAAa,CAAC,WAAW,CAAC,CAAC,CAAC;YACvE;;eAEG;YACH;gBAAsB,2BAAiB;gBACnC;oBAAA,+BACa,SAAS,UAmBrB;oBAlBG;;uBAEG;oBACH,KAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;oBAC3B;;uBAEG;oBACH,KAAI,CAAC,aAAa,GAAG,IAAI,4CAAO,EAAE,CAAC;oBACnC;;;uBAGG;oBACH,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;oBACrB;;uBAEG;oBACH,KAAI,CAAC,UAAU,GAAG,IAAI,0DAAY,EAAE,CAAC;;gBACzC,CAAC;gBAKD,sBAAI,8BAAS;oBAJb;;;uBAGG;yBACH,cAAkB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC3C;;;uBAGG;yBACH,UAAc,SAAS;wBACnB,IAAI,+DAAS,EAAE,IAAI,SAAS,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,MAAM,EAAE;4BACzE,MAAM,4BAA4B,CAAC,SAAS,CAAC,CAAC;yBACjD;wBACD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;oBAChC,CAAC;;;mBAV0C;gBAgB3C,sBAAI,iCAAY;oBALhB;;;;uBAIG;yBACH,cAAqB,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBACjD;;;uBAGG;yBACH,UAAiB,CAAC,IAAI,IAAI,CAAC,aAAa,GAAG,mFAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;mBALrB;gBAMjD;;;;;mBAKG;gBACH,0BAAQ,GAAR,UAAS,QAAQ;oBACb,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;wBACd,MAAM,2BAA2B,EAAE,CAAC;qBACvC;oBACD,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;wBACjC,MAAM,+BAA+B,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;qBACtD;oBACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAC9C,CAAC;gBACD;;;;;mBAKG;gBACH,4BAAU,GAAV,UAAW,QAAQ;oBACf,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACvC,CAAC;gBACD;;;;mBAIG;gBACH,sBAAI,GAAJ,UAAK,QAAQ;oBACT,IAAI,IAAI,CAAC,MAAM,IAAI,QAAQ,CAAC,EAAE,EAAE;wBAC5B,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAC;wBAC1B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;qBACjE;yBACI;wBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;qBACxD;oBACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC7E,CAAC;gBACD;;;;mBAIG;gBACH,sCAAoB,GAApB,UAAqB,QAAQ;oBACzB,IAAI,CAAC,QAAQ,EAAE;wBACX,OAAO,EAAE,CAAC;qBACb;oBACD,sEAAsE;oBACtE,gBAAgB;oBAChB,IAAM,YAAY,GAAG,QAAQ,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;oBAC/F,gBAAgB;oBAChB,IAAI,kBAAkB,GAAG,qBAAqB,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;oBAC3F,iDAAiD;oBACjD,gBAAgB;oBAChB,IAAI,kBAAkB,GAAG,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBACxE,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,EAAE;wBACjD,kBAAkB,GAAG,CAAC,CAAC;qBAC1B;oBACD,OAAO,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;gBAClD,CAAC;gBACD;;mBAEG;gBACH,0BAAQ,GAAR;oBACI,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC5B,CAAC;gBACD;;mBAEG;gBACH,6BAAW,GAAX;oBACI,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;gBAC9B,CAAC;gBACD;;mBAEG;gBACH,6BAAW,GAAX;oBACI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;gBAClC,CAAC;gBACL,cAAC;YAAD,CAAC,CA/HqB,iBAAiB,GA+HtC;YACD,OAAO,CAAC,UAAU,GAAG;gBACjB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,WAAW;4BACrB,QAAQ,EAAE,SAAS;4BACnB,MAAM,EAAE,CAAC,2BAA2B,CAAC;yBACxC,EAAE,EAAE;aAChB,CAAC;YACF,OAAO,CAAC,cAAc,GAAG;gBACrB,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,EAAE,CAAC;gBACnD,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,IAAI,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC;gBACjD,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAE,EAAE,CAAC;gBACzD,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,IAAI,EAAE,CAAC,qBAAqB,EAAE,EAAE,CAAC;gBAC/D,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,oDAAM,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,EAAE,CAAC;aAC3D,CAAC;YACF;;;;;eAKG;YACH,SAAS,qBAAqB,CAAC,KAAK,EAAE,YAAY;gBAC9C,gBAAgB;gBAChB,IAAI,SAAS,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBAChC,IAAI,KAAK,IAAI,MAAM,EAAE;oBACjB,SAAS,CAAC,OAAO,EAAE,CAAC;iBACvB;gBACD,IAAI,CAAC,YAAY,EAAE;oBACf,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACtB;gBACD,OAAO,SAAS,CAAC;YACrB,CAAC;YAED;;;eAGG;YACH,gBAAgB;YAChB,IAAM,yBAAyB,GAAG,yEAAkB,CAAC,QAAQ,GAAG,GAAG;gBAC/D,sEAAe,CAAC,cAAc,CAAC;YACnC;;;;eAIG;YACH,IAAM,iBAAiB,GAAG;gBACtB;;mBAEG;gBACH,SAAS,EAAE,mEAAO,CAAC,WAAW,EAAE;oBAC5B,iEAAK,CAAC,iBAAiB,EAAE,iEAAK,CAAC,EAAE,SAAS,EAAE,iBAAiB,EAAE,CAAC,CAAC;oBACjE,4EAA4E;oBAC5E,iEAAK,CAAC,mBAAmB,EAAE,iEAAK,CAAC,EAAE,SAAS,EAAE,kBAAkB,EAAE,CAAC,CAAC;oBACpE,sEAAU,CAAC,4BAA4B,EAAE,mEAAO,CAAC,yBAAyB,CAAC,CAAC;iBAC/E,CAAC;gBACF;;mBAEG;gBACH,WAAW,EAAE,mEAAO,CAAC,aAAa,EAAE;oBAChC,iEAAK,CAAC,iBAAiB,EAAE,iEAAK,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC,CAAC;oBAChE,iEAAK,CAAC,mBAAmB,EAAE,iEAAK,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;oBACjE,sEAAU,CAAC,4BAA4B,EAAE,mEAAO,CAAC,yBAAyB,CAAC,CAAC;iBAC/E,CAAC;gBACF;;mBAEG;gBACH,YAAY,EAAE,mEAAO,CAAC,cAAc,EAAE;oBAClC,iEAAK,CAAC,iBAAiB,EAAE,iEAAK,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;oBAC/D,iEAAK,CAAC,mBAAmB,EAAE,iEAAK,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC,CAAC;oBAClE,sEAAU,CAAC,4BAA4B,EAAE,mEAAO,CAAC,yBAAyB,CAAC,CAAC;iBAC/E,CAAC;gBACF;;mBAEG;gBACH,YAAY,EAAE,mEAAO,CAAC,cAAc,EAAE;oBAClC,iEAAK,CAAC,uCAAuC,EAAE,iEAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;oBACrE,iEAAK,CAAC,iCAAiC,EAAE,iEAAK,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBACjE,iEAAK,CAAC,2EAA2E,EAAE,iEAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;oBACzG,iEAAiE;oBACjE,sEAAU,CAAC,wDAAwD,EAAE,mEAAO,CAAC,KAAK,CAAC,CAAC;oBACpF,sEAAU,CAAC,SAAS,EAAE,mEAAO,CAAC,yBAAyB,CAAC,CAAC;iBAC5D,CAAC;gBACF;;;;;;mBAMG;gBACH,aAAa,EAAE,mEAAO,CAAC,eAAe,EAAE;oBACpC,8BAA8B;oBAC9B,sEAAU,CAAC,wCAAwC,EAAE,mEAAO,CAAC,yBAAyB,EAAE,qEAAS,CAAC;wBAC9F,iEAAK,CAAC,EAAE,SAAS,EAAE,kBAAkB,EAAE,CAAC;wBACxC,iEAAK,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;qBACxC,CAAC,CAAC,CAAC;oBACJ,8BAA8B;oBAC9B,sEAAU,CAAC,wCAAwC,EAAE,mEAAO,CAAC,yBAAyB,EAAE,qEAAS,CAAC;wBAC9F,iEAAK,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;wBACrC,iEAAK,CAAC,EAAE,SAAS,EAAE,iBAAiB,EAAE,CAAC;qBAC1C,CAAC,CAAC,CAAC;oBACJ,8BAA8B;oBAC9B,sEAAU,CAAC,sCAAsC,EAAE,mEAAO,CAAC,yBAAyB,EAAE,qEAAS,CAAC;wBAC5F,iEAAK,CAAC,EAAE,SAAS,EAAE,iBAAiB,EAAE,CAAC;wBACvC,iEAAK,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;qBACxC,CAAC,CAAC,CAAC;oBACJ,8BAA8B;oBAC9B,sEAAU,CAAC,sCAAsC,EAAE,mEAAO,CAAC,yBAAyB,EAAE,qEAAS,CAAC;wBAC5F,iEAAK,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;wBACrC,iEAAK,CAAC,EAAE,SAAS,EAAE,kBAAkB,EAAE,CAAC;qBAC3C,CAAC,CAAC,CAAC;oBACJ,iEAAK,CAAC,wEAAwE,EAAE,iEAAK,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;oBACtH,iEAAK,CAAC,oCAAoC,EAAE,iEAAK,CAAC,EAAE,SAAS,EAAE,kBAAkB,EAAE,CAAC,CAAC;oBACrF,iEAAK,CAAC,iCAAiC,EAAE,iEAAK,CAAC,EAAE,SAAS,EAAE,iBAAiB,EAAE,CAAC,CAAC;iBACpF,CAAC;gBACF;;mBAEG;gBACH,aAAa,EAAE,mEAAO,CAAC,eAAe,EAAE;oBACpC,sEAAU,CAAC,SAAS,EAAE;wBAClB,iEAAK,CAAC,IAAI,EAAE,wEAAY,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;qBAClD,CAAC;iBACL,CAAC;aACL,CAAC;YAEF;;;eAGG;YACH;;;eAGG;YACH;gBACI;oBACI;;;uBAGG;oBACH,IAAI,CAAC,OAAO,GAAG,IAAI,4CAAO,EAAE,CAAC;oBAC7B;;uBAEG;oBACH,IAAI,CAAC,eAAe,GAAG,EAAC;;;uBAIxB,UAAC,EAAE;wBACC,OAAO,wBAAsB,EAAI,CAAC;oBACtC,CAAC,CAAC,CAAC;gBACP,CAAC;gBACL,wBAAC;YAAD,CAAC;YACD,iBAAiB,CAAC,UAAU,GAAG;gBAC3B,EAAE,IAAI,EAAE,wDAAU,EAAE,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,EAAE;aACxD,CAAC;YACF,kBAAkB,CAAC,iBAAiB,CAAC,eAAe,GAAG,wEAAkB,CAAC,EAAE,OAAO,EAAE,SAAS,yBAAyB,KAAK,OAAO,IAAI,iBAAiB,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;YAC/M;;;;eAIG;YACH,SAAS,qCAAqC,CAAC,UAAU;gBACrD,OAAO,UAAU,IAAI,IAAI,iBAAiB,EAAE,CAAC;YACjD,CAAC;YACD;;;eAGG;YACH,IAAM,6BAA6B,GAAG;gBAClC,8FAA8F;gBAC9F,OAAO,EAAE,iBAAiB;gBAC1B,IAAI,EAAE,CAAC,CAAC,IAAI,sDAAQ,EAAE,EAAE,IAAI,sDAAQ,EAAE,EAAE,iBAAiB,CAAC,CAAC;gBAC3D,UAAU,EAAE,qCAAqC;aACpD,CAAC;YAEF;;;eAGG;YACH,sDAAsD;YACtD;;eAEG;YACH;gBAAA;gBACA,CAAC;gBAAD,wBAAC;YAAD,CAAC;YACD,gBAAgB;YAChB,IAAM,uBAAuB,GAAG,4EAAa,CAAC,iBAAiB,CAAC,CAAC;YACjE;;;;;;;;eAQG;YACH;gBAA4B,iCAAuB;gBAC/C;;;;;mBAKG;gBACH,uBAAY,KAAK,EAAE,iBAAiB,EAAE,KAAK,EAAE,UAAU;oBAAvD;oBACI,8FAA8F;oBAC9F,oFAAoF;oBACpF,iFAAiF;oBACjF,4BAA4B;oBAC5B,iBAAO,SAuCV;oBAtCG,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC7B;;;uBAGG;oBACH,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;oBAChC;;uBAEG;oBACH,KAAI,CAAC,eAAe,GAAG,EAAE,CAAC;oBAC1B;;uBAEG;oBACH,KAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC;oBACxC;;uBAEG;oBACH,KAAI,CAAC,aAAa,GAAG,OAAO,CAAC;oBAC7B,IAAI,CAAC,KAAK,EAAE;wBACR,MAAM,wCAAwC,EAAE,CAAC;qBACpD;oBACD,KAAI,CAAC,qBAAqB,GAAG,kDAAK,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC;yBACnF,SAAS,CAAC,EAAC;;mBAGhB;wBACI,IAAI,KAAI,CAAC,SAAS,EAAE,EAAE;4BAClB,KAAI,CAAC,qBAAqB,EAAE,CAAC;yBAChC;wBACD,uFAAuF;wBACvF,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,IAAI,KAAI,CAAC,UAAU,IAAI,KAAI,CAAC,UAAU,CAAC,OAAO,KAAK,QAAQ,EAAE;4BAC9E,KAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC;4BACxC,KAAI,CAAC,4BAA4B,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAI,CAAC,eAAe,EAAE,CAAC,CAAC;yBAC7F;wBACD,iBAAiB,CAAC,YAAY,EAAE,CAAC;oBACrC,CAAC,CAAC,CAAC,CAAC;;gBACR,CAAC;gBAKD,sBAAI,uCAAY;oBAJhB;;;uBAGG;yBACH,cAAqB,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBACjD;;;uBAGG;yBACH,UAAiB,CAAC,IAAI,IAAI,CAAC,aAAa,GAAG,mFAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;mBALrB;gBAMjD;;mBAEG;gBACH,gCAAQ,GAAR;oBACI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,UAAU,EAAE;wBAC7B,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;qBAClC;oBACD,6FAA6F;oBAC7F,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC7B,IAAI,CAAC,4BAA4B,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;oBACnG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC9B,CAAC;gBACD;;mBAEG;gBACH,mCAAW,GAAX;oBACI,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;gBAC7C,CAAC;gBACD;;;;;mBAKG;gBACH,gDAAwB,GAAxB,UAAyB,OAAO;oBAC5B,2EAA2E;oBAC3E,IAAI,IAAI,CAAC,WAAW,EAAE,IAAI,OAAO,EAAE;wBAC/B,OAAO;qBACV;oBACD,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;oBAClC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;wBACnB,IAAI,CAAC,qBAAqB,EAAE,CAAC;wBAC7B,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BACzB,IAAI,CAAC,4BAA4B,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;yBAC3F;6BACI;4BACD,IAAI,CAAC,4BAA4B,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;yBAC3F;qBACJ;gBACL,CAAC;gBACD;;;;;;mBAMG;gBACH,oDAA4B,GAA5B,UAA6B,SAAS;oBAClC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;oBAC5B,sFAAsF;oBACtF,8DAA8D;oBAC9D,IAAI,IAAI,CAAC,0BAA0B,EAAE;wBACjC,IAAI,CAAC,UAAU,GAAG,EAAE,OAAO,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC;qBACpD;gBACL,CAAC;gBACD;;;mBAGG;gBACH,oCAAY,GAAZ;oBACI,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;wBACpB,OAAO;qBACV;oBACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtB,mFAAmF;oBACnF,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,KAAK,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,KAAK,QAAQ,EAAE;wBAC5E,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC;qBAC1C;oBACD,4FAA4F;oBAC5F,8BAA8B;oBAC9B,gBAAgB;oBAChB,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;wBAChC,EAAE,SAAS,EAAE,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;wBACxD,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC;oBAC3D,IAAI,CAAC,4BAA4B,CAAC,SAAS,CAAC,CAAC;oBAC7C,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBACpC,CAAC;gBACD;;;mBAGG;gBACH,iCAAS,GAAT;oBACI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE;wBAC/B,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,MAAM,CAAC,CAAC;gBAC5E,CAAC;gBACD;;;mBAGG;gBACH,+CAAuB,GAAvB;oBACI,OAAO,MAAG,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,IAAG,IAAI,CAAC,eAAiB,CAAC;gBACzE,CAAC;gBACD;;;mBAGG;gBACH,0CAAkB,GAAlB;oBACI,gBAAgB;oBAChB,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;oBAC5C,OAAO,CAAC,SAAS,CAAC,CAAC,CAAI,SAAS,SAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;gBAC3E,CAAC;gBACD;;;;;;;;;;mBAUG;gBACH,6CAAqB,GAArB;oBACI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;wBACrC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;wBACtB,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACzC,CAAC;gBACD;;mBAEG;gBACH,mCAAW,GAAX;oBACI,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC;gBAChD,CAAC;gBACD;;;;;;mBAMG;gBACH,6CAAqB,GAArB;oBACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;wBACnB,OAAO,IAAI,CAAC;qBACf;oBACD,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC;gBACtE,CAAC;gBACD;;;mBAGG;gBACH,oCAAY,GAAZ;oBACI,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;gBACnD,CAAC;gBACL,oBAAC;YAAD,CAAC,CA9M2B,uBAAuB,GA8MlD;YACD,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,mBAAmB;4BAC5C,QAAQ,EAAE,eAAe;4BACzB,QAAQ,EAAE,ymCAAymC;4BACnnC,MAAM,EAAE,CAAC,6oDAA6oD,CAAC;4BACvpD,IAAI,EAAE;gCACF,SAAS,EAAE,gBAAgB;gCAC3B,cAAc,EAAE,gCAAgC;gCAChD,cAAc,EAAE,iCAAiC;gCACjD,kBAAkB,EAAE,yBAAyB;gCAC7C,kCAAkC,EAAE,eAAe;6BACtD;4BACD,aAAa,EAAE,+DAAiB,CAAC,IAAI;4BACrC,eAAe,EAAE,qEAAuB,CAAC,MAAM;4BAC/C,MAAM,EAAE,CAAC,UAAU,CAAC;4BACpB,UAAU,EAAE;gCACR,iBAAiB,CAAC,SAAS;gCAC3B,iBAAiB,CAAC,WAAW;gCAC7B,iBAAiB,CAAC,YAAY;gCAC9B,iBAAiB,CAAC,YAAY;gCAC9B,iBAAiB,CAAC,aAAa;gCAC/B,iBAAiB,CAAC,aAAa;6BAClC;yBACJ,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,aAAa,CAAC,cAAc,GAAG,cAAM;gBACjC,EAAE,IAAI,EAAE,iBAAiB,EAAE;gBAC3B,EAAE,IAAI,EAAE,+DAAiB,EAAE;gBAC3B,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,sDAAQ,EAAE,CAAC,EAAE;gBACnD,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,oDAAM,EAAE,IAAI,EAAE,CAAC,4BAA4B,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,sDAAQ,EAAE,CAAC,EAAE;aACjH,EALoC,CAKpC,CAAC;YACF,aAAa,CAAC,cAAc,GAAG;gBAC3B,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,EAAE,CAAC;gBACjD,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBAChC,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBACxB,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;aAClC,CAAC;YAEF;;;eAGG;YACH;gBAAA;gBACA,CAAC;gBAAD,oBAAC;YAAD,CAAC;YACD,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,sDAAQ,EAAE,IAAI,EAAE,CAAC;4BACb,OAAO,EAAE,CAAC,4DAAY,CAAC;4BACvB,OAAO,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC;4BACjC,YAAY,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC;4BACtC,SAAS,EAAE,CAAC,6BAA6B,CAAC;yBAC7C,EAAE,EAAE;aAChB,CAAC;YAEF;;;eAGG;YAEH;;;eAGG;YAEH;;;eAGG;YAGH,gCAAgC;YHm0FhC,KAAK;QAAC,CAAC,CAAC;QAER,KAAK,CAAC,mDAAmD;QACzD;;qEAE6D;QAC7D,0QAA0Q;QAC1Q,KAAK,CAAC,CAAC,UAAS,MAAM,EAAE,mBAAmB,EAAE,mBAAmB;YAEhE,YAAY,CAAC;YIp+Gb;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;;;;;;eAMG;YASH;;;eAGG;YACH;;;eAGG;YACH;gBAAuB,4BAAQ;gBAC3B;oBAAA,+BACa,SAAS,UAKrB;oBAJG;;uBAEG;oBACH,KAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC;;gBAC7C,CAAC;gBACL,eAAC;YAAD,CAAC,CARsB,2DAAQ,GAQ9B;YACD,QAAQ,CAAC,UAAU,GAAG;gBAClB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,6BAA6B;4BACtD,QAAQ,EAAE,UAAU;4BACpB,QAAQ,EAAE,qEAAkB;4BAC5B,MAAM,EAAE,CAAC,6wDAA6wD,CAAC;4BACvxD,IAAI,EAAE;gCACF,OAAO,EAAE,WAAW;6BACvB;4BACD,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,2DAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC;4BACzD,aAAa,EAAE,+DAAiB,CAAC,IAAI;4BACrC,+FAA+F;4BAC/F,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;yBACnD,EAAE,EAAE;aAChB,CAAC;YAEF;;;eAGG;YACH;;;eAGG;YACH;gBAAyB,8BAAU;gBAAnC;;gBACA,CAAC;gBAAD,iBAAC;YAAD,CAAC,CADwB,6DAAU,GAClC;YACD,UAAU,CAAC,UAAU,GAAG;gBACpB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,cAAc;4BACxB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,6DAAU,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC;yBAChE,EAAE,EAAE;aAChB,CAAC;YACF;;;eAGG;YACH;gBAA+B,oCAAgB;gBAA/C;;gBACA,CAAC;gBAAD,uBAAC;YAAD,CAAC,CAD8B,mEAAgB,GAC9C;YACD,gBAAgB,CAAC,UAAU,GAAG;gBAC1B,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,oBAAoB;4BAC9B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,mEAAgB,EAAE,WAAW,EAAE,gBAAgB,EAAE,CAAC;yBAC5E,EAAE,EAAE;aAChB,CAAC;YACF;;;eAGG;YACH;gBAA+B,oCAAgB;gBAA/C;;gBACA,CAAC;gBAAD,uBAAC;YAAD,CAAC,CAD8B,mEAAgB,GAC9C;YACD,gBAAgB,CAAC,UAAU,GAAG;gBAC1B,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,oBAAoB;4BAC9B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,mEAAgB,EAAE,WAAW,EAAE,gBAAgB,EAAE,CAAC;yBAC5E,EAAE,EAAE;aAChB,CAAC;YACF;;;eAGG;YACH;gBAA2B,gCAAY;gBAAvC;;gBACA,CAAC;gBAAD,mBAAC;YAAD,CAAC,CAD0B,+DAAY,GACtC;YACD,YAAY,CAAC,UAAU,GAAG;gBACtB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,gBAAgB;4BAC1B,SAAS,EAAE;gCACP,EAAE,OAAO,EAAE,+DAAY,EAAE,WAAW,EAAE,YAAY,EAAE;gCACpD,EAAE,OAAO,EAAE,4BAA4B,EAAE,WAAW,EAAE,YAAY,EAAE;6BACvE;yBACJ,EAAE,EAAE;aAChB,CAAC;YACF,YAAY,CAAC,cAAc,GAAG;gBAC1B,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,IAAI,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC;gBAChD,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;gBACzB,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,mDAAK,EAAE,CAAC;aAC/B,CAAC;YACF;;eAEG;YACH;gBAA4B,iCAAa;gBACrC;;;mBAGG;gBACH,uBAAY,SAAS,EAAE,UAAU;oBAAjC,YACI,kBAAM,SAAS,EAAE,UAAU,CAAC,SAE/B;oBADG,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAc,SAAS,CAAC,oBAAsB,CAAC,CAAC;;gBAC3F,CAAC;gBACL,oBAAC;YAAD,CAAC,CAT2B,gEAAa,GASxC;YACD,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,sCAAsC;4BAChD,IAAI,EAAE;gCACF,OAAO,EAAE,iBAAiB;gCAC1B,MAAM,EAAE,cAAc;6BACzB;yBACJ,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,aAAa,CAAC,cAAc,GAAG,cAAM;gBACjC,EAAE,IAAI,EAAE,+DAAY,EAAE;gBACtB,EAAE,IAAI,EAAE,wDAAU,EAAE;aACvB,EAHoC,CAGpC,CAAC;YACF;;eAEG;YACH;gBAA4B,iCAAa;gBACrC;;;mBAGG;gBACH,uBAAY,SAAS,EAAE,UAAU;oBAAjC,YACI,kBAAM,SAAS,EAAE,UAAU,CAAC,SAE/B;oBADG,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAc,SAAS,CAAC,oBAAsB,CAAC,CAAC;;gBAC3F,CAAC;gBACL,oBAAC;YAAD,CAAC,CAT2B,gEAAa,GASxC;YACD,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,sCAAsC;4BAChD,IAAI,EAAE;gCACF,OAAO,EAAE,iBAAiB;gCAC1B,MAAM,EAAE,UAAU;6BACrB;yBACJ,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,aAAa,CAAC,cAAc,GAAG,cAAM;gBACjC,EAAE,IAAI,EAAE,+DAAY,EAAE;gBACtB,EAAE,IAAI,EAAE,wDAAU,EAAE;aACvB,EAHoC,CAGpC,CAAC;YACF;;eAEG;YACH;gBAAsB,2BAAO;gBACzB;;;mBAGG;gBACH,iBAAY,SAAS,EAAE,UAAU;oBAAjC,YACI,kBAAM,SAAS,EAAE,UAAU,CAAC,SAE/B;oBADG,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAc,SAAS,CAAC,oBAAsB,CAAC,CAAC;;gBAC3F,CAAC;gBACL,cAAC;YAAD,CAAC,CATqB,0DAAO,GAS5B;YACD,OAAO,CAAC,UAAU,GAAG;gBACjB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,wBAAwB;4BAClC,IAAI,EAAE;gCACF,OAAO,EAAE,UAAU;gCACnB,MAAM,EAAE,UAAU;6BACrB;yBACJ,EAAE,EAAE;aAChB,CAAC;YACF,kBAAkB;YAClB,OAAO,CAAC,cAAc,GAAG,cAAM;gBAC3B,EAAE,IAAI,EAAE,+DAAY,EAAE;gBACtB,EAAE,IAAI,EAAE,wDAAU,EAAE;aACvB,EAH8B,CAG9B,CAAC;YAEF;;;eAGG;YACH;;;eAGG;YACH;gBAA8B,mCAAe;gBAA7C;;gBACA,CAAC;gBAAD,sBAAC;YAAD,CAAC,CAD6B,kEAAe,GAC5C;YACD,eAAe,CAAC,UAAU,GAAG;gBACzB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,mBAAmB;4BAC7B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,kEAAe,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;4BACvE,MAAM,EAAE,CAAC,0BAA0B,EAAE,+BAA+B,CAAC;yBACxE,EAAE,EAAE;aAChB,CAAC;YACF;;;eAGG;YACH;gBAA8B,mCAAe;gBAA7C;;gBACA,CAAC;gBAAD,sBAAC;YAAD,CAAC,CAD6B,kEAAe,GAC5C;YACD,eAAe,CAAC,UAAU,GAAG;gBACzB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,mBAAmB;4BAC7B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,kEAAe,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;4BACvE,MAAM,EAAE,CAAC,0BAA0B,EAAE,+BAA+B,CAAC;yBACxE,EAAE,EAAE;aAChB,CAAC;YACF;;;;;eAKG;YACH;gBAAwB,6BAAS;gBAAjC;;gBACA,CAAC;gBAAD,gBAAC;YAAD,CAAC,CADuB,4DAAS,GAChC;YACD,SAAS,CAAC,UAAU,GAAG;gBACnB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC;4BACd,QAAQ,EAAE,aAAa;4BACvB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,4DAAS,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;4BAC3D,MAAM,EAAE,CAAC,2BAA2B,EAAE,qBAAqB,CAAC;yBAC/D,EAAE,EAAE;aAChB,CAAC;YACF;;eAEG;YACH;gBAA2B,gCAAY;gBAAvC;;gBACA,CAAC;gBAAD,mBAAC;YAAD,CAAC,CAD0B,+DAAY,GACtC;YACD,YAAY,CAAC,UAAU,GAAG;gBACtB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,oCAAoC;4BAC7D,QAAQ,EAAE,mEAAgB;4BAC1B,IAAI,EAAE;gCACF,OAAO,EAAE,gBAAgB;gCACzB,MAAM,EAAE,KAAK;6BAChB;4BACD,+FAA+F;4BAC/F,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;4BAChD,aAAa,EAAE,+DAAiB,CAAC,IAAI;4BACrC,QAAQ,EAAE,cAAc;4BACxB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,+DAAY,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;yBACpE,EAAE,EAAE;aAChB,CAAC;YACF;;eAEG;YACH;gBAA2B,gCAAY;gBAAvC;;gBACA,CAAC;gBAAD,mBAAC;YAAD,CAAC,CAD0B,+DAAY,GACtC;YACD,YAAY,CAAC,UAAU,GAAG;gBACtB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,oCAAoC;4BAC7D,QAAQ,EAAE,mEAAgB;4BAC1B,IAAI,EAAE;gCACF,OAAO,EAAE,gBAAgB;gCACzB,MAAM,EAAE,KAAK;6BAChB;4BACD,+FAA+F;4BAC/F,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;4BAChD,aAAa,EAAE,+DAAiB,CAAC,IAAI;4BACrC,QAAQ,EAAE,cAAc;4BACxB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,+DAAY,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;yBACpE,EAAE,EAAE;aAChB,CAAC;YACF;;eAEG;YACH;gBAAqB,0BAAM;gBAA3B;;gBACA,CAAC;gBAAD,aAAC;YAAD,CAAC,CADoB,yDAAM,GAC1B;YACD,MAAM,CAAC,UAAU,GAAG;gBAChB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,sBAAsB;4BAC/C,QAAQ,EAAE,mEAAgB;4BAC1B,IAAI,EAAE;gCACF,OAAO,EAAE,SAAS;gCAClB,MAAM,EAAE,KAAK;6BAChB;4BACD,+FAA+F;4BAC/F,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;4BAChD,aAAa,EAAE,+DAAiB,CAAC,IAAI;4BACrC,QAAQ,EAAE,QAAQ;4BAClB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,yDAAM,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC;yBACxD,EAAE,EAAE;aAChB,CAAC;YAEF;;;eAGG;YACH;;;;;;;;;eASG;YACH;gBAA4B,iCAAa;gBAAzC;;gBACA,CAAC;gBAAD,oBAAC;YAAD,CAAC,CAD2B,gEAAa,GACxC;YACD,aAAa,CAAC,UAAU,GAAG;gBACvB,EAAE,IAAI,EAAE,uDAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,iBAAiB;4BAC1C,QAAQ,EAAE,8SASvB;4BACa,aAAa,EAAE,+DAAiB,CAAC,IAAI;4BACrC,kGAAkG;4BAClG,kGAAkG;4BAClG,+FAA+F;4BAC/F,kGAAkG;4BAClG,mDAAmD;4BACnD,+CAA+C;4BAC/C,eAAe,EAAE,qEAAuB,CAAC,OAAO;yBACnD,EAAE,EAAE;aAChB,CAAC;YAEF;;;eAGG;YACH,gBAAgB;YAChB,IAAM,qBAAqB,GAAG;gBAC1B,QAAQ;gBACR,QAAQ;gBACR,gBAAgB;gBAChB,gBAAgB;gBAChB,eAAe;gBACf,YAAY;gBACZ,UAAU;gBACV,SAAS;gBACT,gBAAgB;gBAChB,eAAe;gBACf,kBAAkB;gBAClB,aAAa;gBACb,OAAO;gBACP,aAAa;gBACb,iBAAiB;gBACjB,YAAY;gBACZ,MAAM;gBACN,YAAY;gBACZ,aAAa;aAChB,CAAC;YACF;gBAAA;gBACA,CAAC;gBAAD,qBAAC;YAAD,CAAC;YACD,cAAc,CAAC,UAAU,GAAG;gBACxB,EAAE,IAAI,EAAE,sDAAQ,EAAE,IAAI,EAAE,CAAC;4BACb,OAAO,EAAE;gCACL,iEAAc;gCACd,4DAAY;gCACZ,sEAAe;6BAClB;4BACD,OAAO,EAAE,qBAAqB;4BAC9B,YAAY,EAAE,qBAAqB;yBACtC,EAAE,EAAE;aAChB,CAAC;YAEF;;;eAGG;YACH;;;;eAIG;YACH,IAAM,gBAAgB,GAAG,gBAAgB,CAAC;YAC1C;;;;;;;;;;;;;eAaG;YACH;gBAAiC,sCAAU;gBACvC;;mBAEG;gBACH,4BAAY,WAAgB;oBAAhB,8CAAgB;oBAA5B,YACI,iBAAO,SA2IV;oBA1IG;;uBAEG;oBACH,KAAI,CAAC,WAAW,GAAG,IAAI,oDAAe,CAAC,EAAE,CAAC,CAAC;oBAC3C;;uBAEG;oBACH,KAAI,CAAC,OAAO,GAAG,IAAI,oDAAe,CAAC,EAAE,CAAC,CAAC;oBACvC;;uBAEG;oBACH,KAAI,CAAC,oBAAoB,GAAG,IAAI,4CAAO,EAAE,CAAC;oBAC1C;;;uBAGG;oBACH,KAAI,CAAC,0BAA0B,GAAG,iDAAY,CAAC,KAAK,CAAC;oBACrD;;;;;;;;uBAQG;oBACH,KAAI,CAAC,mBAAmB,GAAG,EAAC;;;;uBAK5B,UAAC,IAAI,EAAE,YAAY;wBACf,gBAAgB;wBAChB,IAAM,KAAK,GAAG,CAAC,EAAC,gBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;wBACxD,IAAI,4EAAc,CAAC,KAAK,CAAC,EAAE;4BACvB,gBAAgB;4BAChB,IAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;4BAClC,qEAAqE;4BACrE,8DAA8D;4BAC9D,OAAO,WAAW,GAAG,gBAAgB,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC;yBAC/D;wBACD,OAAO,KAAK,CAAC;oBACjB,CAAC,CAAC,CAAC;oBACH;;;;;;;;uBAQG;oBACH,KAAI,CAAC,QAAQ,GAAG,EAAC;;;;uBAKjB,UAAC,IAAI,EAAE,IAAI;wBACP,gBAAgB;wBAChB,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBAC3B,gBAAgB;wBAChB,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;wBACjC,IAAI,CAAC,MAAM,IAAI,SAAS,IAAI,EAAE,EAAE;4BAC5B,OAAO,IAAI,CAAC;yBACf;wBACD,OAAO,IAAI,CAAC,IAAI,CAAC,EAAC;;;;2BAKlB,UAAC,CAAC,EAAE,CAAC;4BACD,gBAAgB;4BAChB,IAAI,MAAM,GAAG,KAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;4BACjD,gBAAgB;4BAChB,IAAI,MAAM,GAAG,KAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;4BACjD,sFAAsF;4BACtF,2FAA2F;4BAC3F,4EAA4E;4BAC5E,6CAA6C;4BAC7C,gBAAgB;4BAChB,IAAI,gBAAgB,GAAG,CAAC,CAAC;4BACzB,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,EAAE;gCAClC,4FAA4F;gCAC5F,IAAI,MAAM,GAAG,MAAM,EAAE;oCACjB,gBAAgB,GAAG,CAAC,CAAC;iCACxB;qCACI,IAAI,MAAM,GAAG,MAAM,EAAE;oCACtB,gBAAgB,GAAG,CAAC,CAAC,CAAC;iCACzB;6BACJ;iCACI,IAAI,MAAM,IAAI,IAAI,EAAE;gCACrB,gBAAgB,GAAG,CAAC,CAAC;6BACxB;iCACI,IAAI,MAAM,IAAI,IAAI,EAAE;gCACrB,gBAAgB,GAAG,CAAC,CAAC,CAAC;6BACzB;4BACD,OAAO,gBAAgB,GAAG,CAAC,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC5D,CAAC,CAAC,CAAC,CAAC;oBACR,CAAC,CAAC,CAAC;oBACH;;;;;;;;;uBASG;oBACH,KAAI,CAAC,eAAe,GAAG,EAAC;;;;uBAKxB,UAAC,IAAI,EAAE,MAAM;wBACT,qEAAqE;wBACrE,gBAAgB;wBAChB,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,EAAC;;;;2BAK1C,UAAC,WAAW,EAAE,GAAG;4BACb,oFAAoF;4BACpF,2FAA2F;4BAC3F,yFAAyF;4BACzF,wFAAwF;4BACxF,2DAA2D;4BAC3D,2DAA2D;4BAC3D,OAAO,WAAW,GAAG,CAAC,EAAC,gBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;wBAChE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;wBACtB,8EAA8E;wBAC9E,gBAAgB;wBAChB,IAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;wBACtD,OAAO,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;oBACpD,CAAC,CAAC,CAAC;oBACH,KAAI,CAAC,KAAK,GAAG,IAAI,oDAAe,CAAC,WAAW,CAAC,CAAC;oBAC9C,KAAI,CAAC,yBAAyB,EAAE,CAAC;;gBACrC,CAAC;gBAKD,sBAAI,oCAAI;oBAJR;;;uBAGG;yBACH,cAAa,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;oBACvC;;;uBAGG;yBACH,UAAS,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;mBALF;gBAWvC,sBAAI,sCAAM;oBALV;;;;uBAIG;yBACH,cAAe,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC3C;;;uBAGG;yBACH,UAAW,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;;;mBALN;gBAW3C,sBAAI,oCAAI;oBALR;;;;uBAIG;yBACH,cAAa,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBACjC;;;uBAGG;yBACH,UAAS,IAAI;wBACT,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;wBAClB,IAAI,CAAC,yBAAyB,EAAE,CAAC;oBACrC,CAAC;;;mBARgC;gBAoBjC,sBAAI,yCAAS;oBAXb;;;;;;;;;;uBAUG;yBACH,cAAkB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC3C;;;uBAGG;yBACH,UAAc,SAAS;wBACnB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;wBAC5B,IAAI,CAAC,yBAAyB,EAAE,CAAC;oBACrC,CAAC;;;mBAR0C;gBAS3C;;;;;mBAKG;gBACH,sDAAyB,GAAzB;oBAAA,iBAgDC;oBA/CG,2FAA2F;oBAC3F,wFAAwF;oBACxF,6EAA6E;oBAC7E,6FAA6F;oBAC7F,+FAA+F;oBAC/F,2DAA2D;oBAC3D,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC3B,EAAC,gBAAiB,CAAC,kDAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC3E,+CAAE,CAAC,IAAI,CAAC,CAAC;oBACb,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;wBAChC,EAAC,gBAAiB,CAAC,kDAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC1G,+CAAE,CAAC,IAAI,CAAC,CAAC;oBACb,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;oBAC9B,2EAA2E;oBAC3E,gBAAgB;oBAChB,IAAM,YAAY,GAAG,0DAAa,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;yBACzD,IAAI,CAAC,0DAAG,CAAC,EAAC;;;mBAIf,UAAC,EAAM;4BAAL,YAAI;wBAAM,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC;oBAAtB,CAAsB,CAAC,CAAC,CAAC,CAAC;oBACtC,6EAA6E;oBAC7E,gBAAgB;oBAChB,IAAM,WAAW,GAAG,0DAAa,CAAC,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;yBACxD,IAAI,CAAC,0DAAG,CAAC,EAAC;;;mBAIf,UAAC,EAAM;4BAAL,YAAI;wBAAM,YAAI,CAAC,UAAU,CAAC,IAAI,CAAC;oBAArB,CAAqB,CAAC,CAAC,CAAC,CAAC;oBACrC,yEAAyE;oBACzE,gBAAgB;oBAChB,IAAM,aAAa,GAAG,0DAAa,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;yBACzD,IAAI,CAAC,0DAAG,CAAC,EAAC;;;mBAIf,UAAC,EAAM;4BAAL,YAAI;wBAAM,YAAI,CAAC,SAAS,CAAC,IAAI,CAAC;oBAApB,CAAoB,CAAC,CAAC,CAAC,CAAC;oBACpC,6EAA6E;oBAC7E,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC;oBAC9C,IAAI,CAAC,0BAA0B,GAAG,aAAa,CAAC,SAAS,CAAC,EAAC;;;uBAI3D,UAJ2D;;;uBAGxD,CACH,IAAI,IAAI,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAA3B,CAA2B,CAAC,CAAC,CAAC;gBAC1C,CAAC;gBACD;;;;;;mBAMG;gBACH,wCAAW,GAAX,UAAY,IAAI;oBAAhB,iBAcC;oBAbG,yEAAyE;oBACzE,8FAA8F;oBAC9F,uCAAuC;oBACvC,IAAI,CAAC,YAAY;wBACb,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC;;;2BAInC,UAJmC;;;2BAGhC,CACH,GAAG,IAAI,YAAI,CAAC,eAAe,CAAC,GAAG,EAAE,KAAI,CAAC,MAAM,CAAC,EAAtC,CAAsC,CAAC,CAAC,CAAC;oBACpD,IAAI,IAAI,CAAC,SAAS,EAAE;wBAChB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;qBACnD;oBACD,OAAO,IAAI,CAAC,YAAY,CAAC;gBAC7B,CAAC;gBACD;;;;;;mBAMG;gBACH,uCAAU,GAAV,UAAW,IAAI;oBACX,mFAAmF;oBACnF,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;wBACZ,OAAO,IAAI,CAAC;qBACf;oBACD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClD,CAAC;gBACD;;;;;mBAKG;gBACH,sCAAS,GAAT,UAAU,IAAI;oBACV,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;wBACjB,OAAO,IAAI,CAAC;qBACf;oBACD,gBAAgB;oBAChB,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;oBACtE,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBACxE,CAAC;gBACD;;;;;;mBAMG;gBACH,6CAAgB,GAAhB,UAAiB,kBAAkB;oBAAnC,iBAyBC;oBAxBG,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAC;;uBAGxB;wBACI,gBAAgB;wBAChB,IAAM,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC;wBACjC,IAAI,CAAC,SAAS,EAAE;4BACZ,OAAO;yBACV;wBACD,SAAS,CAAC,MAAM,GAAG,kBAAkB,CAAC;wBACtC,wEAAwE;wBACxE,IAAI,SAAS,CAAC,SAAS,GAAG,CAAC,EAAE;4BACzB,gBAAgB;4BAChB,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;4BAChF,gBAAgB;4BAChB,IAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;4BAClE,IAAI,YAAY,KAAK,SAAS,CAAC,SAAS,EAAE;gCACtC,SAAS,CAAC,SAAS,GAAG,YAAY,CAAC;gCACnC,+DAA+D;gCAC/D,kEAAkE;gCAClE,KAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;6BACpC;yBACJ;oBACL,CAAC,CAAC,CAAC,CAAC;gBACR,CAAC;gBACD;;;;mBAIG;gBACH,oCAAO,GAAP,cAAY,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACtC;;;;mBAIG;gBACH,uCAAU,GAAV,cAAe,CAAC;gBACpB,yBAAC;YAAD,CAAC,CA9VgC,6DAAU,GA8V1C;YAED;;;eAGG;YAEH;;;eAGG;YAGH,iCAAiC;YJigHjC,KAAK;QAAC,CAAC,CAAC;KAEP,CAAC,CAAC,CAAC;AACJ,gJAAgJ","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~contacts-table-contacts-table-module~pages-apps-clientes-aio-table-module~pages-apps-contrat~d964ba47\"],{\n\n/***/ \"./node_modules/@angular/cdk/esm2015/table.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/@angular/cdk/esm2015/table.js ***!\n  \\****************************************************/\n/*! exports provided: DataSource, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DataRowOutlet\", function() { return DataRowOutlet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HeaderRowOutlet\", function() { return HeaderRowOutlet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FooterRowOutlet\", function() { return FooterRowOutlet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CDK_TABLE_TEMPLATE\", function() { return CDK_TABLE_TEMPLATE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkTable\", function() { return CdkTable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkCellDef\", function() { return CdkCellDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkHeaderCellDef\", function() { return CdkHeaderCellDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkFooterCellDef\", function() { return CdkFooterCellDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkColumnDef\", function() { return CdkColumnDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseCdkCell\", function() { return BaseCdkCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkHeaderCell\", function() { return CdkHeaderCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkFooterCell\", function() { return CdkFooterCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkCell\", function() { return CdkCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CDK_ROW_TEMPLATE\", function() { return CDK_ROW_TEMPLATE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseRowDef\", function() { return BaseRowDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkHeaderRowDef\", function() { return CdkHeaderRowDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkFooterRowDef\", function() { return CdkFooterRowDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkRowDef\", function() { return CdkRowDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkCellOutlet\", function() { return CdkCellOutlet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkHeaderRow\", function() { return CdkHeaderRow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkFooterRow\", function() { return CdkFooterRow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkRow\", function() { return CdkRow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkTableModule\", function() { return CdkTableModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STICKY_DIRECTIONS\", function() { return STICKY_DIRECTIONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StickyStyler\", function() { return StickyStyler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mixinHasStickyInput\", function() { return mixinHasStickyInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TEXT_COLUMN_OPTIONS\", function() { return TEXT_COLUMN_OPTIONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkTextColumn\", function() { return CdkTextColumn; });\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ \"./node_modules/@angular/cdk/esm2015/bidi.js\");\n/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/collections */ \"./node_modules/@angular/cdk/esm2015/collections.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DataSource\", function() { return _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__[\"DataSource\"]; });\n\n/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/platform */ \"./node_modules/@angular/cdk/esm2015/platform.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__[\"coerceBooleanProperty\"])(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: '[cdkCellDef]' },] },\n];\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"TemplateRef\"] }\n];\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: '[cdkHeaderCellDef]' },] },\n];\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"TemplateRef\"] }\n];\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: '[cdkFooterCellDef]' },] },\n];\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"TemplateRef\"] }\n];\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor() {\n        super(...arguments);\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n            return;\n        }\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__[\"coerceBooleanProperty\"])(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n            },] },\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['stickyEnd',] }],\n    cell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ContentChild\"], args: [CdkCellDef, { static: false },] }],\n    headerCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ContentChild\"], args: [CdkHeaderCellDef, { static: false },] }],\n    footerCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ContentChild\"], args: [CdkFooterCellDef, { static: false },] }]\n};\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"TemplateRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"IterableDiffers\"] }\n];\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"TemplateRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"IterableDiffers\"] }\n];\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n}\nCdkRowDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n            },] },\n];\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"TemplateRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"IterableDiffers\"] }\n];\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: '[cdkCellOutlet]' },] },\n];\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewContainerRef\"] }\n];\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state)) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => !state))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => !!element.style[dir]));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: '[rowOutlet]' },] },\n];\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewContainerRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: '[headerRowOutlet]' },] },\n];\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewContainerRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: '[footerRowOutlet]' },] },\n];\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewContainerRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] }\n];\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?} _document\n     * @param {?} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_6__[\"Subject\"]();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_6__[\"BehaviorSubject\"]({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"isDevMode\"])() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n            (/** @type {?} */ (console.warn))) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__[\"coerceBooleanProperty\"])(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        (_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__[\"isDataSource\"])(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        }));\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        (acc, def) => acc || !!def.getColumnsDiff());\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__[\"isDataSource\"])(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__[\"isDataSource\"])(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (this.dataSource instanceof rxjs__WEBPACK_IMPORTED_MODULE_6__[\"Observable\"]) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_6__[\"of\"])(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__[\"takeUntil\"])(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data || [];\n            this.renderRows();\n        }));\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._headerRowOutlet, def, i)));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._footerRowOutlet, def, i)));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        columnName => {\n            /** @type {?} */\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.sticky));\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.stickyEnd));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => !def.when || def.when(dataIndex, data)));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => def.when && def.when(dataIndex, data))) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            const context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        (acc, d) => {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : Object(rxjs__WEBPACK_IMPORTED_MODULE_6__[\"of\"])())\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__[\"takeUntil\"])(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        }));\n    }\n}\nCdkTable.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                },\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n            },] },\n];\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"IterableDiffers\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectorRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Attribute\"], args: ['role',] }] },\n    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__[\"Directionality\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__[\"DOCUMENT\"],] }] },\n    { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"Platform\"] }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    dataSource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    multiTemplateDataRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    _rowOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewChild\"], args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewChild\"], args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewChild\"], args: [FooterRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ContentChildren\"], args: [CdkColumnDef,] }],\n    _contentRowDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ContentChildren\"], args: [CdkRowDef,] }],\n    _contentHeaderRowDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ContentChildren\"], args: [CdkHeaderRowDef,] }],\n    _contentFooterRowDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ContentChildren\"], args: [CdkFooterRowDef,] }]\n};\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"InjectionToken\"]('text-column-options');\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n    /**\n     * @param {?} _table\n     * @param {?} _options\n     */\n    constructor(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /**\n     * Column name that should be used to reference this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (data, name) => ((/** @type {?} */ (data)))[name]));\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    _createDefaultHeaderText() {\n        /** @type {?} */\n        const name = this.name;\n        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"isDevMode\"])() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n            },] },\n];\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    headerText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    dataAccessor: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    justify: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    columnDef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewChild\"], args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewChild\"], args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewChild\"], args: [CdkHeaderCellDef, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nclass CdkTableModule {\n}\nCdkTableModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"], args: [{\n                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__[\"CommonModule\"]],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=table.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@angular/material/esm2015/paginator.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/paginator.js ***!\n  \\*************************************************************/\n/*! exports provided: MatPaginatorModule, PageEvent, MatPaginator, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatPaginatorModule\", function() { return MatPaginatorModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PageEvent\", function() { return PageEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatPaginator\", function() { return MatPaginator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_PAGINATOR_INTL_PROVIDER_FACTORY\", function() { return MAT_PAGINATOR_INTL_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatPaginatorIntl\", function() { return MatPaginatorIntl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_PAGINATOR_INTL_PROVIDER\", function() { return MAT_PAGINATOR_INTL_PROVIDER; });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/button */ \"./node_modules/@angular/material/esm2015/button.js\");\n/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/select */ \"./node_modules/@angular/material/esm2015/select.js\");\n/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/tooltip */ \"./node_modules/@angular/material/esm2015/tooltip.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_1__[\"Subject\"]();\n        /**\n         * A label for the page size selector.\n         */\n        this.itemsPerPageLabel = 'Items per page:';\n        /**\n         * A label for the button that increments the current page.\n         */\n        this.nextPageLabel = 'Next page';\n        /**\n         * A label for the button that decrements the current page.\n         */\n        this.previousPageLabel = 'Previous page';\n        /**\n         * A label for the button that moves to the first page.\n         */\n        this.firstPageLabel = 'First page';\n        /**\n         * A label for the button that moves to the last page.\n         */\n        this.lastPageLabel = 'Last page';\n        /**\n         * A label for the range of items within the current page and the length of the whole list.\n         */\n        this.getRangeLabel = (/**\n         * @param {?} page\n         * @param {?} pageSize\n         * @param {?} length\n         * @return {?}\n         */\n        (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            /** @type {?} */\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            /** @type {?} */\n            const endIndex = startIndex < length ?\n                Math.min(startIndex + pageSize, length) :\n                startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        });\n    }\n}\nMatPaginatorIntl.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"], args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatPaginatorIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵdefineInjectable\"])({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"SkipSelf\"](), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The default page size if there is no page size and there are no provided page size options.\n * @type {?}\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n// Boilerplate for applying mixins to MatPaginator.\n/**\n * \\@docs-private\n */\nclass MatPaginatorBase {\n}\n/** @type {?} */\nconst _MatPaginatorBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"mixinDisabled\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"mixinInitialized\"])(MatPaginatorBase));\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    /**\n     * @param {?} _intl\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_intl, _changeDetectorRef) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /**\n         * Event emitted when the paginator changes the page size or page index.\n         */\n        this.page = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"EventEmitter\"]();\n        this._intlChanges = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n    }\n    /**\n     * The zero-based page index of the displayed list of items. Defaulted to 0.\n     * @return {?}\n     */\n    get pageIndex() { return this._pageIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageIndex(value) {\n        this._pageIndex = Math.max(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__[\"coerceNumberProperty\"])(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The length of the total number of items that are being paginated. Defaulted to 0.\n     * @return {?}\n     */\n    get length() { return this._length; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set length(value) {\n        this._length = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__[\"coerceNumberProperty\"])(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Number of items to display on a page. By default set to 50.\n     * @return {?}\n     */\n    get pageSize() { return this._pageSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageSize(value) {\n        this._pageSize = Math.max(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__[\"coerceNumberProperty\"])(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /**\n     * The set of provided page size options to display to the user.\n     * @return {?}\n     */\n    get pageSizeOptions() { return this._pageSizeOptions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map((/**\n         * @param {?} p\n         * @return {?}\n         */\n        p => Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__[\"coerceNumberProperty\"])(p)));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /**\n     * Whether to hide the page size selection UI from the user.\n     * @return {?}\n     */\n    get hidePageSize() { return this._hidePageSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hidePageSize(value) {\n        this._hidePageSize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * Whether to show the first/last buttons UI to the user.\n     * @return {?}\n     */\n    get showFirstLastButtons() { return this._showFirstLastButtons; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /**\n     * Advances to the next page if it exists.\n     * @return {?}\n     */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex++;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move back to the previous page if it exists.\n     * @return {?}\n     */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex--;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move to the first page if not already there.\n     * @return {?}\n     */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move to the last page if not already there.\n     * @return {?}\n     */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Whether there is a previous page.\n     * @return {?}\n     */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /**\n     * Whether there is a next page.\n     * @return {?}\n     */\n    hasNextPage() {\n        /** @type {?} */\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /**\n     * Calculate the number of pages\n     * @return {?}\n     */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     * @param {?} pageSize\n     * @return {?}\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        /** @type {?} */\n        const startIndex = this.pageIndex * this.pageSize;\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Checks whether the buttons for going forwards should be disabled.\n     * @return {?}\n     */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /**\n     * Checks whether the buttons for going backwards should be disabled.\n     * @return {?}\n     */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     * @private\n     * @return {?}\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize = this.pageSizeOptions.length != 0 ?\n                this.pageSizeOptions[0] :\n                DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => a - b));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits an event notifying that a change of the paginator's properties has been triggered.\n     * @private\n     * @param {?} previousPageIndex\n     * @return {?}\n     */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length\n        });\n    }\n}\nMatPaginator.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Component\"], args: [{selector: 'mat-paginator',\n                exportAs: 'matPaginator',\n                template: \"<div class=\\\"mat-paginator-outer-container\\\"><div class=\\\"mat-paginator-container\\\"><div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\"><div class=\\\"mat-paginator-page-size-label\\\">{{_intl.itemsPerPageLabel}}</div><mat-form-field *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\" [color]=\\\"color\\\" class=\\\"mat-paginator-page-size-select\\\"><mat-select [value]=\\\"pageSize\\\" [disabled]=\\\"disabled\\\" [aria-label]=\\\"_intl.itemsPerPageLabel\\\" (selectionChange)=\\\"_changePageSize($event.value)\\\"><mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">{{pageSizeOption}}</mat-option></mat-select></mat-form-field><div *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div></div><div class=\\\"mat-paginator-range-actions\\\"><div class=\\\"mat-paginator-range-label\\\">{{_intl.getRangeLabel(pageIndex, pageSize, length)}}</div><button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-first\\\" (click)=\\\"firstPage()\\\" [attr.aria-label]=\\\"_intl.firstPageLabel\\\" [matTooltip]=\\\"_intl.firstPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-previous\\\" (click)=\\\"previousPage()\\\" [attr.aria-label]=\\\"_intl.previousPageLabel\\\" [matTooltip]=\\\"_intl.previousPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-next\\\" (click)=\\\"nextPage()\\\" [attr.aria-label]=\\\"_intl.nextPageLabel\\\" [matTooltip]=\\\"_intl.nextPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-last\\\" (click)=\\\"lastPage()\\\" [attr.aria-label]=\\\"_intl.lastPageLabel\\\" [matTooltip]=\\\"_intl.lastPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/></svg></button></div></div></div>\",\n                styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\"],\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-paginator',\n                },\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectionStrategy\"].OnPush,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewEncapsulation\"].None,\n            },] },\n];\n/** @nocollapse */\nMatPaginator.ctorParameters = () => [\n    { type: MatPaginatorIntl },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectorRef\"] }\n];\nMatPaginator.propDecorators = {\n    color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    pageIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    length: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    pageSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    pageSizeOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    hidePageSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    showFirstLastButtons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    page: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Output\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                imports: [\n                    _angular_common__WEBPACK_IMPORTED_MODULE_4__[\"CommonModule\"],\n                    _angular_material_button__WEBPACK_IMPORTED_MODULE_5__[\"MatButtonModule\"],\n                    _angular_material_select__WEBPACK_IMPORTED_MODULE_6__[\"MatSelectModule\"],\n                    _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__[\"MatTooltipModule\"],\n                ],\n                exports: [MatPaginator],\n                declarations: [MatPaginator],\n                providers: [MAT_PAGINATOR_INTL_PROVIDER],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=paginator.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@angular/material/esm2015/sort.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/sort.js ***!\n  \\********************************************************/\n/*! exports provided: MatSortModule, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSort, matSortAnimations */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSortModule\", function() { return MatSortModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSortHeader\", function() { return MatSortHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\", function() { return MAT_SORT_HEADER_INTL_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSortHeaderIntl\", function() { return MatSortHeaderIntl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SORT_HEADER_INTL_PROVIDER\", function() { return MAT_SORT_HEADER_INTL_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSort\", function() { return MatSort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"matSortAnimations\", function() { return matSortAnimations; });\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations */ \"./node_modules/@angular/animations/fesm2015/animations.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatSort.\n/**\n * \\@docs-private\n */\nclass MatSortBase {\n}\n/** @type {?} */\nconst _MatSortMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"mixinInitialized\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"mixinDisabled\"])(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nclass MatSort extends _MatSortMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_3__[\"Subject\"]();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.sortChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]();\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @return {?}\n     */\n    get direction() { return this._direction; }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    set direction(direction) {\n        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"isDevMode\"])() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__[\"coerceBooleanProperty\"])(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    register(sortable) {\n        if (!sortable.id) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        /** @type {?} */\n        const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        /** @type {?} */\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        /** @type {?} */\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                inputs: ['disabled: matSortDisabled']\n            },] },\n];\nMatSort.propDecorators = {\n    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['matSortActive',] }],\n    start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['matSortStart',] }],\n    direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['matSortDirection',] }],\n    disableClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['matSortDisableClear',] }],\n    sortChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Output\"], args: ['matSortChange',] }]\n};\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    /** @type {?} */\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SORT_ANIMATION_TRANSITION = _angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"AnimationDurations\"].ENTERING + ' ' +\n    _angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"AnimationCurves\"].STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\nconst matSortAnimations = {\n    /**\n     * Animation that moves the sort indicator.\n     */\n    indicator: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('indicator', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(10px)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the left pointer of the indicator based on the sorting direction.\n     */\n    leftPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('leftPointer', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'rotate(-45deg)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'rotate(45deg)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the right pointer of the indicator based on the sorting direction.\n     */\n    rightPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('rightPointer', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'rotate(45deg)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'rotate(-45deg)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that controls the arrow opacity.\n     */\n    arrowOpacity: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('arrowOpacity', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ opacity: 1 })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('desc-to-hint, asc-to-hint, hint', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ opacity: .54 })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => asc, * => desc, * => active, * => hint, * => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])('0ms')),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* <=> *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('arrowPosition', [\n        // Hidden Above => Hint Center\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => desc-to-hint, * => desc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"keyframes\"])([\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(-25%)' }),\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => hint-to-desc, * => active-to-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"keyframes\"])([\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' }),\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => asc-to-hint, * => asc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"keyframes\"])([\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(25%)' }),\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => hint-to-asc, * => active-to-asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"keyframes\"])([\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' }),\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(-25%)' })\n        ]))),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('hint-to-desc, active-to-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(-25%)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('hint-to-asc, active-to-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(25%)' })),\n    ]),\n    /**\n     * Necessary trigger that calls animate on children animations.\n     */\n    allowChildren: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('allowChildren', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* <=> *', [\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"query\"])('@*', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animateChild\"])(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_3__[\"Subject\"]();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = (/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => {\n            return `Change sorting for ${id}`;\n        });\n    }\n}\nMatSortHeaderIntl.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Injectable\"], args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵdefineInjectable\"])({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"SkipSelf\"](), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n/**\n * \\@docs-private\n */\nclass MatSortHeaderBase {\n}\n/** @type {?} */\nconst _MatSortHeaderMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"mixinDisabled\"])(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _columnDef\n     */\n    constructor(_intl, changeDetectorRef, _sort, _columnDef) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._rerenderSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_3__[\"merge\"])(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__[\"coerceBooleanProperty\"])(v); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState;\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    _handleClick() {\n        if (this._isDisabled()) {\n            return;\n        }\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n        // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n        // the direction it is facing.\n        /** @type {?} */\n        const viewState = this._isSorted() ?\n            { fromState: this._arrowDirection, toState: 'active' } :\n            { fromState: 'active', toState: this._arrowDirection };\n        this._setAnimationTransitionState(viewState);\n        this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    _getArrowViewState() {\n        /** @type {?} */\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    /**\n     * @return {?}\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return null;\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n}\nMatSortHeader.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" *ngIf=\\\"_renderArrow()\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n                host: {\n                    '(click)': '_handleClick()',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()',\n                },\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ]\n            },] },\n];\n/** @nocollapse */\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectorRef\"] },\n    { type: MatSort, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }] }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    disableClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSortModule {\n}\nMatSortModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"], args: [{\n                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__[\"CommonModule\"]],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=sort.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@angular/material/esm2015/table.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/table.js ***!\n  \\*********************************************************/\n/*! exports provided: MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatTableModule\", function() { return MatTableModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatCellDef\", function() { return MatCellDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatHeaderCellDef\", function() { return MatHeaderCellDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatFooterCellDef\", function() { return MatFooterCellDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatColumnDef\", function() { return MatColumnDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatHeaderCell\", function() { return MatHeaderCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatFooterCell\", function() { return MatFooterCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatCell\", function() { return MatCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatTable\", function() { return MatTable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatHeaderRowDef\", function() { return MatHeaderRowDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatFooterRowDef\", function() { return MatFooterRowDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatRowDef\", function() { return MatRowDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatHeaderRow\", function() { return MatHeaderRow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatFooterRow\", function() { return MatFooterRow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatRow\", function() { return MatRow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatTableDataSource\", function() { return MatTableDataSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatTextColumn\", function() { return MatTextColumn; });\n/* harmony import */ var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/table */ \"./node_modules/@angular/cdk/esm2015/table.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTable extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkTable\"] {\n    constructor() {\n        super(...arguments);\n        /**\n         * Overrides the sticky CSS class set by the `CdkTable`.\n         */\n        this.stickyCssClass = 'mat-table-sticky';\n    }\n}\nMatTable.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CDK_TABLE_TEMPLATE\"],\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n                host: {\n                    'class': 'mat-table',\n                },\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkTable\"], useExisting: MatTable }],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkCellDef\"] {\n}\nMatCellDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkCellDef\"], useExisting: MatCellDef }]\n            },] },\n];\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkHeaderCellDef\"] {\n}\nMatHeaderCellDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkHeaderCellDef\"], useExisting: MatHeaderCellDef }]\n            },] },\n];\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkFooterCellDef\"] {\n}\nMatFooterCellDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkFooterCellDef\"], useExisting: MatFooterCellDef }]\n            },] },\n];\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkColumnDef\"] {\n}\nMatColumnDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[matColumnDef]',\n                providers: [\n                    { provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkColumnDef\"], useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ],\n            },] },\n];\nMatColumnDef.propDecorators = {\n    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['matColumnDef',] }],\n    sticky: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    stickyEnd: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }]\n};\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass MatHeaderCell extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkHeaderCell\"] {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatHeaderCell.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nMatHeaderCell.ctorParameters = () => [\n    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkColumnDef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass MatFooterCell extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkFooterCell\"] {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatFooterCell.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatFooterCell.ctorParameters = () => [\n    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkColumnDef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass MatCell extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkCell\"] {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatCell.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatCell.ctorParameters = () => [\n    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkColumnDef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkHeaderRowDef\"] {\n}\nMatHeaderRowDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkHeaderRowDef\"], useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n            },] },\n];\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkFooterRowDef\"] {\n}\nMatFooterRowDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkFooterRowDef\"], useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n            },] },\n];\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass MatRowDef extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkRowDef\"] {\n}\nMatRowDef.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkRowDef\"], useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatHeaderRow extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkHeaderRow\"] {\n}\nMatHeaderRow.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'mat-header-row, tr[mat-header-row]',\n                template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CDK_ROW_TEMPLATE\"],\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkHeaderRow\"], useExisting: MatHeaderRow }],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatFooterRow extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkFooterRow\"] {\n}\nMatFooterRow.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CDK_ROW_TEMPLATE\"],\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkFooterRow\"], useExisting: MatFooterRow }],\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatRow extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkRow\"] {\n}\nMatRow.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'mat-row, tr[mat-row]',\n                template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CDK_ROW_TEMPLATE\"],\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                exportAs: 'matRow',\n                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkRow\"], useExisting: MatRow }],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass MatTextColumn extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkTextColumn\"] {\n}\nMatTextColumn.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"], args: [{\n                imports: [\n                    _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"CdkTableModule\"],\n                    _angular_common__WEBPACK_IMPORTED_MODULE_2__[\"CommonModule\"],\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_3__[\"MatCommonModule\"],\n                ],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n * @type {?}\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n * @template T\n */\nclass MatTableDataSource extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__[\"DataSource\"] {\n    /**\n     * @param {?=} initialData\n     */\n    constructor(initialData = []) {\n        super();\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new rxjs__WEBPACK_IMPORTED_MODULE_5__[\"BehaviorSubject\"]([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        this._filter = new rxjs__WEBPACK_IMPORTED_MODULE_5__[\"BehaviorSubject\"]('');\n        /**\n         * Used to react to internal changes of the paginator that are made by the data source itself.\n         */\n        this._internalPageChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__[\"Subject\"]();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__[\"Subscription\"].EMPTY;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (/**\n         * @param {?} data\n         * @param {?} sortHeaderId\n         * @return {?}\n         */\n        (data, sortHeaderId) => {\n            /** @type {?} */\n            const value = ((/** @type {?} */ (data)))[sortHeaderId];\n            if (Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__[\"_isNumberValue\"])(value)) {\n                /** @type {?} */\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        });\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (/**\n         * @param {?} data\n         * @param {?} sort\n         * @return {?}\n         */\n        (data, sort) => {\n            /** @type {?} */\n            const active = sort.active;\n            /** @type {?} */\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                /** @type {?} */\n                let valueA = this.sortingDataAccessor(a, active);\n                /** @type {?} */\n                let valueB = this.sortingDataAccessor(b, active);\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                /** @type {?} */\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            }));\n        });\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @return Whether the filter matches against the data\n         */\n        this.filterPredicate = (/**\n         * @param {?} data\n         * @param {?} filter\n         * @return {?}\n         */\n        (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            /** @type {?} */\n            const dataStr = Object.keys(data).reduce((/**\n             * @param {?} currentTerm\n             * @param {?} key\n             * @return {?}\n             */\n            (currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + ((/** @type {?} */ (data)))[key] + '◬';\n            }), '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            /** @type {?} */\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        });\n        this._data = new rxjs__WEBPACK_IMPORTED_MODULE_5__[\"BehaviorSubject\"](initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set data(data) { this._data.next(data); }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     * @return {?}\n     */\n    get filter() { return this._filter.value; }\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    set filter(filter) { this._filter.next(filter); }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     * @return {?}\n     */\n    get sort() { return this._sort; }\n    /**\n     * @param {?} sort\n     * @return {?}\n     */\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     * @return {?}\n     */\n    get paginator() { return this._paginator; }\n    /**\n     * @param {?} paginator\n     * @return {?}\n     */\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        /** @type {?} */\n        const sortChange = this._sort ?\n            (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_5__[\"merge\"])(this._sort.sortChange, this._sort.initialized))) :\n            Object(rxjs__WEBPACK_IMPORTED_MODULE_5__[\"of\"])(null);\n        /** @type {?} */\n        const pageChange = this._paginator ?\n            (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_5__[\"merge\"])(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :\n            Object(rxjs__WEBPACK_IMPORTED_MODULE_5__[\"of\"])(null);\n        /** @type {?} */\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        /** @type {?} */\n        const filteredData = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__[\"combineLatest\"])([dataStream, this._filter])\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__[\"map\"])((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._filterData(data))));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        /** @type {?} */\n        const orderedData = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__[\"combineLatest\"])([filteredData, sortChange])\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__[\"map\"])((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._orderData(data))));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        /** @type {?} */\n        const paginatedData = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__[\"combineLatest\"])([orderedData, pageChange])\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__[\"map\"])((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._pageData(data))));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => this._renderData.next(data)));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter((/**\n             * @param {?} obj\n             * @return {?}\n             */\n            obj => this.filterPredicate(obj, this.filter)));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        /** @type {?} */\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                /** @type {?} */\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                /** @type {?} */\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        }));\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    connect() { return this._renderData; }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=table.js.map\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~contacts-table-contacts-table-module~pages-apps-clientes-aio-table-module~pages-apps-contrat~d964ba47-es2015.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, Inject, isDevMode, Optional, ViewChild, InjectionToken, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { isDataSource } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellDef]' },] },\n];\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] },\n];\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] },\n];\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor() {\n        super(...arguments);\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n            return;\n        }\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n            },] },\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef, { static: false },] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef, { static: false },] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef, { static: false },] }]\n};\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n}\nCdkRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n            },] },\n];\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] },\n];\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state)) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => !state))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => !!element.style[dir]));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[rowOutlet]' },] },\n];\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[headerRowOutlet]' },] },\n];\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[footerRowOutlet]' },] },\n];\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?} _document\n     * @param {?} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n            (/** @type {?} */ (console.warn))) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        (_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        }));\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        (acc, def) => acc || !!def.getColumnsDiff());\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data || [];\n            this.renderRows();\n        }));\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._headerRowOutlet, def, i)));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._footerRowOutlet, def, i)));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        columnName => {\n            /** @type {?} */\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.sticky));\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.stickyEnd));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => !def.when || def.when(dataIndex, data)));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => def.when && def.when(dataIndex, data))) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            const context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        (acc, d) => {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        }));\n    }\n}\nCdkTable.decorators = [\n    { type: Component, args: [{selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\n};\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n    /**\n     * @param {?} _table\n     * @param {?} _options\n     */\n    constructor(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /**\n     * Column name that should be used to reference this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (data, name) => ((/** @type {?} */ (data)))[name]));\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    _createDefaultHeaderText() {\n        /** @type {?} */\n        const name = this.name;\n        if (isDevMode() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.decorators = [\n    { type: Component, args: [{selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nclass CdkTableModule {\n}\nCdkTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn };\n//# sourceMappingURL=table.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional, SkipSelf, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation, ɵɵdefineInjectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * A label for the page size selector.\n         */\n        this.itemsPerPageLabel = 'Items per page:';\n        /**\n         * A label for the button that increments the current page.\n         */\n        this.nextPageLabel = 'Next page';\n        /**\n         * A label for the button that decrements the current page.\n         */\n        this.previousPageLabel = 'Previous page';\n        /**\n         * A label for the button that moves to the first page.\n         */\n        this.firstPageLabel = 'First page';\n        /**\n         * A label for the button that moves to the last page.\n         */\n        this.lastPageLabel = 'Last page';\n        /**\n         * A label for the range of items within the current page and the length of the whole list.\n         */\n        this.getRangeLabel = (/**\n         * @param {?} page\n         * @param {?} pageSize\n         * @param {?} length\n         * @return {?}\n         */\n        (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            /** @type {?} */\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            /** @type {?} */\n            const endIndex = startIndex < length ?\n                Math.min(startIndex + pageSize, length) :\n                startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        });\n    }\n}\nMatPaginatorIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatPaginatorIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The default page size if there is no page size and there are no provided page size options.\n * @type {?}\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n// Boilerplate for applying mixins to MatPaginator.\n/**\n * \\@docs-private\n */\nclass MatPaginatorBase {\n}\n/** @type {?} */\nconst _MatPaginatorBase = mixinDisabled(mixinInitialized(MatPaginatorBase));\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    /**\n     * @param {?} _intl\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_intl, _changeDetectorRef) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /**\n         * Event emitted when the paginator changes the page size or page index.\n         */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n    }\n    /**\n     * The zero-based page index of the displayed list of items. Defaulted to 0.\n     * @return {?}\n     */\n    get pageIndex() { return this._pageIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The length of the total number of items that are being paginated. Defaulted to 0.\n     * @return {?}\n     */\n    get length() { return this._length; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Number of items to display on a page. By default set to 50.\n     * @return {?}\n     */\n    get pageSize() { return this._pageSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /**\n     * The set of provided page size options to display to the user.\n     * @return {?}\n     */\n    get pageSizeOptions() { return this._pageSizeOptions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map((/**\n         * @param {?} p\n         * @return {?}\n         */\n        p => coerceNumberProperty(p)));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /**\n     * Whether to hide the page size selection UI from the user.\n     * @return {?}\n     */\n    get hidePageSize() { return this._hidePageSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to show the first/last buttons UI to the user.\n     * @return {?}\n     */\n    get showFirstLastButtons() { return this._showFirstLastButtons; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /**\n     * Advances to the next page if it exists.\n     * @return {?}\n     */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex++;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move back to the previous page if it exists.\n     * @return {?}\n     */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex--;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move to the first page if not already there.\n     * @return {?}\n     */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move to the last page if not already there.\n     * @return {?}\n     */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Whether there is a previous page.\n     * @return {?}\n     */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /**\n     * Whether there is a next page.\n     * @return {?}\n     */\n    hasNextPage() {\n        /** @type {?} */\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /**\n     * Calculate the number of pages\n     * @return {?}\n     */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     * @param {?} pageSize\n     * @return {?}\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        /** @type {?} */\n        const startIndex = this.pageIndex * this.pageSize;\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Checks whether the buttons for going forwards should be disabled.\n     * @return {?}\n     */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /**\n     * Checks whether the buttons for going backwards should be disabled.\n     * @return {?}\n     */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     * @private\n     * @return {?}\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize = this.pageSizeOptions.length != 0 ?\n                this.pageSizeOptions[0] :\n                DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => a - b));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits an event notifying that a change of the paginator's properties has been triggered.\n     * @private\n     * @param {?} previousPageIndex\n     * @return {?}\n     */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length\n        });\n    }\n}\nMatPaginator.decorators = [\n    { type: Component, args: [{selector: 'mat-paginator',\n                exportAs: 'matPaginator',\n                template: \"<div class=\\\"mat-paginator-outer-container\\\"><div class=\\\"mat-paginator-container\\\"><div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\"><div class=\\\"mat-paginator-page-size-label\\\">{{_intl.itemsPerPageLabel}}</div><mat-form-field *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\" [color]=\\\"color\\\" class=\\\"mat-paginator-page-size-select\\\"><mat-select [value]=\\\"pageSize\\\" [disabled]=\\\"disabled\\\" [aria-label]=\\\"_intl.itemsPerPageLabel\\\" (selectionChange)=\\\"_changePageSize($event.value)\\\"><mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">{{pageSizeOption}}</mat-option></mat-select></mat-form-field><div *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div></div><div class=\\\"mat-paginator-range-actions\\\"><div class=\\\"mat-paginator-range-label\\\">{{_intl.getRangeLabel(pageIndex, pageSize, length)}}</div><button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-first\\\" (click)=\\\"firstPage()\\\" [attr.aria-label]=\\\"_intl.firstPageLabel\\\" [matTooltip]=\\\"_intl.firstPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-previous\\\" (click)=\\\"previousPage()\\\" [attr.aria-label]=\\\"_intl.previousPageLabel\\\" [matTooltip]=\\\"_intl.previousPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-next\\\" (click)=\\\"nextPage()\\\" [attr.aria-label]=\\\"_intl.nextPageLabel\\\" [matTooltip]=\\\"_intl.nextPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-last\\\" (click)=\\\"lastPage()\\\" [attr.aria-label]=\\\"_intl.lastPageLabel\\\" [matTooltip]=\\\"_intl.lastPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/></svg></button></div></div></div>\",\n                styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\"],\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-paginator',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatPaginator.ctorParameters = () => [\n    { type: MatPaginatorIntl },\n    { type: ChangeDetectorRef }\n];\nMatPaginator.propDecorators = {\n    color: [{ type: Input }],\n    pageIndex: [{ type: Input }],\n    length: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    pageSizeOptions: [{ type: Input }],\n    hidePageSize: [{ type: Input }],\n    showFirstLastButtons: [{ type: Input }],\n    page: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatSelectModule,\n                    MatTooltipModule,\n                ],\n                exports: [MatPaginator],\n                declarations: [MatPaginator],\n                providers: [MAT_PAGINATOR_INTL_PROVIDER],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatPaginatorModule, PageEvent, MatPaginator, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER };\n//# sourceMappingURL=paginator.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, Inject, ɵɵdefineInjectable } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatSort.\n/**\n * \\@docs-private\n */\nclass MatSortBase {\n}\n/** @type {?} */\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nclass MatSort extends _MatSortMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @return {?}\n     */\n    get direction() { return this._direction; }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    set direction(direction) {\n        if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    register(sortable) {\n        if (!sortable.id) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        /** @type {?} */\n        const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        /** @type {?} */\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        /** @type {?} */\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.decorators = [\n    { type: Directive, args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                inputs: ['disabled: matSortDisabled']\n            },] },\n];\nMatSort.propDecorators = {\n    active: [{ type: Input, args: ['matSortActive',] }],\n    start: [{ type: Input, args: ['matSortStart',] }],\n    direction: [{ type: Input, args: ['matSortDirection',] }],\n    disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n    sortChange: [{ type: Output, args: ['matSortChange',] }]\n};\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    /** @type {?} */\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\nconst matSortAnimations = {\n    /**\n     * Animation that moves the sort indicator.\n     */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the left pointer of the indicator based on the sorting direction.\n     */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the right pointer of the indicator based on the sorting direction.\n     */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that controls the arrow opacity.\n     */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /**\n     * Necessary trigger that calls animate on children animations.\n     */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = (/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => {\n            return `Change sorting for ${id}`;\n        });\n    }\n}\nMatSortHeaderIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n/**\n * \\@docs-private\n */\nclass MatSortHeaderBase {\n}\n/** @type {?} */\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _columnDef\n     */\n    constructor(_intl, changeDetectorRef, _sort, _columnDef) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState;\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    _handleClick() {\n        if (this._isDisabled()) {\n            return;\n        }\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n        // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n        // the direction it is facing.\n        /** @type {?} */\n        const viewState = this._isSorted() ?\n            { fromState: this._arrowDirection, toState: 'active' } :\n            { fromState: 'active', toState: this._arrowDirection };\n        this._setAnimationTransitionState(viewState);\n        this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    _getArrowViewState() {\n        /** @type {?} */\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    /**\n     * @return {?}\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return null;\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n}\nMatSortHeader.decorators = [\n    { type: Component, args: [{selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" *ngIf=\\\"_renderArrow()\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n                host: {\n                    '(click)': '_handleClick()',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ]\n            },] },\n];\n/** @nocollapse */\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: MatSort, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: Input, args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: Input }],\n    start: [{ type: Input }],\n    disableClear: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSortModule {\n}\nMatSortModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSortModule, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSort, matSortAnimations };\n//# sourceMappingURL=sort.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /**\n         * Overrides the sticky CSS class set by the `CdkTable`.\n         */\n        this.stickyCssClass = 'mat-table-sticky';\n    }\n}\nMatTable.decorators = [\n    { type: Component, args: [{selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n                host: {\n                    'class': 'mat-table',\n                },\n                providers: [{ provide: CdkTable, useExisting: MatTable }],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            },] },\n];\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            },] },\n];\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n            },] },\n];\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n}\nMatColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matColumnDef]',\n                providers: [\n                    { provide: CdkColumnDef, useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ],\n            },] },\n];\nMatColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['matColumnDef',] }],\n    sticky: [{ type: Input }],\n    stickyEnd: [{ type: Input }]\n};\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass MatHeaderCell extends CdkHeaderCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nMatHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass MatFooterCell extends CdkFooterCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass MatCell extends CdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n            },] },\n];\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n            },] },\n];\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'mat-header-row, tr[mat-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.decorators = [\n    { type: Component, args: [{selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatRow extends CdkRow {\n}\nMatRow.decorators = [\n    { type: Component, args: [{selector: 'mat-row, tr[mat-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                providers: [{ provide: CdkRow, useExisting: MatRow }],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.decorators = [\n    { type: Component, args: [{selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CdkTableModule,\n                    CommonModule,\n                    MatCommonModule,\n                ],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n * @type {?}\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n * @template T\n */\nclass MatTableDataSource extends DataSource {\n    /**\n     * @param {?=} initialData\n     */\n    constructor(initialData = []) {\n        super();\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new BehaviorSubject([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        this._filter = new BehaviorSubject('');\n        /**\n         * Used to react to internal changes of the paginator that are made by the data source itself.\n         */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = Subscription.EMPTY;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (/**\n         * @param {?} data\n         * @param {?} sortHeaderId\n         * @return {?}\n         */\n        (data, sortHeaderId) => {\n            /** @type {?} */\n            const value = ((/** @type {?} */ (data)))[sortHeaderId];\n            if (_isNumberValue(value)) {\n                /** @type {?} */\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        });\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (/**\n         * @param {?} data\n         * @param {?} sort\n         * @return {?}\n         */\n        (data, sort) => {\n            /** @type {?} */\n            const active = sort.active;\n            /** @type {?} */\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                /** @type {?} */\n                let valueA = this.sortingDataAccessor(a, active);\n                /** @type {?} */\n                let valueB = this.sortingDataAccessor(b, active);\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                /** @type {?} */\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            }));\n        });\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @return Whether the filter matches against the data\n         */\n        this.filterPredicate = (/**\n         * @param {?} data\n         * @param {?} filter\n         * @return {?}\n         */\n        (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            /** @type {?} */\n            const dataStr = Object.keys(data).reduce((/**\n             * @param {?} currentTerm\n             * @param {?} key\n             * @return {?}\n             */\n            (currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + ((/** @type {?} */ (data)))[key] + '◬';\n            }), '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            /** @type {?} */\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        });\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set data(data) { this._data.next(data); }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     * @return {?}\n     */\n    get filter() { return this._filter.value; }\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    set filter(filter) { this._filter.next(filter); }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     * @return {?}\n     */\n    get sort() { return this._sort; }\n    /**\n     * @param {?} sort\n     * @return {?}\n     */\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     * @return {?}\n     */\n    get paginator() { return this._paginator; }\n    /**\n     * @param {?} paginator\n     * @return {?}\n     */\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        /** @type {?} */\n        const sortChange = this._sort ?\n            (/** @type {?} */ (merge(this._sort.sortChange, this._sort.initialized))) :\n            of(null);\n        /** @type {?} */\n        const pageChange = this._paginator ?\n            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :\n            of(null);\n        /** @type {?} */\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        /** @type {?} */\n        const filteredData = combineLatest([dataStream, this._filter])\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._filterData(data))));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        /** @type {?} */\n        const orderedData = combineLatest([filteredData, sortChange])\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._orderData(data))));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        /** @type {?} */\n        const paginatedData = combineLatest([orderedData, pageChange])\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._pageData(data))));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => this._renderData.next(data)));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter((/**\n             * @param {?} obj\n             * @return {?}\n             */\n            obj => this.filterPredicate(obj, this.filter)));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        /** @type {?} */\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                /** @type {?} */\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                /** @type {?} */\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        }));\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    connect() { return this._renderData; }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn };\n//# sourceMappingURL=table.js.map\n"]}