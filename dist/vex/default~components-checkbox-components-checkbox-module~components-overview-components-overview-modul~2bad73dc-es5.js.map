{"version":3,"sources":["default~components-checkbox-components-checkbox-module~components-overview-components-overview-modul~2bad73dc-es5.js","webpack:///node_modules/@angular/material/esm2015/checkbox.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~components-checkbox-components-checkbox-module~components-overview-components-overview-modul~2bad73dc\"],{\n\n/***/ \"./node_modules/@angular/material/esm2015/checkbox.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/checkbox.js ***!\n  \\************************************************************/\n/*! exports provided: MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, _MatCheckboxRequiredValidatorModule, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR\", function() { return MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransitionCheckState\", function() { return TransitionCheckState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatCheckboxChange\", function() { return MatCheckboxChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatCheckbox\", function() { return MatCheckbox; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_CHECKBOX_CLICK_ACTION\", function() { return MAT_CHECKBOX_CLICK_ACTION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_MatCheckboxRequiredValidatorModule\", function() { return _MatCheckboxRequiredValidatorModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatCheckboxModule\", function() { return MatCheckboxModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_CHECKBOX_REQUIRED_VALIDATOR\", function() { return MAT_CHECKBOX_REQUIRED_VALIDATOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatCheckboxRequiredValidator\", function() { return MatCheckboxRequiredValidator; });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ \"./node_modules/@angular/cdk/esm2015/a11y.js\");\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ \"./node_modules/@angular/forms/fesm2015/forms.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/platform-browser/animations */ \"./node_modules/@angular/platform-browser/fesm2015/animations.js\");\n/* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/observers */ \"./node_modules/@angular/cdk/esm2015/observers.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @type {?}\n */\nconst MAT_CHECKBOX_CLICK_ACTION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"InjectionToken\"]('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__[\"NG_VALUE_ACCESSOR\"],\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])((/**\n     * @return {?}\n     */\n    () => MatCheckbox)),\n    multi: true\n};\n/** @enum {number} */\nconst TransitionCheckState = {\n    /** The initial state of the component before any user interaction. */\n    Init: 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked: 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked: 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate: 3,\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatCheckboxMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__[\"mixinTabIndex\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__[\"mixinColor\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__[\"mixinDisableRipple\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__[\"mixinDisabled\"])(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusMonitor\n     * @param {?} _ngZone\n     * @param {?} tabIndex\n     * @param {?} _clickAction\n     * @param {?=} _animationMode\n     */\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._clickAction = _clickAction;\n        this._animationMode = _animationMode;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"EventEmitter\"]();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        this.indeterminateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"EventEmitter\"]();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._currentAnimationClass = '';\n        this._currentCheckState = TransitionCheckState.Init;\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this._focusMonitor.monitor(elementRef, true).subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._onTouched();\n                    _changeDetectorRef.markForCheck();\n                }));\n            }\n        }));\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__[\"coerceBooleanProperty\"])(value); }\n    // TODO: Delete next major revision.\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() { }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__[\"coerceBooleanProperty\"])(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n    get indeterminate() { return this._indeterminate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set indeterminate(value) {\n        /** @type {?} */\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            }\n            else {\n                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n    _getAriaChecked() {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n    /**\n     * @private\n     * @param {?} newState\n     * @return {?}\n     */\n    _transitionCheckState(newState) {\n        /** @type {?} */\n        let oldState = this._currentCheckState;\n        /** @type {?} */\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            /** @type {?} */\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    element.classList.remove(animationClass);\n                }), 1000);\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                }));\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /**\n     * Focuses the checkbox.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'keyboard', options) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    /**\n     * @private\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        /** @type {?} */\n        let animSuffix = '';\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n}\nMatCheckbox.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Component\"], args: [{selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}@media (-ms-high-contrast:active){.mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media (hover:none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectionStrategy\"].OnPush\n            },] },\n];\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ElementRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectorRef\"] },\n    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__[\"FocusMonitor\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"] },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Attribute\"], args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__[\"ANIMATION_MODULE_TYPE\"],] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"], args: ['aria-label',] }],\n    ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"], args: ['aria-labelledby',] }],\n    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Output\"] }],\n    indeterminateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Output\"] }],\n    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    _inputElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewChild\"], args: ['input', { static: false },] }],\n    ripple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewChild\"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__[\"MatRipple\"], { static: false },] }],\n    checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    indeterminate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__[\"NG_VALIDATORS\"],\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])((/**\n     * @return {?}\n     */\n    () => MatCheckboxRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends _angular_forms__WEBPACK_IMPORTED_MODULE_3__[\"CheckboxRequiredValidator\"] {\n}\nMatCheckboxRequiredValidator.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based checkbox implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator],\n            },] },\n];\nclass MatCheckboxModule {\n}\nMatCheckboxModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                imports: [\n                    _angular_common__WEBPACK_IMPORTED_MODULE_7__[\"CommonModule\"], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__[\"MatRippleModule\"], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__[\"MatCommonModule\"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_6__[\"ObserversModule\"],\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, _angular_material_core__WEBPACK_IMPORTED_MODULE_4__[\"MatCommonModule\"], _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=checkbox.js.map\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~components-checkbox-components-checkbox-module~components-overview-components-overview-modul~2bad73dc-es2015.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @type {?}\n */\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatCheckbox)),\n    multi: true\n};\n/** @enum {number} */\nconst TransitionCheckState = {\n    /** The initial state of the component before any user interaction. */\n    Init: 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked: 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked: 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate: 3,\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusMonitor\n     * @param {?} _ngZone\n     * @param {?} tabIndex\n     * @param {?} _clickAction\n     * @param {?=} _animationMode\n     */\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._clickAction = _clickAction;\n        this._animationMode = _animationMode;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._currentAnimationClass = '';\n        this._currentCheckState = TransitionCheckState.Init;\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this._focusMonitor.monitor(elementRef, true).subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._onTouched();\n                    _changeDetectorRef.markForCheck();\n                }));\n            }\n        }));\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    // TODO: Delete next major revision.\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() { }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n    get indeterminate() { return this._indeterminate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set indeterminate(value) {\n        /** @type {?} */\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            }\n            else {\n                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n    _getAriaChecked() {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n    /**\n     * @private\n     * @param {?} newState\n     * @return {?}\n     */\n    _transitionCheckState(newState) {\n        /** @type {?} */\n        let oldState = this._currentCheckState;\n        /** @type {?} */\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            /** @type {?} */\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    element.classList.remove(animationClass);\n                }), 1000);\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                }));\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /**\n     * Focuses the checkbox.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'keyboard', options) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    /**\n     * @private\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        /** @type {?} */\n        let animSuffix = '';\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n}\nMatCheckbox.decorators = [\n    { type: Component, args: [{selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}@media (-ms-high-contrast:active){.mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media (hover:none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input', { static: false },] }],\n    ripple: [{ type: ViewChild, args: [MatRipple, { static: false },] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatCheckboxRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based checkbox implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator],\n            },] },\n];\nclass MatCheckboxModule {\n}\nMatCheckboxModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, _MatCheckboxRequiredValidatorModule, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };\n//# sourceMappingURL=checkbox.js.map\n"]}